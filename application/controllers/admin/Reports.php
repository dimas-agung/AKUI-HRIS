<?php defined('BASEPATH') or exit('No direct script access allowed');

/**
 * @property Department_model $Department_model
 * @property Payroll_model $Payroll_model
 * @property Reports_model $Reports_model
 * @property Timesheet_model $Timesheet_model
 * @property Training_model $Training_model
 * @property Trainers_model $Trainers_model
 * @property Employees_model $Employees_model
 */
class Reports extends MY_Controller
{

    public function __construct()
    {
        parent::__construct();

        $this->load->library(array('PHPExcel', 'PHPExcel/IOFactory'));
        $this->load->library('Tools');
        $this->load->library('Pdf');

        //load the login model
        $this->load->model('Company_model');
        $this->load->model('Core_model');
        $this->load->model('Department_model');
        $this->load->model('Payroll_model');
        $this->load->model('Reports_model');
        $this->load->model('Timesheet_model');
        $this->load->model('Training_model');
        $this->load->model('Trainers_model');

        $this->load->model("Roles_model");
        $this->load->model("Employees_model");
        $this->load->model("Designation_model");
        $this->load->model("Location_model");
        $this->load->model("Workstation_model");

        $this->load->helper('string');
    }

    /*Function to set JSON output*/
    public function output($Return = array())
    {
        /*Set response header*/
        header("Access-Control-Allow-Origin: *");
        header("Content-Type: application/json; charset=UTF-8");
        /*Final JSON response*/
        exit(json_encode($Return));
    }

    // ================================================================================
    // MODUL REPORTS
    // ================================================================================

    // reports
    public function index()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = $this->lang->line('xin_hr_report_title') . ' | ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']      = $this->lang->line('xin_hr_report_title');
        $data['path_url']         = 'hris_reports';

        $data['all_companies'] = $this->Company_model->get_company();
        $role_resources_ids = $this->Core_model->user_role_resource();

        if (
            in_array('1300', $role_resources_ids) ||
            // Sub
            in_array('1310', $role_resources_ids) ||
            in_array('1320', $role_resources_ids) ||
            in_array('1330', $role_resources_ids) ||
            in_array('1340', $role_resources_ids) ||
            in_array('1350', $role_resources_ids) ||
            in_array('1360', $role_resources_ids) ||
            $user_info[0]->user_role_id == 1
        ) {
            $data['subview'] = $this->load->view("admin/layout/hris_reports", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // ================================================================================
    // 01 MODUL KARYAWAN
    // ================================================================================

    // ================================================================================
    // >> 13.1 KARYAWAN
    // ================================================================================

    // ========================================================================
    // 13.1.1 AKTIF
    // ========================================================================

    public function employees_active()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Karyawan Aktif ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['desc']             = 'LAPORAN : Karyawan Aktif';
        $data['breadcrumbs']      = 'Karyawan Aktif';
        $data['path_url']         = 'reports_employees_active';

        $data['all_companies']    = $this->Company_model->get_company();;
        $data['all_departments']  = $this->Department_model->all_departments();
        $data['all_designations'] = $this->Designation_model->all_designations();

        $role_resources_ids       = $this->Core_model->user_role_resource();

        if (in_array('1311', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/employees_active", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_employees_active_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/employees_active", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $company_id = $this->uri->segment(4);
        $department_id = $this->uri->segment(5);
        $designation_id = $this->uri->segment(6);
        $employee = $this->Reports_model->get_employees_active_reports($company_id, $department_id, $designation_id);

        $data = array();
        $no = 1;
        foreach ($employee->result() as $r) {

            // user full name
            $full_name = $r->first_name . ' ' . $r->last_name;

            if ($r->ibu_name == '') {
                $ibu_name = '<span class="badge bg-red"> ? </span>';
            } else {
                $ibu_name = $r->ibu_name;
            }

            $nip = $r->employee_ktp;

            $ms = $r->marital_status;
            if ($ms == 'Single') {
                $nikah = 'Lajang';
            } else if ($ms == 'Married') {
                $nikah = 'Menikah';
            } else if ($ms == 'Widow') {
                $nikah = 'Janda';
            } else if ($ms == 'Widower') {
                $nikah = 'Duda';
            } else {
                $nikah = '<span class="badge bg-red"> ? </span>';
            }

            // department
            $agama = $this->Core_model->read_agama_information($r->ethnicity_type);
            if (!is_null($agama)) {
                $agama_name = $agama[0]->type;
            } else {
                $agama_name = '<span class="badge bg-red"> ? </span>';
            }

            // get designation
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '<span class="badge bg-red"> ? </span>';
            }
            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '<span class="badge bg-red"> ? </span>';
            }

            if ($r->emp_status == '') {
                $emp_status = '<span class="badge bg-red"> ? </span>';
            } elseif ($r->emp_status == 'Tetap') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_tetap') . '</span>';
            } elseif ($r->emp_status == 'Kontrak') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_kontrak') . '</span>';
            } elseif ($r->emp_status == 'Percobaan') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_percobaan') . '</span>';
            }

            $cek_emp_status =  $this->Employees_model->read_employee_contract_information($r->user_id);
            if (!is_null($cek_emp_status)) {
                $emp_status_name = '<span class="badge bg-green">' . $cek_emp_status[0]->name_type . '</span>';
            } else {

                if ($r->emp_status == 'Tetap') {
                    $emp_status_name = '<span class="badge bg-green"> Tetap </span>';
                } else {
                    $emp_status_name = '<span class="badge bg-red"> ? </span>';
                }
            }

            // jenis gaji
            $wages_type = $this->Core_model->read_user_jenis_gaji($r->wages_type);
            // user full name
            if (!is_null($wages_type)) {
                $jenis_gaji       = $wages_type[0]->jenis_gaji_keterangan;
                $jenis_gaji_warna = $wages_type[0]->warna;
            } else {
                $jenis_gaji = '<span class="badge bg-red"> ? </span>';
                $jenis_gaji_warna = '';
            }

            $rolemp_status = '<span class="' . $jenis_gaji_warna . '">' . $jenis_gaji . '</sapan>';

            // grade
            $grade_type = $this->Core_model->read_user_jenis_grade($r->grade_type);
            // user full name
            if (!is_null($grade_type)) {
                $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                $jenis_grade_warna = $grade_type[0]->warna;
            } else {
                $jenis_grade = '<span class="badge bg-red"> ? </span>';
                $jenis_grade_warna = '';
            }

            $grade_status = '<span class="' . $jenis_grade_warna . '">' . $jenis_grade . '</sapan>';

            $rekening = $this->Employees_model->get_employee_bank_account_last($r->user_id);
            if (!is_null($rekening)) {
                $rekening_name = $rekening[0]->account_number;
                $bank_name = $rekening[0]->bank_name;
            } else {
                $rekening_name = '<span class="badge bg-red"> ? </span>';
                $bank_name = '<span class="badge bg-red"> ? </span>';
            }

            $data[] = array(
                $no . ". ",
                date("d-m-Y", strtotime($r->date_of_joining)),
                $r->employee_id,
                $full_name,
                $ibu_name,
                $nip,
                $department_name,
                $designation_name,

                $nikah,
                date("d-m-Y", strtotime($r->date_of_birth)),
                $agama_name,
                $r->contact_no,
                $r->email,
                $r->address_ktp,

                $r->place_of_birth,

                $rekening_name,
                $bank_name,

                $emp_status,
                $emp_status_name,
                $rolemp_status,
                $grade_status,
            );

            $no++;
        }
        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    // ========================================================================
    // 13.1.1 TIDA AKTIF
    // ========================================================================

    public function employees_active_not()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Karyawan Tidak Aktif ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['desc']             = 'LAPORAN : Karyawan Tidak Aktif';
        $data['breadcrumbs']      = 'Karyawan Tidak Aktif';
        $data['path_url']         = 'reports_employees_active_not';

        $data['all_companies']    = $this->Company_model->get_company();;
        $data['all_departments']  = $this->Department_model->all_departments();
        $data['all_designations'] = $this->Designation_model->all_designations();

        $role_resources_ids       = $this->Core_model->user_role_resource();

        if (in_array('1311', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/employees_active_not", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_employees_active_not_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/employees_active_not", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $company_id = $this->uri->segment(4);
        $department_id = $this->uri->segment(5);
        $designation_id = $this->uri->segment(6);
        $employee = $this->Reports_model->get_employees_active_not_reports($company_id, $department_id, $designation_id);

        $data = array();
        $no = 1;
        foreach ($employee->result() as $r) {

            // user full name
            $full_name = $r->first_name . ' ' . $r->last_name;

            if ($r->ibu_name == '') {
                $ibu_name = '<span class="badge bg-red"> ? </span>';
            } else {
                $ibu_name = $r->ibu_name;
            }

            $nip = $r->employee_ktp;

            $ms = $r->marital_status;
            if ($ms == 'Single') {
                $nikah = 'Lajang';
            } else if ($ms == 'Married') {
                $nikah = 'Menikah';
            } else if ($ms == 'Widow') {
                $nikah = 'Janda';
            } else if ($ms == 'Widower') {
                $nikah = 'Duda';
            } else {
                $nikah = '<span class="badge bg-red"> ? </span>';
            }

            // department
            $agama = $this->Core_model->read_agama_information($r->ethnicity_type);
            if (!is_null($agama)) {
                $agama_name = $agama[0]->type;
            } else {
                $agama_name = '<span class="badge bg-red"> ? </span>';
            }

            // get designation
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '<span class="badge bg-red"> ? </span>';
            }
            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '<span class="badge bg-red"> ? </span>';
            }

            if ($r->emp_status == '') {
                $emp_status = '<span class="badge bg-red"> ? </span>';
            } elseif ($r->emp_status == 'Tetap') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_tetap') . '</span>';
            } elseif ($r->emp_status == 'Kontrak') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_kontrak') . '</span>';
            } elseif ($r->emp_status == 'Percobaan') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_percobaan') . '</span>';
            }

            $cek_emp_status =  $this->Employees_model->read_employee_contract_information($r->user_id);
            if (!is_null($cek_emp_status)) {
                $emp_status_name = '<span class="badge bg-green">' . $cek_emp_status[0]->name_type . '</span>';
            } else {

                if ($r->emp_status == 'Tetap') {
                    $emp_status_name = '<span class="badge bg-green"> Tetap </span>';
                } else {
                    $emp_status_name = '<span class="badge bg-red"> ? </span>';
                }
            }

            // jenis gaji
            $wages_type = $this->Core_model->read_user_jenis_gaji($r->wages_type);
            // user full name
            if (!is_null($wages_type)) {
                $jenis_gaji       = $wages_type[0]->jenis_gaji_keterangan;
                $jenis_gaji_warna = $wages_type[0]->warna;
            } else {
                $jenis_gaji = '<span class="badge bg-red"> ? </span>';
                $jenis_gaji_warna = '';
            }

            $rolemp_status = '<span class="' . $jenis_gaji_warna . '">' . $jenis_gaji . '</sapan>';

            // grade
            $grade_type = $this->Core_model->read_user_jenis_grade($r->grade_type);
            // user full name
            if (!is_null($grade_type)) {
                $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                $jenis_grade_warna = $grade_type[0]->warna;
            } else {
                $jenis_grade = '<span class="badge bg-red"> ? </span>';
                $jenis_grade_warna = '';
            }

            $grade_status = '<span class="' . $jenis_grade_warna . '">' . $jenis_grade . '</sapan>';

            $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
            if (!is_null($rekening)) {
                $rekening_name = $rekening[0]->account_number;
                $bank_name = $rekening[0]->bank_name;
            } else {
                $rekening_name = '<span class="badge bg-red"> ? </span>';
                $bank_name = '<span class="badge bg-red"> ? </span>';
            }

            $data[] = array(
                $no . ". ",
                date("d-m-Y", strtotime($r->date_of_joining)),
                $r->employee_id,
                $full_name,
                $ibu_name,
                $nip,
                $department_name,
                $designation_name,

                $nikah,
                date("d-m-Y", strtotime($r->date_of_birth)),
                $agama_name,
                $r->contact_no,
                $r->email,
                $r->address_ktp,

                $r->place_of_birth,

                $rekening_name,
                $bank_name,

                $emp_status,
                $emp_status_name,
                $rolemp_status,
                $grade_status,
            );

            $no++;
        }
        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    // ========================================================================
    // 13.1.2 KELUAR
    // ========================================================================

    public function employees_resign()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Karyawan Resign | ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['desc']             = 'LAPORAN : Karyawan Resign';
        $data['breadcrumbs']      = 'Karyawan Resign';
        $data['path_url']         = 'reports_employees_resign';

        $data['all_companies']    = $this->Company_model->get_company();;
        $data['all_bulan_gaji']   = $this->Core_model->all_bulan_gaji();

        // $data['all_departments']  = $this->Department_model->all_departments();
        // $data['all_designations'] = $this->Designation_model->all_designations();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1312', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/employees_resign", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_employees_resign_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/employees_resign", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $company_id = $this->uri->segment(4);
        $month_year = $this->uri->segment(5);


        $employee = $this->Reports_model->get_employees_resign_reports($company_id, $month_year);

        // echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();

        $data = array();
        $no = 1;
        foreach ($employee->result() as $r) {


            // user full name
            $full_name = $r->first_name . ' ' . $r->last_name;


            // get company
            $company = $this->Core_model->read_company_info($r->company_id);
            if (!is_null($company)) {
                $comp_name = $company[0]->name;
            } else {
                $comp_name = '--';
            }

            // get designation
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '--';
            }
            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '--';
            }

            if ($r->exit_interview == 1) {
                $info = 'Sudah';
            } else {
                $info = 'Belum';
            }

            date_default_timezone_set("Asia/Jakarta");



            $tanggal1 = new DateTime($r->date_of_joining);
            $tanggal2 = new DateTime($r->exit_date);

            if ($tanggal2->diff($tanggal1)->y == 0) {

                if ($tanggal2->diff($tanggal1)->m != 0 && $tanggal2->diff($tanggal1)->d != 0) {

                    $selisih = $tanggal2->diff($tanggal1)->m . ' bln ' . '' . $tanggal2->diff($tanggal1)->m . ' hr ';
                } else if ($tanggal2->diff($tanggal1)->m == 0 && $tanggal2->diff($tanggal1)->d != 0) {

                    $selisih = $tanggal2->diff($tanggal1)->d . ' hr ';
                }
            } else {
                $selisih = $tanggal2->diff($tanggal1)->y . ' thn' . ' ' . $tanggal2->diff($tanggal1)->m . ' bln ' . '' . $tanggal2->diff($tanggal1)->m . ' hr ';
            }

            $data[] = array(
                $no . ". ",
                date("d-m-Y", strtotime($r->exit_date)),
                date("d-m-Y", strtotime($r->date_of_joining)),
                $selisih,
                $r->employee_id,
                $full_name,
                $department_name,
                $designation_name,
                $r->type,
                $r->reason,
                $info

            );

            $no++;
        }
        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function resume_employees_resign_jumlah()
    {
        $company_id = $this->input->get('company_id');
        $bulan = $this->input->get('month_year');

        if ($company_id == 0) {

            $company_name = 'Semua';

            $sql = 'SELECT count(*) as jumlah_karyawan FROM view_karyawan_resign
                            WHERE  bulan = "' . $bulan . '" ';
        } else {

            $company = $this->Company_model->read_company_information($company_id);
            if (!is_null($company)) {
                $company_name = $company[0]->name;
            } else {
                $company_name = 'Semua';
            }

            $sql = 'SELECT count(*) as jumlah_karyawan FROM view_karyawan_resign
                                WHERE company_id = "' . $company_id . '" AND  bulan = "' . $bulan . '" ';
        }


        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $cek_bulan     = $this->Payroll_model->check_bulan_gaji($bulan);
                $bulan_resign     = $cek_bulan[0]->desc;

                $response['val'][] = array(
                    'company' => $company_name,
                    'bulan'      => $bulan_resign,
                    'jumlah_karyawan' => $val->jumlah_karyawan

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    // ========================================================================
    // 13.1.2 EXIT
    // ========================================================================

    public function employees_exit()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Karyawan Exit Interview | ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['desc']             = 'LAPORAN : Karyawan Exit Interview';
        $data['breadcrumbs']      = 'Karyawan exit';
        $data['path_url']         = 'reports_employees_exit';

        $data['all_companies']    = $this->Company_model->get_company();;
        $data['all_bulan_gaji']   = $this->Core_model->all_bulan_gaji();

        // $data['all_departments']  = $this->Department_model->all_departments();
        // $data['all_designations'] = $this->Designation_model->all_designations();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1312', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/employees_exit", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_employees_exit_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/employees_exit", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $company_id = $this->uri->segment(4);
        $month_year = $this->uri->segment(5);


        $employee = $this->Reports_model->get_employees_exit_reports($company_id, $month_year);

        // echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();

        $data = array();
        $no = 1;
        foreach ($employee->result() as $r) {


            // user full name
            $full_name = $r->first_name . ' ' . $r->last_name;


            // get company
            $company = $this->Core_model->read_company_info($r->company_id);
            if (!is_null($company)) {
                $comp_name = $company[0]->name;
            } else {
                $comp_name = '--';
            }

            // get designation
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '--';
            }
            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '--';
            }

            if ($r->exit_interview == 1) {
                $info = 'Sudah';
            } else {
                $info = 'Belum';
            }

            date_default_timezone_set("Asia/Jakarta");



            $tanggal1 = new DateTime($r->date_of_joining);
            $tanggal2 = new DateTime($r->exit_date);

            if ($tanggal2->diff($tanggal1)->y == 0) {

                if ($tanggal2->diff($tanggal1)->m != 0 && $tanggal2->diff($tanggal1)->d != 0) {

                    $selisih = $tanggal2->diff($tanggal1)->m . ' bln ' . '' . $tanggal2->diff($tanggal1)->m . ' hr ';
                } else if ($tanggal2->diff($tanggal1)->m == 0 && $tanggal2->diff($tanggal1)->d != 0) {

                    $selisih = $tanggal2->diff($tanggal1)->d . ' hr ';
                }
            } else {
                $selisih = $tanggal2->diff($tanggal1)->y . ' thn' . ' ' . $tanggal2->diff($tanggal1)->m . ' bln ' . '' . $tanggal2->diff($tanggal1)->m . ' hr ';
            }

            $data[] = array(
                $no . ". ",
                date("d-m-Y", strtotime($r->exit_date)),
                date("d-m-Y", strtotime($r->date_of_joining)),
                $selisih,
                $r->employee_id,
                $full_name,
                $department_name,
                $designation_name,
                $r->type,
                $r->reason,
                $info

            );

            $no++;
        }
        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function resume_employees_exit_jumlah()
    {
        $company_id = $this->input->get('company_id');
        $bulan = $this->input->get('month_year');

        if ($company_id == 0) {

            $company_name = 'Semua';

            $sql = 'SELECT count(*) as jumlah_karyawan FROM view_karyawan_exit
                            WHERE  bulan = "' . $bulan . '" ';
        } else {

            $company = $this->Company_model->read_company_information($company_id);
            if (!is_null($company)) {
                $company_name = $company[0]->name;
            } else {
                $company_name = 'Semua';
            }

            $sql = 'SELECT count(*) as jumlah_karyawan FROM view_karyawan_exit
                                WHERE company_id = "' . $company_id . '" AND  bulan = "' . $bulan . '" ';
        }


        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $cek_bulan     = $this->Payroll_model->check_bulan_gaji($bulan);
                $bulan_resign     = $cek_bulan[0]->desc;

                $response['val'][] = array(
                    'company' => $company_name,
                    'bulan'      => $bulan_resign,
                    'jumlah_karyawan' => $val->jumlah_karyawan

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    // ========================================================================
    // 13.1.1 PELATIHAN SUDAH
    // ========================================================================

    public function employees_pelatihan_sudah()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Karyawan Sudah Pelatihan ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['desc']             = 'LAPORAN : Karyawan Sudah Pelatihan';
        $data['breadcrumbs']      = 'Karyawan Sudah Pelatihan (SUDAH SELESAI)';
        $data['path_url']         = 'reports_employees_pelatihan_sudah';


        $data['all_training_types'] = $this->Training_model->all_training_types();

        $role_resources_ids       = $this->Core_model->user_role_resource();

        if (in_array('1311', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/employees_pelatihan_sudah", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_employees_pelatihan_sudah_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/employees_pelatihan_sudah", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $training_type = $this->uri->segment(4);


        $employee = $this->Reports_model->get_employees_pelatihan_sudah_reports($training_type);


        // echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();

        $data = array();
        $no = 1;
        foreach ($employee->result() as $r) {


            $user_info      = $this->Core_model->read_user_info_data($r->employee_id);

            if (!is_null($user_info)) {
                $emp_nik        = $user_info[0]->employee_id;
                $full_name      = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;
                $department_id  = $user_info[0]->department_id;
                $designation_id = $user_info[0]->designation_id;
            } else {
                $emp_nik        = '';
                $full_name      = '';
                $department_id  = '';
                $designation_id = '';
            }



            // department
            $department = $this->Department_model->read_department_information($department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '<span class="badge bg-red"> ? </span>';
            }
            // get designation
            $designation = $this->Designation_model->read_designation_information($designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '<span class="badge bg-red"> ? </span>';
            }

            $trainer = $this->Trainers_model->read_trainer_information($r->trainer_id);
            // trainer full name
            if (!is_null($trainer)) {
                $trainer_name = $trainer[0]->first_name . ' ' . $trainer[0]->last_name;
                $trainer_company = $trainer[0]->company_id;
            } else {
                $trainer_name = '--';
                $trainer_company = '--';
            }

            $type = $this->Training_model->read_training_type_information($r->training_type_id);
            if (!is_null($type)) {
                $itype = $type[0]->type;
                $ktype = $type[0]->kategori;
            } else {
                $itype = '--';
                $ktype = $type[0]->type;
            }

            $cek_kategori = $this->Training_model->read_kategori_information($ktype);
            if (!is_null($cek_kategori)) {
                $kategori_name = $cek_kategori[0]->type;
            } else {
                $kategori_name = '<span class="badge bg-red"> ? </span>';
            }

            $data[] = array(
                $no . ". ",
                date("d-m-Y", strtotime($r->start_date)),
                date("d-m-Y", strtotime($r->end_date)),
                $emp_nik,
                $full_name,
                $designation_name,
                $kategori_name,
                $itype,
                $trainer_name,


            );

            $no++;
        }
        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function employees_pelatihan_belum()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Karyawan Belum Pelatihan ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['desc']             = 'LAPORAN : Karyawan Belum Pelatihan';
        $data['breadcrumbs']      = 'Karyawan Belum Pelatihan (BELUM SELESAI)';
        $data['path_url']         = 'reports_employees_pelatihan_belum';


        $data['all_training_types'] = $this->Training_model->all_training_types();

        $role_resources_ids       = $this->Core_model->user_role_resource();

        if (in_array('1311', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/employees_pelatihan_belum", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_employees_pelatihan_belum_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/employees_pelatihan_belum", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $training_type = $this->uri->segment(4);

        $no = 1;
        $data = array();

        $trainings = $this->Reports_model->get_employees_pelatihan_belum_reports($training_type);
        foreach ($trainings as $t) {
            $traning = $t['training'];
            foreach ($t['employees'] as $emp) {
                $data[] = array(
                    $no++ . ". ",
                    $traning->start_date,
                    $traning->finish_date,
                    $emp->employee_id,
                    $emp->full_name,
                    $emp->designation_name,
                    trim($traning->category) ?: '-',
                    $traning->type,
                    trim("{$traning->first_name} {$traning->last_name}") ?: '-',
                );
            }
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $no,
            "recordsFiltered" => $no,
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }
    // ****************************************************************************
    // >> 12.3 PERSONAL
    // ****************************************************************************

    // ========================================================================
    // 12.3.1 LEMBUR
    // ========================================================================

    public function employees_overtime()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }

        $month_year = $this->input->post('month_year');

        if (isset($month_year)) : $title = date('F Y', strtotime($month_year));
        else : $title = date('F Y');
        endif;

        $data['title']             = 'Rekap Lembur | ' . $this->Core_model->site_title();
        $data['icon']              = '<i class="fa fa-print"></i> ';
        $data['breadcrumbs']       = 'Rekap Lembur';
        $data['path_url']          = 'reports_employees_overtime';

        $data['all_companies']    = $this->Company_model->get_company();
        $data['all_jenis_gaji']    = $this->Location_model->all_payroll_jenis();
        $data['all_bulan_gaji']    = $this->Core_model->all_bulan_gaji();

        $role_resources_ids        = $this->Core_model->user_role_resource();

        if (in_array('1331', $role_resources_ids)) {
            if (!empty($session)) {
                $data['subview'] = $this->load->view("admin/reports/employees_overtime", $data, TRUE);
                $this->load->view('admin/layout/layout_main', $data); //page load
            } else {
                redirect('admin/');
            }
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_employees_overtime_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/employees_overtime", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $company_id = $this->uri->segment(4);
        $department_id = $this->uri->segment(5);
        $designation_id = $this->uri->segment(6);

        $employee = $this->Reports_model->get_employees_active_reports($company_id, $department_id, $designation_id);

        $data = array();
        $no = 1;

        foreach ($employee->result() as $r) {
            // get company
            $company = $this->Core_model->read_company_info($r->company_id);
            if (!is_null($company)) {
                $comp_name = $company[0]->name;
            } else {
                $comp_name = '--';
            }

            // user full name
            $full_name = $r->first_name . ' ' . $r->last_name;

            // get designation
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '--';
            }
            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '--';
            }

            // jk
            $jk = $r->gender;
            if ($jk == 'Female') {
                $jk = 'P';
            } else {
                $jk = 'L';
            }

            // status nikah
            $ms = $r->marital_status;
            if ($ms == 'Single') {
                $ms = 'Lajang';
            } else if ($ms == 'Married') {
                $ms = 'Menikah';
            } else if ($ms == 'Widow') {
                $ms = 'Janda';
            } else if ($ms == 'Widower') {
                $ms = 'Duda';
            } else {
                $ms = '-';
            }

            $data[] = array(
                $no . ". ",
                $r->employee_id,
                $full_name,
                $r->employee_ktp,
                $jk,
                $department_name,
                $designation_name,
                $ms,
                $r->contact_no,

            );

            $no++;
        }
        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    // =============================================================================
    // 12.3.1 REKAP LEMBUR
    // =============================================================================

    // daily attendance > timesheet
    public function rekap_lembur()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']       = 'Rekap Lembur | ' . $this->Core_model->site_title();
        $data['icon']        = '<i class="fa fa-print"></i>';
        $data['desc']        = 'LAPORAN : Proses Rekap Lembur';
        $data['breadcrumbs'] = 'Rekap Lembur ';
        $data['path_url']    = 'report_rekap_lembur';

        $data['get_all_companies']    = $this->Company_model->get_company();
        $data['all_office_shifts']    = $this->Location_model->all_payroll_jenis();
        $data['all_office_pola']    = $this->Location_model->all_payroll_pola();
        $data['all_bulan_gaji']       = $this->Core_model->all_bulan_gaji_close();

        $role_resources_ids        = $this->Core_model->user_role_resource();

        if (in_array('1331', $role_resources_ids)) {
            if (!empty($session)) {
                $data['subview'] = $this->load->view("admin/reports/rekap_lembur_list", $data, TRUE);
                $this->load->view('admin/layout/layout_main', $data); //page load
            } else {
                redirect('admin/dashboard/');
            }
        } else {
            redirect('admin/dashboard');
        }
    }

    // daily attendance list > reports
    public function rekap_lembur_list()
    {

        $data['title'] = $this->Core_model->site_title();
        $session       = $this->session->userdata('username');
        $user_info     = $this->Core_model->read_user_info($session['user_id']);

        if (!empty($session)) {
            $this->load->view("admin/reports/rekap_lembur_list", $data);
        } else {
            redirect('admin/');
        }

        // Datatables Variables
        $draw               = intval($this->input->get("draw"));
        $start              = intval($this->input->get("start"));
        $length             = intval($this->input->get("length"));
        $role_resources_ids = $this->Core_model->user_role_resource();

        $company_id         = $this->input->get("company_id");
        $jenis_gaji         = $this->input->get("jenis_gaji");
        $month_year           = $this->input->get("month_year");

        // ===============================================================================================================
        // Tampilkan
        // ===============================================================================================================
        $employee = $this->Employees_model->get_rekap_lembur($company_id, $jenis_gaji, $month_year);

        $data = array();

        $no = 1;

        foreach ($employee->result() as $r) {

            // Jumlah hari 31 dlm sebulan
            if ($r->bulan == '01' || $r->bulan == '02' || $r->bulan == '04' || $r->bulan == '06' || $r->bulan == '08' || $r->bulan == '09' || $r->bulan == '11') { // 31

                $info_T29 = $r->T29;
                $info_T30 = $r->T30;
                $info_T31 = $r->T31;

                // Jumlah hari 28 dlm sebulan
            } else 	if ($r->bulan == '03') { // 28

                $info_T29 = '';
                $info_T30 = '';
                $info_T31 = '';

                // Jumlah hari 30 dlm sebulan
            } else 	if ($r->bulan == '05' || $r->bulan == '07' || $r->bulan == '10' || $r->bulan == '12') {

                $info_T29 = $r->T29;
                $info_T30 = $r->T30;
                $info_T31 = '';

                // Lainnya
            } else {

                $info_T29 = '';
                $info_T30 = '';
                $info_T31 = '';
            }

            $data[] = array(
                $no,
                strtoupper($r->full_name),

                $r->T21,
                $r->T22,
                $r->T23,
                $r->T24,
                $r->T25,
                $r->T26,

                $r->T27,
                $r->T28,

                $info_T29,
                $info_T30,
                $info_T31,

                $r->T01,
                $r->T02,
                $r->T03,
                $r->T04,
                $r->T05,
                $r->T06,
                $r->T07,
                $r->T08,
                $r->T09,
                $r->T10,

                $r->T11,
                $r->T12,
                $r->T13,
                $r->T14,
                $r->T15,
                $r->T16,
                $r->T17,
                $r->T18,
                $r->T19,
                $r->T20,

                $r->total_jam_lembur,
                $r->jam_1,
                $r->jam_1_selanjutnya,
                number_format($r->biaya_jam_1, 0, ',', '.'),
                number_format($r->biaya_jam_1_selanjutnya, 0, ',', '.'),
                number_format($r->total_biaya_lembur, 0, ',', '.')


            );
            $no++;
        }

        $output = array(
            "draw"            => $draw,
            "recordsTotal"    => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );

        echo json_encode($output);
        exit();
    }


    public function rekap_lembur_jumlah()
    {

        $company_id    = $this->input->get("company_id");
        $jenis_gaji    = $this->input->get("jenis_gaji");
        $bulan_lembur  = $this->input->get("month_year");

        $sql = 'SELECT count(*) as jumlah_karyawan, sum(total_biaya_lembur) as jumlah_lembur
                            FROM view_rekap_lembur
                            WHERE 1=1
                            AND company_id = "' . $company_id . '"
                            AND wages_type = "' . $jenis_gaji . '"
                            AND month_year = "' . $bulan_lembur . '" ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $bulan_lembur_cek     = $this->Payroll_model->check_bulan_lembur($bulan_lembur);
                $cek_bulan_lembur     = $bulan_lembur_cek[0]->desc;

                $nama_perusahaan      = $this->Payroll_model->check_company($company_id);
                $cek_perusahaan       = $nama_perusahaan[0]->name;

                $nama_jenis_gaji      = $this->Payroll_model->check_jenis($jenis_gaji);
                $cek_jenis            = $nama_jenis_gaji[0]->jenis_gaji_keterangan;

                $log_lembur_cek       = $this->Payroll_model->check_log_lembur($company_id, $jenis_gaji, $bulan_lembur);
                $cek_log_create_date  = $log_lembur_cek[0]->create_date;
                $cek_log_create_name  = $log_lembur_cek[0]->first_name . ' ' . $log_lembur_cek[0]->last_name;

                $response['val'][] = array(
                    'rekap_name'      => $cek_log_create_name,
                    'rekap_date'      => date("d-m-Y", strtotime($cek_log_create_date)),
                    'rekap_jam'       => date("H:i:s", strtotime($cek_log_create_date)),

                    'nama'            => $cek_perusahaan,
                    'jenis'           => $cek_jenis,

                    'bulan_lembur'    => $cek_bulan_lembur,
                    'jumlah_karyawan' => $val->jumlah_karyawan,
                    'jumlah_lembur'      => number_format($val->jumlah_lembur, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    // ========================================================================
    // 12.3.2 CUTI
    // ========================================================================

    public function employees_leave()
    {

        $session = $this->session->userdata('username');

        if (empty($session)) {
            redirect('admin/');
        }

        $year = $this->input->post('year');

        if (isset($year)) : $title = date('Y', strtotime($year));
        else : $title = date('Y');
        endif;

        $data['title']             = 'Rekap Cuti Tahunan | ' . $this->Core_model->site_title();
        $data['icon']              = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']       = 'Rekap Cuti Tahunan';
        $data['path_url']          = 'reports_employee_leave';


        $data['all_companies']    = $this->Company_model->get_company();
        $data['all_jenis_gaji']    = $this->Location_model->all_payroll_jenis();
        $data['all_tahun_gaji']    = $this->Core_model->all_tahun_gaji();

        $role_resources_ids        = $this->Core_model->user_role_resource();

        if (in_array('1332', $role_resources_ids)) {

            if (!empty($session)) {
                $data['subview'] = $this->load->view("admin/reports/employees_leave", $data, TRUE);
                $this->load->view('admin/layout/layout_main', $data); //page load
            } else {
                redirect('admin/');
            }
        } else {
            redirect('admin/dashboard');
        }
    }

    // ================================================================================
    // 02. MODUL GA
    // ================================================================================

    // ========================================================================
    // 1 PERJANJIAN
    // ========================================================================

    public function perjanjian()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Perjanjian | ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['desc']             = 'Laporan : Perjanjian';
        $data['breadcrumbs']      = 'Perjanjian';
        $data['path_url']         = 'reports_perjanjian';

        $data['get_all_perjanjian_type']    = $this->Core_model->get_perjanjian_type_combo();;

        $role_resources_ids       = $this->Core_model->user_role_resource();

        if (in_array('13212', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/perjanjian", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_perjanjian_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/perjanjian", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $jenis_id = $this->uri->segment(4);
        $start_date = $this->uri->segment(5);
        $end_date = $this->uri->segment(6);

        $employee = $this->Reports_model->get_perjanjian_reports($jenis_id, $start_date, $end_date);

        // echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();

        $data = array();
        $no = 1;
        foreach ($employee->result() as $r) {


            $perjanjian_nama          = strtoupper($r->perjanjian_nama);
            $perjanjian_item          = ucfirst($r->perjanjian_item);
            $perjanjian_pihak_1          = strtoupper($r->perjanjian_pihak_1);
            $perjanjian_pihak_2          = strtoupper($r->perjanjian_pihak_2);

            date_default_timezone_set("Asia/Jakarta");

            $now_date         = date("Y-m-d");

            $start_date       = date("d-m-Y", strtotime($r->start_date));
            $end_date         = date("d-m-Y", strtotime($r->end_date));

            if ($now_date > date("Y-m-d", strtotime($r->end_date))) {
                $status = '<span class="badge btn-danger" style="padding: 5px;font-size: 11px;"><i class="fa fa-times"></i> <b>Berakhir</b> </span>';
                $warna = '#e3cec1';
            } else {
                $status = '<span class="badge btn-primary" style="padding: 5px;font-size: 11px;"><i class="fa fa-check"></i> <b>Berlaku</b> </span>';
                $warna = '#c1e3cd';
            }

            if ($r->perjanjian_no != '') {
                $perjanjian_no = ucfirst($r->perjanjian_no);
            } else {
                $perjanjian_no = '<span class="badge bg-red"> ? </span>';
            }


            $data[] = array(
                $no . ". ",

                $start_date,
                $end_date,

                $r->perjanjian_type_name,
                $perjanjian_nama,

                $perjanjian_pihak_1,
                $perjanjian_pihak_2,

                $perjanjian_item,
                number_format($r->perjanjian_nilai, 0, ',', '.'),

                $status

            );

            $no++;
        }
        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    // ========================================================================
    // 2 PERIZINAN
    // ========================================================================

    public function perizinan()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Perizinan | ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['desc']             = 'Laporan : Perizinan';
        $data['breadcrumbs']      = 'perizinan';
        $data['path_url']         = 'reports_perizinan';

        $data['get_all_perizinan_type']    = $this->Core_model->get_perizinan_type_combo();;

        $role_resources_ids       = $this->Core_model->user_role_resource();

        if (in_array('13213', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/perizinan", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_perizinan_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/perizinan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $jenis_id = $this->uri->segment(4);
        $start_date = $this->uri->segment(5);
        $end_date = $this->uri->segment(6);

        $employee = $this->Reports_model->get_perizinan_reports($jenis_id, $start_date, $end_date);

        // echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();

        $data = array();
        $no = 1;
        foreach ($employee->result() as $r) {


            $perizinan_nama          = strtoupper($r->perizinan_nama);
            $perizinan_no            = ucfirst($r->perizinan_no);

            date_default_timezone_set("Asia/Jakarta");

            $now_date         = date("Y-m-d");

            $start_date       = date("d-m-Y", strtotime($r->start_date));
            $end_date         = date("d-m-Y", strtotime($r->end_date));

            if ($now_date > date("Y-m-d", strtotime($r->end_date))) {
                $status = '<span class="badge btn-danger" style="padding: 5px;font-size: 11px;"><i class="fa fa-times"></i> <b>Berakhir</b> </span>';
                $warna = '#e3cec1';
            } else {
                $status = '<span class="badge btn-primary" style="padding: 5px;font-size: 11px;"><i class="fa fa-check"></i> <b>Berlaku</b> </span>';
                $warna = '#c1e3cd';
            }

            if ($r->perizinan_no != '') {
                $perizinan_no = ucfirst($r->perizinan_no);
            } else {
                $perizinan_no = '<span class="badge bg-red"> ? </span>';
            }


            $data[] = array(
                $no . ". ",
                $start_date,
                $end_date,
                $r->perizinan_type_name,
                $perizinan_no,
                $perizinan_nama,
                $r->instansi_name,
                $status
            );

            $no++;
        }
        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }


    // ================================================================================
    // 03. MODUL LEGAL
    // ================================================================================

    // ========================================================================
    // 13.2.1 KONTRAK HABIS
    // ========================================================================

    public function employees_contract_end()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Karyawan Kontrak - Habis | ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']      = 'Karyawan Kontrak - Habis';
        $data['path_url']         = 'reports_employees_contract_end';

        $data['all_companies']    = $this->Company_model->get_company();;
        $data['all_departments']  = $this->Department_model->all_departments();
        $data['all_designations'] = $this->Designation_model->all_designations();

        $role_resources_ids       = $this->Core_model->user_role_resource();

        if (in_array('1321', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/employees_contract_end", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_contract_end_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/employees_contract_end", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $company_id = $this->uri->segment(4);
        $department_id = $this->uri->segment(5);
        $designation_id = $this->uri->segment(6);
        $employee = $this->Reports_model->get_employees_contract_end_reports($company_id, $department_id, $designation_id);

        $data = array();
        $no = 1;
        foreach ($employee->result() as $r) {

            // user full name
            $full_name = $r->first_name . ' ' . $r->last_name;

            // Perusahaan
            $company = $this->Company_model->read_company_information($r->company_id);
            if (!is_null($company)) {
                $company_name = $company[0]->name;
            } else {
                $company_name = '--';
            }

            // Departemen
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '--';
            }

            // Posisi
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '--';
            }


            if ($r->emp_status == '') {
                $emp_status = '<span class="badge bg-red"> ? </span>';
            } elseif ($r->emp_status == 'Tetap') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_tetap') . '</span>';
            } elseif ($r->emp_status == 'Kontrak') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_kontrak') . '</span>';
            } elseif ($r->emp_status == 'Percobaan') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_percobaan') . '</span>';
            }



            $data[] = array(
                $no . ". ",
                date("d-m-Y", strtotime($r->date_of_joining)),
                $r->kontrak_from_date,
                $r->kontrak_end_date,
                $r->employee_id,
                $full_name,
                $r->name_type,
                $r->kontrak_no,
                $company_name,
                $department_name,
                $designation_name,

            );

            $no++;
        }
        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    // ========================================================================
    // 13.2.2 KONTRAK AKAN HABIS
    // ========================================================================

    public function employees_contract_end_will()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Karyawan Kontrak - Akan Habis | ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']      = 'Karyawan Kontrak - Akan Habis';
        $data['path_url']         = 'reports_employees_contract_end_will';

        $data['all_companies']    = $this->Company_model->get_company();;
        $data['all_departments']  = $this->Department_model->all_departments();
        $data['all_designations'] = $this->Designation_model->all_designations();

        $role_resources_ids       = $this->Core_model->user_role_resource();

        if (in_array('1322', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/employees_contract_end_will", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_contract_end_will_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/employees_contract_end_will", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $company_id = $this->uri->segment(4);
        $department_id = $this->uri->segment(5);
        $designation_id = $this->uri->segment(6);
        $employee = $this->Reports_model->get_employees_contract_end_will_reports($company_id, $department_id, $designation_id);

        $data = array();
        $no = 1;
        foreach ($employee->result() as $r) {

            // user full name
            $full_name = $r->first_name . ' ' . $r->last_name;

            // get designation
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '--';
            }
            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '--';
            }

            if ($r->emp_status == '') {
                $emp_status = '<span class="badge bg-red"> ? </span>';
            } elseif ($r->emp_status == 'Tetap') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_tetap') . '</span>';
            } elseif ($r->emp_status == 'Kontrak') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_kontrak') . '</span>';
            } elseif ($r->emp_status == 'Percobaan') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_percobaan') . '</span>';
            }

            $data[] = array(
                $no . ". ",
                date("d-m-Y", strtotime($r->date_of_joining)),
                $r->kontrak_from_date,
                $r->kontrak_end_date,

                $r->employee_id,
                $full_name,
                $department_name,
                $designation_name,

                $r->name_type,
                $r->kontrak_no,

            );

            $no++;
        }
        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    // ========================================================================
    // 13.2.3 KONTRAK BELUM HABIS
    // ========================================================================

    public function employees_contract_do()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Karyawan Kontrak - Berlangsung | ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']      = 'Karyawan Kontrak - Berlangsung';
        $data['path_url']         = 'reports_employees_contract_do';

        $data['all_companies']    = $this->Company_model->get_company();;
        $data['all_departments']  = $this->Department_model->all_departments();
        $data['all_designations'] = $this->Designation_model->all_designations();

        $role_resources_ids       = $this->Core_model->user_role_resource();

        if (in_array('1323', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/employees_contract_do", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_contract_do_list()
    {

        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/employees_contract_do", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $company_id = $this->uri->segment(4);
        $department_id = $this->uri->segment(5);
        $designation_id = $this->uri->segment(6);
        $employee = $this->Reports_model->get_employees_contract_do_reports($company_id, $department_id, $designation_id);

        $data = array();
        $no = 1;
        foreach ($employee->result() as $r) {

            // user full name
            $full_name = $r->first_name . ' ' . $r->last_name;

            // get designation
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '--';
            }
            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '--';
            }

            if ($r->emp_status == '') {
                $emp_status = '<span class="badge bg-red"> ? </span>';
            } elseif ($r->emp_status == 'Tetap') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_tetap') . '</span>';
            } elseif ($r->emp_status == 'Kontrak') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_kontrak') . '</span>';
            } elseif ($r->emp_status == 'Percobaan') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_percobaan') . '</span>';
            }



            $data[] = array(
                $no . ". ",
                date("d-m-Y", strtotime($r->date_of_joining)),
                $r->kontrak_from_date,
                $r->kontrak_end_date,

                $r->employee_id,
                $full_name,
                $department_name,
                $designation_name,

                $r->name_type,
                $r->kontrak_no,

            );

            $no++;
        }
        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    // ========================================================================
    // 13.2.4 KONTRAK BELUM ADA
    // ========================================================================

    public function employees_contract_not()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Karyawan Kontrak - Belum Dibuat | ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']      = 'Karyawan Kontrak - Belum Dibuat';
        $data['path_url']         = 'reports_employees_contract_not';

        $data['all_companies']    = $this->Company_model->get_company();;
        $data['all_departments']  = $this->Department_model->all_departments();
        $data['all_designations'] = $this->Designation_model->all_designations();

        $role_resources_ids       = $this->Core_model->user_role_resource();

        if (in_array('1324', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/employees_contract_not", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_contract_not_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/employees_contract_not", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw       = intval($this->input->get("draw"));
        $start      = intval($this->input->get("start"));
        $length     =  intval($this->input->get("length"));

        $company_id     = $this->uri->segment(4);
        $department_id  = $this->uri->segment(5);
        $designation_id = $this->uri->segment(6);

        $employee       = $this->Reports_model->get_employees_contract_not_reports($company_id, $department_id, $designation_id);

        $data = array();
        $no = 1;
        foreach ($employee->result() as $r) {

            // user full name
            $full_name = $r->first_name . ' ' . $r->last_name;

            // get designation
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '--';
            }
            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '--';
            }

            if ($r->emp_status == '') {
                $emp_status = '<span class="badge bg-red"> ? </span>';
            } elseif ($r->emp_status == 'Tetap') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_tetap') . '</span>';
            } elseif ($r->emp_status == 'Kontrak') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_kontrak') . '</span>';
            } elseif ($r->emp_status == 'Percobaan') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_percobaan') . '</span>';
            }



            $data[] = array(
                $no . ". ",
                date("d-m-Y", strtotime($r->date_of_joining)),
                $r->kontrak_from_date,
                $r->kontrak_end_date,

                $r->employee_id,
                $full_name,
                $department_name,
                $designation_name,

                $r->kontrak_status,
                $r->kontrak_no,

            );

            $no++;
        }
        $output = array(
            "draw"              => $draw,
            "recordsTotal"    => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data"            => $data
        );
        $this->output->set_output(json_encode($output));
    }

    // ========================================================================
    // 13.2.5 TETAP
    // ========================================================================

    public function employees_permanent()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Karyawan Tetap | ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']      = 'Karyawan Tetap';
        $data['path_url']         = 'reports_employees_permanent';

        $data['all_companies']    = $this->Company_model->get_company();;
        $data['all_departments']  = $this->Department_model->all_departments();
        $data['all_designations'] = $this->Designation_model->all_designations();

        $role_resources_ids       = $this->Core_model->user_role_resource();

        if (in_array('1325', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/employees_permanent", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_permanent_list()
    {

        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/employees_permanent", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $company_id = $this->uri->segment(4);
        $department_id = $this->uri->segment(5);
        $designation_id = $this->uri->segment(6);
        $employee = $this->Reports_model->get_employees_permanent_reports($company_id, $department_id, $designation_id);

        $data = array();
        $no = 1;
        foreach ($employee->result() as $r) {

            // user full name
            $full_name = $r->first_name . ' ' . $r->last_name;

            // get designation
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '--';
            }
            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '--';
            }

            if ($r->emp_status == '') {
                $emp_status = '<span class="badge bg-red"> ? </span>';
            } elseif ($r->emp_status == 'Tetap') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_tetap') . '</span>';
            } elseif ($r->emp_status == 'Kontrak') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_kontrak') . '</span>';
            } elseif ($r->emp_status == 'Percobaan') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_percobaan') . '</span>';
            }



            $data[] = array(
                $no . ". ",
                date("d-m-Y", strtotime($r->date_of_joining)),
                $r->employee_id,
                $full_name,
                $department_name,
                $designation_name,
                $emp_status,

            );

            $no++;
        }
        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    // ================================================================================
    // 04. MODUL KEHADIRAN
    // ================================================================================

    // ****************************************************************************
    // >> 12.4 REGULER
    // ****************************************************************************

    // ========================================================================
    // 12.4.1 PER KARYAWAN BULANAN
    // ========================================================================

    public function employee_attendance()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']             = 'Kehadiran Per Karyawan Bulanan (Reguler) | ' . $this->Core_model->site_title();
        $data['icon']              = '<i class="fa fa-print"></i>';
        $data['desc']              = 'LAPORAN : Kehadiran Per Karyawan Bulanan (Reguler)';
        $data['breadcrumbs']       = 'Kehadiran Per Karyawan Bulanan (Reguler)';
        $data['path_url']          = 'reports_employee_attendance';

        $data['all_karyawan_bulanan'] = $this->Employees_model->get_employees_payslip_bulanan_reguler();

        // $data['all_office_shifts'] = $this->Location_model->all_payroll_jenis();
        // $data['get_all_companies'] = $this->Company_model->get_company();

        $role_resources_ids        = $this->Core_model->user_role_resource();
        if (in_array('1341', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/employee_attendance", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function employee_date_wise_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        $user_info = $this->Core_model->read_user_info($session['user_id']);
        if (!empty($session)) {
            $this->load->view("admin/reports/employee_attendance", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $employee_id = $this->input->get("user_id");
        //$employee = $this->Core_model->read_user_info($employee_id);

        $employee = $this->Core_model->read_user_info($employee_id);

        $start_date = new DateTime($this->input->get("start_date"));
        $end_date   = new DateTime($this->input->get("end_date"));
        $end_date   = $end_date->modify('+1 day');

        $interval_re = new DateInterval('P1D');
        $date_range = new DatePeriod($start_date, $interval_re, $end_date);
        $attendance_arr = array();

        $data = array();
        $no = 1;
        $status = '';
        $keterangan = '';

        foreach ($date_range as $date) {

            $attendance_date =  $date->format("Y-m-d");

            // attendance date
            $tdate = $this->Core_model->set_date_format($attendance_date);

            $tday = $this->Timesheet_model->conHariNama(date("D", strtotime($attendance_date)));

            $check = $this->Timesheet_model->read_attendance_info($employee_id, $attendance_date);
            if ($check->num_rows() > 0) {

                // Data
                $attendance = $this->Core_model->read_attendance_info_detail($employee_id, $attendance_date);

                if (!is_null($attendance)) {
                    // Jadwal
                    $cek_attendance_jadwal = $attendance[0]->attendance_jadwal;

                    if ($cek_attendance_jadwal == '00:00:00 s/d 00:00:00') {
                        $attendance_jadwal      = 'Libur';
                    } else {
                        $attendance_jadwal      = $cek_attendance_jadwal;
                    }

                    // Jam Masuk
                    $cek_clock_in      = $attendance[0]->clock_in;
                    if ($cek_clock_in == '00:00:00') {
                        $clock_in      = '-';
                    } else {
                        $clock_in      = $cek_clock_in;
                    }

                    // Jam Pulang
                    $cek_clock_out      = $attendance[0]->clock_out;
                    if ($cek_clock_out == '00:00:00') {
                        $clock_out      = '-';
                    } else {
                        $clock_out      = $cek_clock_out;
                    }

                    // Terlambat
                    $cek_time_late      = $attendance[0]->time_late;
                    if ($cek_time_late == '0') {
                        $time_late      = '0';
                    } else {
                        $time_late      = $cek_time_late;
                    }

                    // Pulang Cepat
                    $cek_early_leaving      = $attendance[0]->early_leaving;
                    if ($cek_early_leaving == '0') {
                        $early_leaving      = '0';
                    } else {
                        $early_leaving      = $cek_early_leaving;
                    }

                    // Overtime
                    $cek_overtime      = $attendance[0]->overtime;
                    if ($cek_overtime == '0') {
                        $overtime      = '0';
                    } else {
                        $overtime      = $cek_overtime;
                    }

                    // total wordk
                    $cek_total_work      = $attendance[0]->total_work;
                    if ($cek_total_work == '0') {
                        $total_work      = '0';
                    } else {
                        $total_work      = $cek_total_work;
                    }

                    // total wordk
                    $cek_attendance_status      = $attendance[0]->attendance_status;
                    if ($cek_attendance_status == '0') {
                        $attendance_status      = '0';
                    } else {
                        $attendance_status      = $cek_attendance_status;
                    }

                    // total wordk
                    $cek_attendance_keterangan      = $attendance[0]->attendance_keterangan;
                    if ($cek_attendance_keterangan == '0') {
                        $attendance_keterangan      = '0';
                    } else {
                        $attendance_keterangan      = $cek_attendance_keterangan;
                    }
                } else {
                    $attendance_jadwal     = '-';
                    $clock_in              = '-';
                    $clock_out             = '-';
                    $time_late             = '-';
                    $early_leaving         = '-';
                    $overtime              = '-';
                    $total_work            = '-';
                    $attendance_status     = '-';
                    $attendance_keterangan = '-';
                }
            } else {

                $attendance_jadwal     = '-';
                $clock_in              = '-';
                $clock_out             = '-';
                $time_late             = '-';
                $early_leaving         = '-';
                $overtime              = '-';
                $total_work            = '-';
                $attendance_status     = '-';
                $attendance_keterangan = '-';
            }

            // get user > added by
            $user = $this->Core_model->read_user_info($employee_id);
            // user full name
            if (!is_null($user)) {
                $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;
            } else {
                $full_name = '--';
            }

            $data[] = array(
                $no,
                $tdate,
                $tday,

                $attendance_jadwal,
                $clock_in,
                $clock_out,
                $attendance_status,
                $time_late,
                $early_leaving,
                $overtime,
                $total_work,
                $attendance_keterangan,

            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => count($date_range),
            "recordsFiltered" => count($date_range),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function empdtwise_attendance_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/employee_attendance", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));


        $employee = $this->Core_model->read_user_attendance_info();

        $data = array();

        foreach ($employee->result() as $r) {
            $data[] = array('', '', '', '', '', '', '', '');
        }

        $output = array(
            "draw"            => $draw,
            "recordsTotal"    => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data"            => $data
        );
        $this->output->set_output(json_encode($output));
    }

    // ========================================================================
    // 12.4.2 PER KARYAWAN HARIAN
    // ========================================================================

    public function employee_attendance_harian()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']               = 'Kehadiran Per Karyawan Harian (Reguler) | ' . $this->Core_model->site_title();
        $data['icon']                = '<i class="fa fa-print"></i>';
        $data['desc']                = 'LAPORAN : Kehadiran Per Karyawan Harian (Reguler)';
        $data['breadcrumbs']         = 'Kehadiran Per Karyawan Harian (Reguler)';
        $data['path_url']            = 'reports_employee_attendance_harian';

        $data['all_karyawan_harian'] = $this->Employees_model->get_employees_payslip_harian_reguler();

        $role_resources_ids          = $this->Core_model->user_role_resource();
        if (in_array('1341', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/employee_attendance_harian", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function employee_attendance_harian_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        $user_info = $this->Core_model->read_user_info($session['user_id']);
        if (!empty($session)) {
            $this->load->view("admin/reports/employee_attendance_harian", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $employee_id = $this->input->get("user_id");
        //$employee = $this->Core_model->read_user_info($employee_id);

        $employee = $this->Core_model->read_user_info($employee_id);

        $start_date = new DateTime($this->input->get("start_date"));
        $end_date   = new DateTime($this->input->get("end_date"));
        $end_date   = $end_date->modify('+1 day');

        $interval_re = new DateInterval('P1D');
        $date_range = new DatePeriod($start_date, $interval_re, $end_date);
        $attendance_arr = array();

        $data = array();
        $no = 1;
        $status = '';
        $keterangan = '';

        foreach ($date_range as $date) {

            $attendance_date =  $date->format("Y-m-d");

            // attendance date
            $tdate = $this->Core_model->set_date_format($attendance_date);

            $tday = $this->Timesheet_model->conHariNama(date("D", strtotime($attendance_date)));

            $check = $this->Timesheet_model->read_attendance_info($employee_id, $attendance_date);
            if ($check->num_rows() > 0) {

                // Data
                $attendance = $this->Core_model->read_attendance_info_detail($employee_id, $attendance_date);

                if (!is_null($attendance)) {
                    // Jadwal
                    $cek_attendance_jadwal = $attendance[0]->attendance_jadwal;

                    if ($cek_attendance_jadwal == '00:00:00 s/d 00:00:00') {
                        $attendance_jadwal      = 'Libur';
                    } else {
                        $attendance_jadwal      = $cek_attendance_jadwal;
                    }

                    // Jam Masuk
                    $cek_clock_in      = $attendance[0]->clock_in;
                    if ($cek_clock_in == '00:00:00') {
                        $clock_in      = '-';
                    } else {
                        $clock_in      = $cek_clock_in;
                    }

                    // Jam Pulang
                    $cek_clock_out      = $attendance[0]->clock_out;
                    if ($cek_clock_out == '00:00:00') {
                        $clock_out      = '-';
                    } else {
                        $clock_out      = $cek_clock_out;
                    }

                    // Terlambat
                    $cek_time_late      = $attendance[0]->time_late;
                    if ($cek_time_late == '0') {
                        $time_late      = '0';
                    } else {
                        $time_late      = $cek_time_late;
                    }

                    // Pulang Cepat
                    $cek_early_leaving      = $attendance[0]->early_leaving;
                    if ($cek_early_leaving == '0') {
                        $early_leaving      = '0';
                    } else {
                        $early_leaving      = $cek_early_leaving;
                    }

                    // Overtime
                    $cek_overtime      = $attendance[0]->overtime;
                    if ($cek_overtime == '0') {
                        $overtime      = '0';
                    } else {
                        $overtime      = $cek_overtime;
                    }

                    // total wordk
                    $cek_total_work      = $attendance[0]->total_work;
                    if ($cek_total_work == '0') {
                        $total_work      = '0';
                    } else {
                        $total_work      = $cek_total_work;
                    }

                    // total wordk
                    $cek_attendance_status      = $attendance[0]->attendance_status;
                    if ($cek_attendance_status == '0') {
                        $attendance_status      = '0';
                    } else {
                        $attendance_status      = $cek_attendance_status;
                    }

                    // total wordk
                    $cek_attendance_keterangan      = $attendance[0]->attendance_keterangan;
                    if ($cek_attendance_keterangan == '0') {
                        $attendance_keterangan      = '0';
                    } else {
                        $attendance_keterangan      = $cek_attendance_keterangan;
                    }
                } else {
                    $attendance_jadwal     = '-';
                    $clock_in              = '-';
                    $clock_out             = '-';
                    $time_late             = '-';
                    $early_leaving         = '-';
                    $overtime              = '-';
                    $total_work            = '-';
                    $attendance_status     = '-';
                    $attendance_keterangan = '-';
                }
            } else {

                $attendance_jadwal     = '-';
                $clock_in              = '-';
                $clock_out             = '-';
                $time_late             = '-';
                $early_leaving         = '-';
                $overtime              = '-';
                $total_work            = '-';
                $attendance_status     = '-';
                $attendance_keterangan = '-';
            }

            // get user > added by
            $user = $this->Core_model->read_user_info($employee_id);
            // user full name
            if (!is_null($user)) {
                $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;
            } else {
                $full_name = '--';
            }

            $data[] = array(
                $no,
                $tdate,
                $tday,

                $attendance_jadwal,
                $clock_in,
                $clock_out,
                $attendance_status,
                $time_late,
                $early_leaving,
                $overtime,
                $total_work,
                $attendance_keterangan,

            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => count($date_range),
            "recordsFiltered" => count($date_range),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }


    // ========================================================================
    // 12.4.2 PER KARYAWAN BORONGAN
    // ========================================================================

    public function employee_attendance_borongan()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']               = 'Kehadiran Per Karyawan Borongan (Reguler) | ' . $this->Core_model->site_title();
        $data['icon']                = '<i class="fa fa-print"></i>';
        $data['desc']                = 'LAPORAN : Kehadiran Per Karyawan Borongan (Reguler)';
        $data['breadcrumbs']         = 'Kehadiran Per Karyawan Borongan (Reguler)';
        $data['path_url']            = 'reports_employee_attendance_borongan';

        $data['all_karyawan_borongan'] = $this->Employees_model->get_employees_payslip_borongan_reguler();

        $role_resources_ids          = $this->Core_model->user_role_resource();
        if (in_array('1341', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/employee_attendance_borongan", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function employee_attendance_borongan_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        $user_info = $this->Core_model->read_user_info($session['user_id']);
        if (!empty($session)) {
            $this->load->view("admin/reports/employee_attendance_borongan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $employee_id = $this->input->get("user_id");
        //$employee = $this->Core_model->read_user_info($employee_id);

        $employee = $this->Core_model->read_user_info($employee_id);

        $start_date     = new DateTime($this->input->get("start_date"));
        $end_date       = new DateTime($this->input->get("end_date"));
        $end_date       = $end_date->modify('+1 day');

        $interval_re    = new DateInterval('P1D');
        $date_range     = new DatePeriod($start_date, $interval_re, $end_date);
        $attendance_arr = array();

        $data = array();
        $no = 1;
        $status = '';
        $keterangan = '';

        foreach ($date_range as $date) {

            $attendance_date =  $date->format("Y-m-d");

            // attendance date
            $tdate = $this->Core_model->set_date_format($attendance_date);

            $tday = $this->Timesheet_model->conHariNama(date("D", strtotime($attendance_date)));

            $check = $this->Timesheet_model->read_attendance_info($employee_id, $attendance_date);

            if ($check->num_rows() > 0) {

                // Data
                $attendance = $this->Core_model->read_attendance_info_detail($employee_id, $attendance_date);

                if (!is_null($attendance)) {
                    // Jadwal
                    $cek_attendance_jadwal = $attendance[0]->attendance_jadwal;

                    if ($cek_attendance_jadwal == '00:00:00 s/d 00:00:00') {
                        $attendance_jadwal      = 'Libur';
                    } else {
                        $attendance_jadwal      = $cek_attendance_jadwal;
                    }

                    // Jam Masuk
                    $cek_clock_in      = $attendance[0]->clock_in;
                    if ($cek_clock_in == '00:00:00') {
                        $clock_in      = '-';
                    } else {
                        $clock_in      = $cek_clock_in;
                    }

                    // Jam Pulang
                    $cek_clock_out      = $attendance[0]->clock_out;
                    if ($cek_clock_out == '00:00:00') {
                        $clock_out      = '-';
                    } else {
                        $clock_out      = $cek_clock_out;
                    }

                    // Terlambat
                    $cek_time_late      = $attendance[0]->time_late;
                    if ($cek_time_late == '0') {
                        $time_late      = '0';
                    } else {
                        $time_late      = $cek_time_late;
                    }

                    // Pulang Cepat
                    $cek_early_leaving      = $attendance[0]->early_leaving;
                    if ($cek_early_leaving == '0') {
                        $early_leaving      = '0';
                    } else {
                        $early_leaving      = $cek_early_leaving;
                    }

                    // Overtime
                    $cek_overtime      = $attendance[0]->overtime;
                    if ($cek_overtime == '0') {
                        $overtime      = '0';
                    } else {
                        $overtime      = $cek_overtime;
                    }

                    // total wordk
                    $cek_total_work      = $attendance[0]->total_work;
                    if ($cek_total_work == '0') {
                        $total_work      = '0';
                    } else {
                        $total_work      = $cek_total_work;
                    }

                    // total wordk
                    $cek_attendance_status      = $attendance[0]->attendance_status;
                    if ($cek_attendance_status == '0') {
                        $attendance_status      = '0';
                    } else {
                        $attendance_status      = $cek_attendance_status;
                    }

                    // total wordk
                    $cek_attendance_keterangan      = $attendance[0]->attendance_keterangan;
                    if ($cek_attendance_keterangan == '0') {
                        $attendance_keterangan      = '0';
                    } else {
                        $attendance_keterangan      = $cek_attendance_keterangan;
                    }
                } else {
                    $attendance_jadwal     = '-';
                    $clock_in              = '-';
                    $clock_out             = '-';
                    $time_late             = '-';
                    $early_leaving         = '-';
                    $overtime              = '-';
                    $total_work            = '-';
                    $attendance_status     = '-';
                    $attendance_keterangan = '-';
                }
            } else {

                $attendance_jadwal     = '-';
                $clock_in              = '-';
                $clock_out             = '-';
                $time_late             = '-';
                $early_leaving         = '-';
                $overtime              = '-';
                $total_work            = '-';
                $attendance_status     = '-';
                $attendance_keterangan = '-';
            }

            // get user > added by
            $user = $this->Core_model->read_user_info($employee_id);
            // user full name
            if (!is_null($user)) {
                $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;
            } else {
                $full_name = '--';
            }

            $data[] = array(
                $no,
                $tdate,
                $tday,

                $attendance_jadwal,
                $clock_in,
                $clock_out,
                $attendance_status,
                $time_late,
                $early_leaving,
                $overtime,
                $total_work,
                $attendance_keterangan,

            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => count($date_range),
            "recordsFiltered" => count($date_range),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }


    // =============================================================================
    // 12.4.1 REKAP ABSENSI BULANAN
    // =============================================================================

    public function attendance_rekap_bulanan()
    {

        $session = $this->session->userdata('username');

        if (empty($session)) {
            redirect('admin/');
        }

        $month_year = $this->input->post('month_year');

        if (isset($month_year)) : $title = date('F Y', strtotime($month_year));
        else : $title = date('F Y');
        endif;

        $data['title']             = 'Kehadiran Bulanan (Reguler) | ' . $title;
        $data['icon']              = '<i class="fa fa-print"></i>';
        $data['desc']              = 'LAPORAN : Kehadiran Bulanan (Reguler)';
        $data['breadcrumbs']       = 'Kehadiran Bulanan (Reguler)';
        $data['path_url']          = 'report_timesheet_monthly';

        $data['get_all_companies']    = $this->Company_model->get_company();
        $data['all_jenis_gaji']    = $this->Location_model->all_payroll_jenis();
        $data['all_jenis_pola']    = $this->Location_model->all_payroll_pola();
        $data['all_bulan_gaji']    = $this->Core_model->all_bulan_gaji();

        $role_resources_ids        = $this->Core_model->user_role_resource();

        if (in_array('1342', $role_resources_ids)) {
            if (!empty($session)) {
                $data['subview'] = $this->load->view("admin/reports/attendance_rekap_bulanan", $data, TRUE);
                $this->load->view('admin/layout/layout_main', $data); //page load
            } else {
                redirect('admin/');
            }
        } else {
            redirect('admin/dashboard');
        }
    }

    public function attendance_rekap_tahunan()
    {

        $session = $this->session->userdata('username');

        if (empty($session)) {
            redirect('admin/');
        }

        $month_year = $this->input->post('month_year');

        if (isset($month_year)) : $title = date('Y', strtotime($month_year));
        else : $title = date('Y');
        endif;

        $data['title']             = 'Kehadiran Tahunan (Reguler) | ' . $title;
        $data['icon']              = '<i class="fa fa-print"></i>';
        $data['desc']              = 'LAPORAN : Kehadiran Tahunan (Reguler)';
        $data['breadcrumbs']       = 'Kehadiran Tahunan (Reguler) - BELUM SELESAI';
        $data['path_url']          = 'report_kehadiran_tahunan';

        $data['get_all_companies'] = $this->Company_model->get_company();
        $data['all_tahun_gaji']    = $this->Core_model->all_tahun_status_payroll();

        $role_resources_ids        = $this->Core_model->user_role_resource();

        if (in_array('1342', $role_resources_ids)) {
            if (!empty($session)) {
                $data['subview'] = $this->load->view("admin/reports/attendance_rekap_bulanan_tahunan", $data, TRUE);
                $this->load->view('admin/layout/layout_main', $data); //page load
            } else {
                redirect('admin/');
            }
        } else {
            redirect('admin/dashboard');
        }
    }


    // =============================================================================
    // 13.4.1 REKAP ABSENSI HARIAN
    // =============================================================================

    // daily attendance > timesheet
    public function attendance_rekap_harian()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }

        $start_date = $this->input->post('start_date');

        if (isset($start_date)) : $title = date('F Y', strtotime($start_date));
        else : $title = date('F Y');
        endif;

        $data['title']       = 'Kehadiran Harian (Reguler) | ' . $title;
        $data['icon']        = '<i class="fa fa-print"></i>';
        $data['desc']        = 'LAPORAN : Kehadiran Harian (Reguler)';
        $data['breadcrumbs'] = 'Kehadiran Harian (Reguler)';
        $data['path_url']    = 'attendance_rekap_harian';

        $data['get_all_companies']  = $this->Company_model->get_company();
        $data['all_office_shifts']  = $this->Location_model->all_payroll_jenis();
        $data['all_office_pola']    = $this->Location_model->all_payroll_pola();
        $data['all_bulan_gaji']     = $this->Core_model->all_bulan_gaji_close();
        $data['att_data']           = array();

        $role_resources_ids        = $this->Core_model->user_role_resource();

        if (is_post()) {
            $this->load->model('Employees_model');
            $this->load->helper('array');

            $company_id = $this->input->post('company_id');
            $start_date = $this->input->post('start_date');
            $end_date = $this->input->post('end_date');

            $employees = $this->Employees_model->get_attendance_jenis_gaji_employees_reguler_recap_harian('R', $company_id)->result();
            $employee_ids = get_values($employees, 0, 'user_id');

            $att_totals = $this->Timesheet_model->get_daily_recap($employee_ids, $start_date, $end_date);

            $att_data = array();
            ini_set("precision", 12);
            foreach ($employees as $employee) {
                $user_id = $employee->user_id;
                $att = $att_totals[$user_id];
                $_att = array(
                    'libur' => element('L', $att, 0),
                    'libur_kantor' => element('LK', $att, 0),
                    'aktif' => element('H', $att, 0) + element('O', $att, 0) - element('ooo', $att, 0),
                    'sakit' => element('S', $att, 0),
                    'izin' => element('I', $att, 0),
                    'cuti' => element('C', $att, 0),
                    'alpa' => element('A', $att, 0),
                    'dinas' => element('D', $att, 0),
                    'terlambat_menit' => element('late', $att, 0),
                    'terlambat_jam' => round(element('late', $att, 0) / 60, 2),
                );

                $att_data[] = (object) array_merge(
                    array(
                        'employee_id' => $user_id,
                        'date_of_joining' => $employee->date_of_joining,
                        'first_name' => $employee->first_name,
                        'last_name' => $employee->last_name,
                        'total' => $_att['libur'] + $_att['libur_kantor'] + $_att['aktif'] + $_att['sakit'] + $_att['izin'] + $_att['cuti'] + $_att['alpa'] + $_att['dinas'],
                    ),
                    $_att
                );
            }

            $data['att_data'] = $att_data;
        }

        if (in_array('1343', $role_resources_ids)) {
            if (!empty($session)) {
                $data['subview'] = $this->load->view("admin/reports/attendance_rekap_harian", $data, TRUE);
                $this->load->view('admin/layout/layout_main', $data); //page load
            } else {
                redirect('admin/dashboard/');
            }
        } else {
            redirect('admin/dashboard');
        }
    }



    // =============================================================================
    // 13.4.1 REKAP ABSENSI BORONGAN
    // =============================================================================

    // daily attendance > timesheet
    public function attendance_rekap_borongan()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']       = 'Rekap Kehadiran Borongan | ' . $this->Core_model->site_title();
        $data['icon']        = '<i class="fa fa-print"></i>';
        $data['desc']        = 'LAPORAN : Rekap Kehadiran Borongan';
        $data['breadcrumbs'] = 'Rekap Kehadiran Borongan ';
        $data['path_url']    = 'attendance_rekap_borongan';

        $data['get_all_companies']    = $this->Company_model->get_company();
        $data['all_office_shifts']    = $this->Location_model->all_payroll_jenis();
        $data['all_office_pola']    = $this->Location_model->all_payroll_pola();
        $data['all_bulan_gaji']       = $this->Core_model->all_bulan_gaji_close();

        $role_resources_ids        = $this->Core_model->user_role_resource();

        if (is_post()) {
            $this->load->model('Employees_model');
            $this->load->helper('array');

            $company_id = $this->input->post('company_id');
            $start_date = $this->input->post('start_date');
            $end_date = $this->input->post('end_date');

            $employees = $this->Employees_model->get_attendance_jenis_gaji_employees_reguler_recap_borongan('R', $company_id)->result();
            $employee_ids = get_values($employees, 0, 'user_id');

            $att_totals = $this->Timesheet_model->get_daily_recap($employee_ids, $start_date, $end_date);

            $att_data = array();
            ini_set("precision", 12);
            foreach ($employees as $employee) {
                $user_id = $employee->user_id;
                $att = $att_totals[$user_id];
                $_att = array(
                    'libur' => element('L', $att, 0),
                    'libur_kantor' => element('LK', $att, 0),
                    'aktif' => element('H', $att, 0),
                    'sakit' => element('S', $att, 0),
                    'izin' => element('I', $att, 0),
                    'cuti' => element('C', $att, 0),
                    'alpa' => element('A', $att, 0),
                    'dinas' => element('D', $att, 0),
                    'terlambat_menit' => element('late', $att, 0),
                    'terlambat_jam' => round(element('late', $att, 0) / 60, 2),
                );

                $att_data[] = (object) array_merge(
                    array(
                        'employee_id' => $user_id,
                        'date_of_joining' => $employee->date_of_joining,
                        'first_name' => $employee->first_name,
                        'last_name' => $employee->last_name,
                        'total' => $_att['libur'] + $_att['libur_kantor'] + $_att['aktif'] + $_att['sakit'] + $_att['izin'] + $_att['cuti'] + $_att['alpa'] + $_att['dinas'],
                    ),
                    $_att
                );
            }

            $data['att_data'] = $att_data;
        }

        if (in_array('1344', $role_resources_ids)) {
            if (!empty($session)) {
                $data['subview'] = $this->load->view("admin/reports/attendance_rekap_borongan", $data, TRUE);
                $this->load->view('admin/layout/layout_main', $data); //page load
            } else {
                redirect('admin/dashboard/');
            }
        } else {
            redirect('admin/dashboard');
        }
    }

    public function attendance_rekap_borongan_list()
    {

        $data['title'] = $this->Core_model->site_title();
        $session       = $this->session->userdata('username');
        $user_info     = $this->Core_model->read_user_info($session['user_id']);

        if (!empty($session)) {
            $this->load->view("admin/reports/attendance_rekap_borongan", $data);
        } else {
            redirect('admin/');
        }

        // Datatables Variables
        $draw               = intval($this->input->get("draw"));
        $start              = intval($this->input->get("start"));
        $length             = intval($this->input->get("length"));
        $role_resources_ids = $this->Core_model->user_role_resource();

        $company_id         = $this->input->get("company_id");

        $month_year           = $this->input->get("month_year");

        // ===============================================================================================================
        // Tampilkan
        // ===============================================================================================================
        $employee           = $this->Employees_model->get_rekap_kehadiran_borongan_reguler($company_id, $month_year);

        $data = array();

        $no = 1;

        foreach ($employee->result() as $r) {

            if ($r->bulan == 1 || $r->bulan == 2) { // 31

                $info_T29 = $r->T29;
                $info_T30 = $r->T30;
                $info_T31 = $r->T31;
            } else 	if ($r->bulan == 3) { // 28

                $info_T29 = '';
                $info_T30 = '';
                $info_T31 = '';
            } else 	if ($r->bulan == 4) { // 31

                $info_T29 = $r->T29;
                $info_T30 = $r->T30;
                $info_T31 = $r->T31;
            } else 	if ($r->bulan == 5) {

                $info_T29 = '';
                $info_T30 = '';
                $info_T31 = '';
            } else 	if ($r->bulan == 6) {

                $info_T29 = $r->T29;
                $info_T30 = $r->T30;
                $info_T31 = $r->T31;
            } else 	if ($r->bulan == 7) {

                $info_T29 = $r->T29;
                $info_T30 = $r->T30;
                $info_T31 = '';
            } else {

                $info_T29 = '';
                $info_T30 = '';
                $info_T31 = '';
            }

            $data[] = array(
                $no,
                strtoupper($r->full_name),

                $r->T21,
                $r->T22,
                $r->T23,
                $r->T24,
                $r->T25,
                $r->T26,

                $r->T27,
                $r->T28,


                $info_T29,
                $info_T30,
                $info_T31,

                $r->T01,
                $r->T02,
                $r->T03,
                $r->T04,
                $r->T05,
                $r->T06,
                $r->T07,
                $r->T08,
                $r->T09,
                $r->T10,

                $r->T11,
                $r->T12,
                $r->T13,
                $r->T14,
                $r->T15,
                $r->T16,
                $r->T17,
                $r->T18,
                $r->T19,
                $r->T20,

                $r->libur,
                $r->libur_kantor,
                $r->aktif,
                $r->sakit,
                $r->izin,
                $r->cuti,
                $r->alpa,
                $r->dinas,
                $r->terlambat_menit,
                $r->terlambat_jam,
                $r->total
            );
            $no++;
        }

        $output = array(
            "draw"            => $draw,
            "recordsTotal"    => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );

        echo json_encode($output);
        exit();
    }

    // ****************************************************************************
    // >> 12.5 SHIFT
    // ****************************************************************************

    // ========================================================================
    // 12.5.1 PER KARYAWAN
    // ========================================================================

    public function employee_attendance_shift()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']             = 'Kehadiran Per Karyawan (Shift) | ' . $this->Core_model->site_title();
        $data['icon']              = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']       = 'Kehadiran Per Karyawan (Shift)';
        $data['path_url']          = 'reports_employee_attendance_shift';

        $data['all_office_shifts'] = $this->Location_model->all_payroll_jenis();
        $data['get_all_companies'] = $this->Company_model->get_company();

        $role_resources_ids        = $this->Core_model->user_role_resource();
        if (in_array('1351', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/employee_attendance_shift", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function employee_shift_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        $user_info = $this->Core_model->read_user_info($session['user_id']);
        if (!empty($session)) {
            $this->load->view("admin/reports/employee_attendance_shift", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $employee_id = $this->input->get("user_id");
        //$employee = $this->Core_model->read_user_info($employee_id);

        $employee = $this->Core_model->read_user_info($employee_id);

        $start_date = new DateTime($this->input->get("start_date"));
        $end_date   = new DateTime($this->input->get("end_date"));
        $end_date   = $end_date->modify('+1 day');

        $interval_re = new DateInterval('P1D');
        $date_range = new DatePeriod($start_date, $interval_re, $end_date);
        $attendance_arr = array();

        $data = array();
        $no = 1;
        $status = '';
        $keterangan = '';

        foreach ($date_range as $date) {

            $attendance_date =  $date->format("Y-m-d");

            // attendance date
            $tdate = $this->Core_model->set_date_format($attendance_date);

            $tday = $this->Timesheet_model->conHariNama(date("D", strtotime($attendance_date)));

            $check = $this->Timesheet_model->read_attendance_info($employee_id, $attendance_date);
            if ($check->num_rows() > 0) {

                // Data
                $attendance = $this->Core_model->read_attendance_info_detail($employee_id, $attendance_date);

                if (!is_null($attendance)) {
                    // Jadwal
                    $cek_attendance_jadwal = $attendance[0]->attendance_jadwal;

                    if ($cek_attendance_jadwal == '00:00:00 s/d 00:00:00') {
                        $attendance_jadwal      = 'Libur';
                    } else {
                        $attendance_jadwal      = $cek_attendance_jadwal;
                    }

                    // Jam Masuk
                    $cek_clock_in      = $attendance[0]->clock_in;
                    if ($cek_clock_in == '00:00:00') {
                        $clock_in      = '-';
                    } else {
                        $clock_in      = $cek_clock_in;
                    }

                    // Jam Pulang
                    $cek_clock_out      = $attendance[0]->clock_out;
                    if ($cek_clock_out == '00:00:00') {
                        $clock_out      = '-';
                    } else {
                        $clock_out      = $cek_clock_out;
                    }

                    // Terlambat
                    $cek_time_late      = $attendance[0]->time_late;
                    if ($cek_time_late == '0') {
                        $time_late      = '0';
                    } else {
                        $time_late      = $cek_time_late;
                    }

                    // Pulang Cepat
                    $cek_early_leaving      = $attendance[0]->early_leaving;
                    if ($cek_early_leaving == '0') {
                        $early_leaving      = '0';
                    } else {
                        $early_leaving      = $cek_early_leaving;
                    }

                    // Overtime
                    $cek_overtime      = $attendance[0]->overtime;
                    if ($cek_overtime == '0') {
                        $overtime      = '0';
                    } else {
                        $overtime      = $cek_overtime;
                    }

                    // total wordk
                    $cek_total_work      = $attendance[0]->total_work;
                    if ($cek_total_work == '0') {
                        $total_work      = '0';
                    } else {
                        $total_work      = $cek_total_work;
                    }

                    // total wordk
                    $cek_attendance_status      = $attendance[0]->attendance_status;
                    if ($cek_attendance_status == '0') {
                        $attendance_status      = '0';
                    } else {
                        $attendance_status      = $cek_attendance_status;
                    }

                    // total wordk
                    $cek_attendance_keterangan      = $attendance[0]->attendance_keterangan;
                    if ($cek_attendance_keterangan == '0') {
                        $attendance_keterangan      = '0';
                    } else {
                        $attendance_keterangan      = $cek_attendance_keterangan;
                    }
                } else {
                    $attendance_jadwal     = '-';
                    $clock_in              = '-';
                    $clock_out             = '-';
                    $time_late             = '-';
                    $early_leaving         = '-';
                    $overtime              = '-';
                    $total_work            = '-';
                    $attendance_status     = '-';
                    $attendance_keterangan = '-';
                }
            } else {

                $attendance_jadwal     = '-';
                $clock_in              = '-';
                $clock_out             = '-';
                $time_late             = '-';
                $early_leaving         = '-';
                $overtime              = '-';
                $total_work            = '-';
                $attendance_status     = '-';
                $attendance_keterangan = '-';
            }

            // get user > added by
            $user = $this->Core_model->read_user_info($employee_id);
            // user full name
            if (!is_null($user)) {
                $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;
            } else {
                $full_name = '--';
            }

            $data[] = array(
                $no,
                $tdate,
                $tday,

                $attendance_jadwal,
                $clock_in,
                $clock_out,
                $time_late,
                $early_leaving,
                $overtime,
                $total_work,
                $attendance_status,
                $attendance_keterangan,
                $full_name
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => count($date_range),
            "recordsFiltered" => count($date_range),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function shift_attendance_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/employee_attendance_shift", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));


        $employee = $this->Core_model->read_user_attendance_info();

        $data = array();

        foreach ($employee->result() as $r) {
            $data[] = array('', '', '', '', '', '', '', '');
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    // ========================================================================
    // 12.5.2 PER BULAN
    // ========================================================================

    public function employee_attendance_month_shift()
    {

        $session = $this->session->userdata('username');

        if (empty($session)) {
            redirect('admin/');
        }

        $month_year = $this->input->post('month_year');

        if (isset($month_year)) : $title = date('F Y', strtotime($month_year));
        else : $title = date('F Y');
        endif;

        $data['title']             = 'Kehadiran Bulanan (Shift) | ' . $title;
        $data['icon']              = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']       = 'Kehadiran Bulanan (Shift)';
        $data['path_url']          = 'report_timesheet_monthly_shift';

        $data['get_all_companies']    = $this->Company_model->get_company();
        $data['all_jenis_gaji']    = $this->Location_model->all_payroll_jenis();
        $data['all_jenis_pola']    = $this->Location_model->all_payroll_pola();
        $data['all_bulan_gaji']    = $this->Core_model->all_bulan_gaji();

        $role_resources_ids        = $this->Core_model->user_role_resource();

        if (in_array('1352', $role_resources_ids)) {
            if (!empty($session)) {
                $data['subview'] = $this->load->view("admin/reports/timesheet_monthly_shift", $data, TRUE);
                $this->load->view('admin/layout/layout_main', $data); //page load
            } else {
                redirect('admin/');
            }
        } else {
            redirect('admin/dashboard');
        }
    }

    // ****************************************************************************
    // >>  15.0.1 PRODUKTIFITAS
    // ****************************************************************************

    // ========================================================================
    // 15.0.1 PRODUKTIFITAS PER PERIODE
    // ========================================================================

    public function report_produktifitas_per_periode()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Detail Produktifitas  | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']   = 'Detail Produktifitas';
        $data['desc']          = 'LAPORAN : Detail Produktifitas';
        $data['path_url']      = 'report_produktifitas_per_periode';

        $data['all_companies']       = $this->Company_model->get_company();

        $data['get_all_workstation'] = $this->Company_model->get_workstation();

        $role_resources_ids    = $this->Core_model->user_role_resource();
        if (in_array('1501', $role_resources_ids)) {
            if (!empty($session)) {
                $data['subview'] = $this->load->view("admin/reports/report_produktifitas_per_periode", $data, TRUE);
                $this->load->view('admin/layout/layout_main', $data); //page load
            } else {
                redirect('admin/');
            }
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_produktifitas_per_periode_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/report_produktifitas_per_periode", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id

        $company_id     = $this->input->get("company_id");
        $workstation_id = $this->input->get("workstation_id");
        $start_date     = $this->input->get("start_date");
        $end_date     = $this->input->get("end_date");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $payslip = $this->Payroll_model->get_borongan_company($company_id, $workstation_id);

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($payslip->result() as $r) {

            // ====================================================================================================================
            // DATA KARYAWAN
            // ====================================================================================================================

            // Karyawan ID
            $emp_id         = $r->employee_id;

            $user_info      = $this->Core_model->read_employee_info_data($emp_id);

            if (!is_null($user_info)) {
                $emp_nik        = $user_info[0]->employee_id;
                $full_name      = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;
                $department_id  = $user_info[0]->department_id;
                $designation_id = $user_info[0]->designation_id;
            } else {
                $emp_nik        = '';
                $full_name      = '';
                $department_id  = '';
                $designation_id = '';
            }

            // ====================================================================================================================
            // DATA LAIN
            // ====================================================================================================================

            // Karyawan Departemen
            $department = $this->Department_model->read_department_information($department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '';
            }

            // get workstation
            $workstation = $this->Core_model->read_designation_workstation_info($designation_id);
            if (!is_null($workstation)) {
                $workstation_name = $workstation[0]->workstation_name;
            } else {
                $workstation_name = '';
            }

            // Karyawan Posisi
            $designation = $this->Designation_model->read_designation_information($designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '';
            }



            $job = '';

            $sql_job = " SELECT *
                                            FROM
                                                 xin_workstation_gram_terima
                                            WHERE
                                                1 = 1
                                            AND employee_id  = '" . $r->employee_id . "'
                                            AND gram_tanggal >= '" . $start_date . "' and gram_tanggal <= '" . $end_date . "'
                                            ORDER BY gram_tanggal, gram_no_job ASC";

            // echo "<pre>";
            // print_r( $sql_job );
            // echo "</pre>";
            // die;

            $query_job = $this->db->query($sql_job);

            if ($query_job->num_rows() > 0) {


                $job = '<table class="datatables-demo table table-striped table-bordered" id="xin_table">
                                                <thead>
                                                  <tr>
                                                    <th class="text-center" width="50px">No.</th>
                                                    <th class="text-center" > Tanggal </th>
                                                    <th class="text-center" > No.Job </th>
                                                    <th class="text-center" width="200px"> Nm Brg</th>
                                                    <th class="text-center" width="200px"> Ongkos/Kg</th>
                                                    <th class="text-center" width="100px"> Output (Gr)</th>
                                                    <th class="text-center" width="100px"> Jumlah (Rp)</th>

                                                  </tr>
                                                </thead>
                                                <tbody>';

                $total_biaya = 0;
                $total_gram  = 0;
                $total_jumlah = 0;
                $mo = 1;

                $cek_hadir      = $this->Timesheet_model->hitung_jumlah_produktifitas_kehadiran($r->employee_id, $start_date, $end_date);
                if (!is_null($cek_hadir)) {

                    if ($cek_hadir[0]->jumlah_hari != '') {

                        $jumlah_hadir   = $cek_hadir[0]->jumlah_hari;
                    } else {

                        $jumlah_hadir   = 0;
                    }
                } else {
                    $jumlah_hadir   = 0;
                }

                foreach ($query_job->result() as $row_job) :

                    $gram_no_job  = strtoupper($row_job->gram_no_job);
                    $gram_grading = strtoupper($row_job->gram_grading);

                    $gram_ongkos  = number_format($row_job->gram_ongkos, 0, ',', '.');
                    $gram_nilai   = number_format($row_job->gram_nilai, 0, ',', '.');

                    $gram_biaya   = number_format($row_job->gram_biaya, 0, ',', '.');

                    // $gram_jumlah   = number_format($row_job->gram_jumlah, 0, ',', '.');




                    $job = $job . '
                                                            <tr">
                                                                <td width="2%" align="center">' . $mo . '.</td>

                                                                <td width="12%"  align="center">
                                                                  ' . date("d-m-Y", strtotime($row_job->gram_tanggal)) . '
                                                                </td>

                                                                <td width="12%"  align="center">
                                                                 ' . $gram_no_job . '
                                                                </td>

                                                                <td align="left">
                                                                 ' . $gram_grading . '
                                                                </td>

                                                                <td width="12%" align="right">
                                                                 ' . $gram_ongkos . '
                                                                </td>

                                                                <td width="12%" align="right">
                                                                 ' . $gram_nilai . '
                                                                </td>

                                                                <td width="12%" align="right">
                                                                 ' . $gram_biaya . '
                                                                </td>

                                                            </tr>';

                    $total_gram   += $row_job->gram_nilai;
                    $total_biaya  += $row_job->gram_biaya;

                    $mo++;
                endforeach;





                $job = $job . '
                                                            <tr">
                                                                <td colspan ="5" align="right"> Total  </td>
                                                                <td width="12%" align="right">
                                                                    ' . number_format($total_gram, 0, ',', '.') . '
                                                                </td>
                                                                <td rowspan="2" width="12%" align="right" style="vertical-align: middle !important;
                                                                    font-size: 13px;
                                                                    font-weight: bold;">
                                                                    ' . number_format($total_biaya, 0, ',', '.') . '
                                                                </td>

                                                            </tr>';

                $job = $job . '
                                                            <tr">
                                                                <td colspan ="5" align="right"> Produktifitas </td>

                                                                <td width="12%" align="right">
                                                                    ' . $jumlah_hadir . ' hari
                                                                </td>

                                                            </tr>';

                $job = $job . '
                                                </tbody>
                                                </table>';
            } else {

                $job = '<div class="warning-msg" style="padding:5px;">
                                                    <i class ="fa fa-question-circle"></i> Tidak Ada Produktifitas
                                                 </div>';
            }



            $data[] = array(
                $no,
                $emp_nik,
                $full_name . '<br> <i class="fa fa-angle-double-right"></i> ' . $workstation_name . ' (' .    $workstation_id . ') <br><i class="fa fa-angle-double-right"></i> ' . $designation_name,
                $job

            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $payslip->num_rows(),
            "recordsFiltered" => $payslip->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function export_report_produktifitas_per_periode_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/report_produktifitas_per_periode", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');

        $start_date   = $this->input->post('start_date');


        // $bulan_gaji = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji   = 'Tanggal ';

        $cek_tanggal_gaji   = date("d-m-Y", strtotime($start_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);

        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $designation = $this->Payroll_model->get_comp_template_borongan_company($company_id, $start_date);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        if (count($designation) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:L1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:L2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:L3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "GRAMASI PEKERJAAN BORONGAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' : ' . $cek_tanggal_gaji . ' ');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object

            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:L5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:L6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );


            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);


            // Kanan
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("I7:I2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("J7:J2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("K7:K2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));


            $objPHPExcel->getActiveSheet()->getStyle('L7:L2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('I5:I6');
            $objPHPExcel->getActiveSheet()->getStyle('I5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('J5:J6');
            $objPHPExcel->getActiveSheet()->getStyle('J5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('K5:K6');
            $objPHPExcel->getActiveSheet()->getStyle('K5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('L5:L6');
            $objPHPExcel->getActiveSheet()->getStyle('L5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L");

            $val = array("No", "NIP", 'Nama', "Departemen", "Workstation", "Posisi", "Nm Brg", "Ongkos", "Gram", "Jumlah", "No Job Cabut");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );

            for ($a = 0; $a < 11; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // 1.No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(15); // 2.NIP
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(45); // 3.Nama

                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(25); // 4.Departmen
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(25); // 5.Workstation
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(25); // 6.Posisi

                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(25); // 7.NmBarg

                $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(15); // 8.Ongkos
                $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15); // 9.Gram
                $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(15); // 10.Jumlah

                $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(15); // 11.No Cabut


                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }

            $no = 1;
            $dep = 6;
            $baris = $dep + 1;

            foreach ($designation->result() as $d) {


                // ====================================================================================================================
                // DATA KARYAWAN
                // ====================================================================================================================

                // Karyawan ID
                $emp_id         = $d->employee_id;

                $user_info      = $this->Core_model->read_employee_info_data($emp_id);

                if (!is_null($user_info)) {
                    $emp_nik        = $user_info[0]->employee_id;
                    $full_name      = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;
                    $department_id  = $user_info[0]->department_id;
                    $designation_id = $user_info[0]->designation_id;
                } else {
                    $emp_nik        = '';
                    $full_name      = '';
                    $department_id  = '';
                    $designation_id = '';
                }


                // Departemen

                $department = $this->Department_model->read_department_information($department_id);
                if (!is_null($department)) {
                    $department_name = $department[0]->department_name;
                } else {
                    $department_name = '--';
                }

                // get workstation
                $workstation = $this->Core_model->read_designation_workstation_info($designation_id);
                if (!is_null($workstation)) {
                    $workstation_name = $workstation[0]->workstation_name;
                } else {
                    $workstation_name = '--';
                }

                // Karyawan Posisi
                $designation = $this->Designation_model->read_designation_information($designation_id);
                if (!is_null($designation)) {
                    $designation_name = $designation[0]->designation_name;
                } else {
                    $designation_name = '--';
                }

                // Karyawan Posisi
                $ongkos = $this->Core_model->read_gramasi_workstation_info($d->gram_grading);
                if (!is_null($ongkos)) {
                    $ongkos_pekerjaan = number_format($ongkos[0]->skala_upah_ongkos, 0, ',', '.');
                    $ongkos_biaya     = $ongkos[0]->skala_upah_ongkos;
                } else {
                    $ongkos_pekerjaan = 0;
                    $ongkos_biaya     = 0;
                }

                $jumlah = $ongkos_biaya * $d->gram_nilai / 1000;


                //pemanggilan sesuaikan dengan nama kolom tabel
                $objset->setCellValue("B" . $baris, $no);                         // 2.No
                $objset->setCellValue("C" . $baris, $emp_nik);                 // 3.Nama Karyawan
                $objset->setCellValue("D" . $baris, $full_name);                     // 4.Jabatan
                $objset->setCellValue("E" . $baris, $department_name);             // 5.Status
                $objset->setCellValue("F" . $baris, $workstation_name);                 // 6.Grade
                $objset->setCellValue("G" . $baris, $designation_name);                         // 7.Tanggal Mulai Kerja
                $objset->setCellValue("H" . $baris, $d->gram_grading);                     // 8.Masa Kerja

                $objset->setCellValue("I" . $baris, $ongkos_pekerjaan);             // 9.Gaji Pokok
                $objset->setCellValue("J" . $baris, $d->gram_nilai);             // 10.Jumlah Hadir
                $objset->setCellValue("K" . $baris, $jumlah);             // 11.Total Gaji
                $objset->setCellValue("L" . $baris, $d->gram_no_job);         // 12.Jumlah Jam Lembur


                $no++;
                $baris++;
                $dep++;
            }


            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Gramasi Pekerjaan Borongan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Gramasi Pekerjaan Borongan ' . $company_name . ' - ' . $cek_tanggal_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ========================================================================
    // 15.0.1 REKAP PRODUKTIFITAS PER PERIODE
    // ========================================================================

    public function report_produktifitas_per_periode_rekap()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Rekap Produktifitas | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']   = 'Rekap Produktifitas ';
        $data['desc']          = 'LAPORAN : Rekap Produktifitas  ';
        $data['path_url']      = 'report_produktifitas_per_periode_rekap';

        $data['all_companies']       = $this->Company_model->get_company();

        $data['get_all_workstation'] = $this->Company_model->get_workstation();

        $role_resources_ids    = $this->Core_model->user_role_resource();
        if (in_array('1501', $role_resources_ids)) {
            if (!empty($session)) {
                $data['subview'] = $this->load->view("admin/reports/report_produktifitas_per_periode_rekap", $data, TRUE);
                $this->load->view('admin/layout/layout_main', $data); //page load
            } else {
                redirect('admin/');
            }
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_produktifitas_per_periode_rekap_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/report_produktifitas_per_periode_rekap", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id

        $company_id     = $this->input->get("company_id");
        $workstation_id = $this->input->get("workstation_id");
        $start_date     = $this->input->get("start_date");
        $end_date       = $this->input->get("end_date");

        // $sql1 ="DELETE FROM xin_workstation_gram_rekap WHERE 1=1
        //         AND  company_id = '".$company_id."' AND workstation_id = '".$workstation_id."'
        //         AND start_date = '".$start_date."'  AND end_date = '".$end_date."' ";
        // // print_r($sql1);
        // // exit();
        // $query1   = $this->db->query($sql1);

        $role_resources_ids = $this->Core_model->user_role_resource();

        $payslip = $this->Payroll_model->get_borongan_company($company_id, $workstation_id);

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($payslip->result() as $r) {



            // ====================================================================================================================
            // DATA KARYAWAN
            // ====================================================================================================================

            // Karyawan ID
            $emp_id         = $r->employee_id;

            $user_info      = $this->Core_model->read_employee_info_data($emp_id);

            if (!is_null($user_info)) {
                $user_id        = $user_info[0]->user_id;
                $emp_nik        = $user_info[0]->employee_id;
                $full_name      = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;
                $department_id  = $user_info[0]->department_id;
                $designation_id = $user_info[0]->designation_id;
            } else {
                $user_id        = '';
                $emp_nik        = '';
                $full_name      = '';
                $department_id  = '';
                $designation_id = '';
            }

            // ====================================================================================================================
            // DATA LAIN
            // ====================================================================================================================

            // Karyawan Departemen
            $department = $this->Department_model->read_department_information($department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '';
            }

            // get workstation
            $workstation = $this->Core_model->read_designation_workstation_info($designation_id);
            if (!is_null($workstation)) {
                $workstation_name = $workstation[0]->workstation_name;
                $workstation_id   = $workstation[0]->workstation_id;
            } else {
                $workstation_name = '';
                $workstation_id   = '';
            }

            // Karyawan Posisi
            $designation = $this->Designation_model->read_designation_information($designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '';
            }



            $job = '';

            $sql_job = "SELECT
                                                *
                                            FROM
                                                 view_xin_workstation_gram_terima
                                            WHERE
                                                1 = 1
                                            AND employee_id  = '" . $r->employee_id . "'
                                            AND gram_tanggal >= '" . $start_date . "' and gram_tanggal <= '" . $end_date . "'
                                            ORDER BY gram_tanggal ASC";

            // echo "<pre>";
            // print_r( $sql_job );
            // echo "</pre>";
            // die;

            $query_job = $this->db->query($sql_job);

            if ($query_job->num_rows() > 0) {


                $job = '<table class="datatables-demo table table-striped table-bordered" id="xin_table">
                                                <thead>
                                                  <tr>
                                                    <th class="text-center" width="50px">No.</th>
                                                    <th class="text-center" > Tanggal </th>
                                                    <th class="text-center" width="100px"> Jumlah (Rp)</th>
                                                    <th class="text-center" width="100px"> Target (Rp) </th>
                                                    <th class="text-center" width="100px"> Ongkos (Rp)</th>
                                                    <th class="text-center" width="100px"> Informasi </th>
                                                  </tr>
                                                </thead>
                                                <tbody>';

                $total_biaya = 0;
                $total_gram  = 0;
                $total_jumlah = 0;
                $mo = 1;

                $cek_hadir      = $this->Timesheet_model->hitung_jumlah_produktifitas_kehadiran($r->employee_id, $start_date, $end_date);
                if (!is_null($cek_hadir)) {

                    if ($cek_hadir[0]->jumlah_hari != '') {

                        $jumlah_hadir   = $cek_hadir[0]->jumlah_hari;
                    } else {

                        $jumlah_hadir   = 0;
                    }
                } else {
                    $jumlah_hadir   = 0;
                }


                foreach ($query_job->result() as $row_job) :


                    $jum_biaya    = $row_job->info_biaya;
                    $gram_biaya   = number_format($row_job->info_biaya, 0, ',', '.');




                    if ($workstation_id == 4 || $workstation_id == 12) {


                        $target         = '-';

                        $nilai_target   = '-';

                        $jumlah_biaya = $jum_biaya;

                        $gram_target   = number_format($jumlah_biaya, 0, ',', '.');

                        $info_target = '';
                    } else {

                        $target         = 65000;

                        $nilai_target   = number_format($target, 0, ',', '.');

                        if ($jum_biaya == 0) {

                            $jumlah_biaya = 0;

                            $gram_target  = number_format($jumlah_biaya, 0, ',', '.');

                            $info_target = 'Target Tidak Tercapai';
                        } else if ($jum_biaya > 0 && $jum_biaya <= $target) {

                            $jumlah_biaya = $target;

                            $gram_target  = number_format($jumlah_biaya, 0, ',', '.');

                            $info_target = '<span class="label label-danger"><i class ="fa fa-times"></i> Target Tidak Tercapai</span>';
                        } else if ($jum_biaya > $target) {

                            $jumlah_biaya = $jum_biaya;

                            $gram_target  = number_format($jumlah_biaya, 0, ',', '.');

                            $info_target = '<span class="label label-success"><i class ="fa fa-check"></i> Target Tercapai</span>';
                        }
                    }


                    $job = $job . '
                                                            <tr">
                                                                <td width="2%" align="center">' . $mo . '.</td>

                                                                <td width="12%"  align="center">
                                                                  ' . date("d-m-Y", strtotime($row_job->gram_tanggal)) . '
                                                                </td>

                                                                <td width="12%" align="right">
                                                                 ' . $gram_biaya . '
                                                                </td>

                                                                <td width="12%" align="right">
                                                                 ' . $nilai_target . '
                                                                </td>

                                                                <td width="12%" align="right">
                                                                 ' . $gram_target . '
                                                                </td>

                                                                <td  align="left">
                                                                 ' . $info_target . '
                                                                </td>

                                                            </tr>';



                    $total_gram   += $jum_biaya;
                    $total_biaya  += $jumlah_biaya;

                    $mo++;
                endforeach;



                $job = $job . '
                                                            <tr">


                                                                <td colspan ="2" width="12%" align="right">
                                                                    ' . $jumlah_hadir . ' hari kerja
                                                                </td>
                                                                <td width="12%" align="right">
                                                                    ' . number_format($total_gram, 0, ',', '.') . '
                                                                </td>

                                                                <td width="12%" align="right">
                                                                </td>

                                                                <td width="12%" align="right">
                                                                    ' . number_format($total_biaya, 0, ',', '.') . '
                                                                </td>
                                                                <td colspan ="1" align="right">

                                                                </td>
                                                            </tr>';

                $job = $job . '
                                                </tbody>
                                                </table>';
            } else {

                $job = '<div class="warning-msg" style="padding:5px;">
                                                    <i class ="fa fa-question-circle"></i> Tidak Ada Produktifitas
                                                 </div>';
            }




            // $session_id = $this->session->userdata('user_id');
            // 					$user_create = $session_id['user_id'];


            // 					$data_rekap = array(
            // 						'company_id'                => $company_id,
            // 						'workstation_id'            => $workstation_id,
            // 						'start_date'     			=> $start_date,
            // 						'end_date'                  => $end_date,

            // 						'employee_id'               => $user_id,
            // 						'rekap_day'                 => $jumlah_hadir,
            // 						'rekap_gram'                => $total_gram,
            // 						'rekap_amount'              => $total_biaya,

            // 						'created_at'                => date('Y-m-d h:i:s'),
            // 						'created_by'                => $user_create
            // 					);

            // 					$this->Payroll_model->add_produktifitas_harian_rekap($data_rekap);



            $data[] = array(
                $no,
                $emp_nik,
                $full_name . '<br> <i class="fa fa-angle-double-right"></i> ' . $workstation_name . ' (' .    $workstation_id . ') <br><i class="fa fa-angle-double-right"></i> ' . $designation_name,
                $job

            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $payslip->num_rows(),
            "recordsFiltered" => $payslip->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function export_report_produktifitas_per_periode_rekap_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/report_produktifitas_per_periode_rekap", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');

        $start_date   = $this->input->post('start_date');


        // $bulan_gaji = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji   = 'Tanggal ';

        $cek_tanggal_gaji   = date("d-m-Y", strtotime($start_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);

        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $designation = $this->Payroll_model->get_comp_template_borongan_company($company_id, $start_date);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        if (count($designation) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:L1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:L2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:L3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "GRAMASI PEKERJAAN BORONGAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' : ' . $cek_tanggal_gaji . ' ');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object

            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:L5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:L6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );


            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);


            // Kanan
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("I7:I2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("J7:J2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("K7:K2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));


            $objPHPExcel->getActiveSheet()->getStyle('L7:L2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('I5:I6');
            $objPHPExcel->getActiveSheet()->getStyle('I5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('J5:J6');
            $objPHPExcel->getActiveSheet()->getStyle('J5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('K5:K6');
            $objPHPExcel->getActiveSheet()->getStyle('K5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('L5:L6');
            $objPHPExcel->getActiveSheet()->getStyle('L5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L");

            $val = array("No", "NIP", 'Nama', "Departemen", "Workstation", "Posisi", "Nm Brg", "Ongkos", "Gram", "Jumlah", "No Job Cabut");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );

            for ($a = 0; $a < 11; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // 1.No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(15); // 2.NIP
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(45); // 3.Nama

                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(25); // 4.Departmen
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(25); // 5.Workstation
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(25); // 6.Posisi

                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(25); // 7.NmBarg

                $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(15); // 8.Ongkos
                $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15); // 9.Gram
                $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(15); // 10.Jumlah

                $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(15); // 11.No Cabut


                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }

            $no = 1;
            $dep = 6;
            $baris = $dep + 1;

            foreach ($designation->result() as $d) {


                // ====================================================================================================================
                // DATA KARYAWAN
                // ====================================================================================================================

                // Karyawan ID
                $emp_id         = $d->employee_id;

                $user_info      = $this->Core_model->read_employee_info_data($emp_id);

                if (!is_null($user_info)) {
                    $emp_nik        = $user_info[0]->employee_id;
                    $full_name      = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;
                    $department_id  = $user_info[0]->department_id;
                    $designation_id = $user_info[0]->designation_id;
                } else {
                    $emp_nik        = '';
                    $full_name      = '';
                    $department_id  = '';
                    $designation_id = '';
                }


                // Departemen

                $department = $this->Department_model->read_department_information($department_id);
                if (!is_null($department)) {
                    $department_name = $department[0]->department_name;
                } else {
                    $department_name = '--';
                }

                // get workstation
                $workstation = $this->Core_model->read_designation_workstation_info($designation_id);
                if (!is_null($workstation)) {
                    $workstation_name = $workstation[0]->workstation_name;
                } else {
                    $workstation_name = '--';
                }

                // Karyawan Posisi
                $designation = $this->Designation_model->read_designation_information($designation_id);
                if (!is_null($designation)) {
                    $designation_name = $designation[0]->designation_name;
                } else {
                    $designation_name = '--';
                }

                // Karyawan Posisi
                $ongkos = $this->Core_model->read_gramasi_workstation_info($d->gram_grading);
                if (!is_null($ongkos)) {
                    $ongkos_pekerjaan = number_format($ongkos[0]->skala_upah_ongkos, 0, ',', '.');
                    $ongkos_biaya     = $ongkos[0]->skala_upah_ongkos;
                } else {
                    $ongkos_pekerjaan = 0;
                    $ongkos_biaya     = 0;
                }

                $jumlah = $ongkos_biaya * $d->gram_nilai / 1000;


                //pemanggilan sesuaikan dengan nama kolom tabel
                $objset->setCellValue("B" . $baris, $no);                         // 2.No
                $objset->setCellValue("C" . $baris, $emp_nik);                 // 3.Nama Karyawan
                $objset->setCellValue("D" . $baris, $full_name);                     // 4.Jabatan
                $objset->setCellValue("E" . $baris, $department_name);             // 5.Status
                $objset->setCellValue("F" . $baris, $workstation_name);                 // 6.Grade
                $objset->setCellValue("G" . $baris, $designation_name);                         // 7.Tanggal Mulai Kerja
                $objset->setCellValue("H" . $baris, $d->gram_grading);                     // 8.Masa Kerja

                $objset->setCellValue("I" . $baris, $ongkos_pekerjaan);             // 9.Gaji Pokok
                $objset->setCellValue("J" . $baris, $d->gram_nilai);             // 10.Jumlah Hadir
                $objset->setCellValue("K" . $baris, $jumlah);             // 11.Total Gaji
                $objset->setCellValue("L" . $baris, $d->gram_no_job);         // 12.Jumlah Jam Lembur


                $no++;
                $baris++;
                $dep++;
            }


            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Gramasi Pekerjaan Borongan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Gramasi Pekerjaan Borongan ' . $company_name . ' - ' . $cek_tanggal_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ========================================================================
    // 15.0.2 PRODUKTIFITAS PER BULAN
    // ========================================================================

    public function report_produktifitas_per_month()
    {

        $session = $this->session->userdata('username');

        if (empty($session)) {
            redirect('admin/');
        }

        $month_year = $this->input->post('month_year');

        if (isset($month_year)) : $title = date('F Y', strtotime($month_year));
        else : $title = date('F Y');
        endif;

        $data['title']             = 'Produktifitas Biaya Per Bulanan| ' . $title;
        $data['icon']              = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']       = 'Produktifitas Per Biaya Bulanan';
        $data['path_url']          = 'report_produktifitas_per_monthly';

        $data['get_all_companies']    = $this->Company_model->get_company();
        $data['all_jenis_gaji']    = $this->Location_model->all_payroll_jenis();
        $data['all_jenis_pola']    = $this->Location_model->all_payroll_pola();
        $data['all_bulan_gaji']    = $this->Core_model->all_bulan_gaji();

        $role_resources_ids        = $this->Core_model->user_role_resource();

        if (in_array('1502', $role_resources_ids)) {
            if (!empty($session)) {
                $data['subview'] = $this->load->view("admin/reports/report_produktifitas_per_monthly", $data, TRUE);
                $this->load->view('admin/layout/layout_main', $data); //page load
            } else {
                redirect('admin/');
            }
        } else {
            redirect('admin/dashboard');
        }
    }

    // ================================================================================
    // 05. MODUL THR
    // ================================================================================

    // ========================================================================
    // 12.6.3 DETAIL THR
    // ========================================================================

    public function detail_thr()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Detail THR | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']   = 'Detail THR';
        $data['path_url']      = 'reports_detail_thr';

        $data['all_companies']  = $this->Company_model->get_company();
        $data['all_tahun_thr']  = $this->Core_model->all_tahun_gaji();
        $data['all_thr_date']   = $this->Core_model->all_monthly_thr_date();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1381', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/detail_thr", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function slip_detail_thr_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/detail_thr", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("thr_year");
        $tanggal_thr = $this->input->get("tanggal_thr");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_thr($this->input->get("company_id"), $this->input->get("thr_year"), $this->input->get("tanggal_thr"));

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {
            $user = $this->Core_model->read_user_info($r->employee_id);
            if (!is_null($user)) {

                $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;
                $emp_link = $user[0]->employee_id;

                $tahun_thr = date("Y", strtotime($r->tahun_thr));

                $p_amount = $this->Core_model->currency_sign($r->net_salary);

                // get date > created at > and format
                $created_at = $this->Core_model->set_date_format($r->created_at);
                // get designation
                $designation = $this->Designation_model->read_designation_information($user[0]->designation_id);
                if (!is_null($designation)) {
                    $designation_name = $designation[0]->designation_name;
                } else {
                    $designation_name = '--';
                }

                // department
                $department = $this->Department_model->read_department_information($user[0]->department_id);
                if (!is_null($department)) {
                    $department_name = $department[0]->department_name;
                } else {
                    $department_name = '--';
                }

                $department_designation = $designation_name . ' (' . $department_name . ')';

                // get company
                $company = $this->Core_model->read_company_info($user[0]->company_id);
                if (!is_null($company)) {
                    $comp_name = $company[0]->name;
                } else {
                    $comp_name = '--';
                }
                // bank account
                // $bank_account = $this->Employees_model->get_employee_bank_account_last($user[0]->user_id);
                // if(!is_null($bank_account)){
                // 	$account_number = $bank_account[0]->account_number;
                // 	$bank_name = $bank_account[0]->bank_code.'-'.$bank_account[0]->bank_name;
                // } else {
                // 	$account_number = '--';
                // 	$bank_name = '--';
                // }

                $rekening_name = $r->rekening_name;

                $bank_name = $r->bank_name;


                $ifull_name = nl2br($full_name . "\r\n <small class='text-muted'><i>" . $this->lang->line('xin_employees_id') . ': ' . $emp_link . "<i></i></i></small>\r\n <small class='text-muted'><i>" . $department_designation . '<i></i></i></small>');

                $data[] = array(
                    $no,
                    $tahun_thr,
                    $tanggal_thr,
                    $full_name,
                    $comp_name,
                    $department_name,
                    $designation_name,
                    $p_amount,
                    $rekening_name,
                    $bank_name
                );
                $no++;
            }
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function export_detail_thr()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/detail_thr", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');
        $thr_year     = $this->input->post('thr_year');

        $tanggal_thr     = $this->input->post('tanggal_thr');

        $cek_tahun_thr = $this->input->post('thr_year');


        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);

        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $departemen = $this->Payroll_model->get_comp_template_dept_bulanan_lihat_thr($company_id, $thr_year);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        if (count($departemen) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:N1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:N2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:N3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "REKAP THR BULANAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", "TAHUN " . $cek_tahun_thr . " TANGGAL " . $tanggal_thr);

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0);     // inisiasi set object
            $objget = $objPHPExcel->getActiveSheet();           // inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:N5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:N6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('M7:M2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('B5:N5000')->getAlignment()->setWrapText(true);

            // Kanan
            $objPHPExcel->getActiveSheet()->getStyle("I7:I2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->getActiveSheet()->getStyle("J7:J2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->getActiveSheet()->getStyle("K7:K2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->getActiveSheet()->getStyle("L7:L2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));

            $objPHPExcel->getActiveSheet()->getStyle("M7:M2560")->getNumberFormat()->setFormatCode()->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT)));

            // $objPHPExcel->getActiveSheet()->getStyle("F7:F2560")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('I5:I6');
            $objPHPExcel->getActiveSheet()->getStyle('I5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('J5:J6');
            $objPHPExcel->getActiveSheet()->getStyle('J5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('K5:K6');
            $objPHPExcel->getActiveSheet()->getStyle('K5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('L5:L6');
            $objPHPExcel->getActiveSheet()->getStyle('L5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('M5:M6');
            $objPHPExcel->getActiveSheet()->getStyle('M5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('N5:N6');
            $objPHPExcel->getActiveSheet()->getStyle('N5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);



            //table header
            $cols = array("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N");

            $val = array("", "No", "Nama", 'Jabatan', "Status", "Grade", "Tanggal Kerja", "Masa Kerja", "Gaji Pokok", "Tj.Jabatan", "Total T1&T2", "Total THR", "No Rekening", "Bank");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );


            for ($a = 0; $a < 14; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(45); // Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(35); // Jabatan

                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(10); // StatuS
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(10); // Grade
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(12); // Tanggal Kerja
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(12); // Masa Kerja

                $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(15); // Gaji Pokok
                $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15); // Tj. Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(15); // Tj. T1&T2

                $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(15); // Total THR
                $objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(20); // No.Rekening
                $objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(15); // Bank

                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $dep = 6;
            $baris = $dep + 1;



            // $da = $baris+1;
            //$mo = $no+$baris;
            foreach ($departemen->result() as $d) {

                $grouping = $this->Employees_model->get_employee_by_department_company_bulanan_thr($d->company_id, $d->department_id, $thr_year, $tanggal_thr);
                if (!is_null($grouping)) {
                    $jumlah_karyawan = $grouping[0]->jumlah;
                } else {
                    $jumlah_karyawan = '';
                }

                if ($jumlah_karyawan > 0) {

                    // Karyawan Departemen
                    $department = $this->Department_model->read_department_information($d->department_id);
                    if (!is_null($department)) {
                        $department_name = $department[0]->department_name;
                    } else {
                        $department_name = '';
                    }

                    // $objset->setCellValue("B".$baris, );
                    $objset->setCellValue("B" . ($baris + 1) . "", $department_name . ', Jumlah  : ' . $jumlah_karyawan . ' Karyawan');

                    $objset->getStyle("B" . ($baris + 1) . ":N" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'B8CCE4')
                                ),

                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                ),

                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                )
                            )
                        );

                    $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":N" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'B8CCE4')
                                ),
                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )
                            )
                        );


                    $objset->mergeCells("B" . ($baris + 1) . ":D" . ($baris + 1) . "")
                        ->getStyle("B" . ($baris + 1) . ":D" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->getStyle("I" . ($jumlah_karyawan + $baris + 2) . ":L" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getNumberFormat()
                        ->setFormatCode("#,##0")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                                ),

                            )
                        );

                    $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Total ');

                    $objset->setCellValue("I" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(I" . ($baris + 2) . ":I" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("J" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(J" . ($baris + 2) . ":J" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("K" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(K" . ($baris + 2) . ":K" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("L" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(L" . ($baris + 2) . ":L" . ($jumlah_karyawan + $baris + 1) . ")");


                    // $objset->setCellValue("B".($jumlah_karyawan+$baris+3)."", '');

                    $thr = $this->Payroll_model->get_comp_template_bulanan_dep_lihat_thr($d->company_id, 1, $thr_year, $tanggal_thr, $d->department_id);

                    $no = 1;
                    $baris =  $baris + 2;
                    foreach ($thr->result() as $r) {

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        // Karyawan ID
                        $emp_id = $r->employee_id;

                        $user_info = $this->Core_model->read_user_info($emp_id);
                        $emp_nik   = $user_info[0]->employee_id;
                        $full_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        // $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
                        //       		if(!is_null($rekening)){
                        // 	$rekening_name = $rekening[0]->account_number;
                        // 	$bank_name = $rekening[0]->bank_name;
                        // } else {
                        // 	$rekening_name = '';
                        // 	$bank_name = '--';
                        // }

                        $rekening_name = $r->rekening_name;

                        $bank_name = $r->bank_name;

                        $cek_karyawan_status = $user_info[0]->emp_status;

                        if ($cek_karyawan_status != '') {
                            $karyawan_status     = $cek_karyawan_status;
                        } else {
                            $karyawan_status     = '';
                        }



                        // Karyawan Posisi
                        $designation = $this->Designation_model->read_designation_information($r->designation_id);
                        if (!is_null($designation)) {
                            $designation_name = $designation[0]->designation_name;
                        } else {
                            $designation_name = '';
                        }

                        $jabatan = $designation_name;

                        // Karyawan Masa kerja
                        date_default_timezone_set("Asia/Jakarta");

                        $doj = $r->doj;

                        $tanggal1 = new DateTime($r->doj);
                        $tanggal2 = new DateTime($tanggal_thr);

                        if ($tanggal2->diff($tanggal1)->y == 0) {
                            $selisih = $tanggal2->diff($tanggal1)->m . ' bln';
                        } else {
                            $selisih = $tanggal2->diff($tanggal1)->y . ' thn' . ' ' . $tanggal2->diff($tanggal1)->m . ' bln';
                        }

                        $cek_karyawan_status = $user_info[0]->emp_status;

                        // Karyawan Status
                        $emp_status =  $this->Employees_model->read_employee_contract_information2($r->employee_id);
                        if (!is_null($emp_status)) {
                            $emp_status_name = $emp_status[0]->name_type;
                        } else {
                            if ($cek_karyawan_status == 'Tetap') {
                                $emp_status_name = 'Tetap';
                            } else {
                                $emp_status_name = '';
                            }
                        }

                        // grade
                        $grade_type = $this->Core_model->read_user_jenis_grade($user_info[0]->grade_type);

                        if (!is_null($grade_type)) {
                            $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                            $jenis_grade_warna = $grade_type[0]->warna;
                        } else {
                            $jenis_grade       = '';
                            $jenis_grade_warna = '';
                        }


                        //pemanggilan sesuaikan dengan nama kolom tabel

                        $objset->setCellValue("B" . $baris, $no);                        // No
                        $objset->setCellValue("C" . $baris, $full_name);                // Nama Karyawan
                        $objset->setCellValue("D" . $baris, $jabatan);                    // Jabatan

                        $objset->setCellValue("E" . $baris, $emp_status_name);            // Status
                        $objset->setCellValue("F" . $baris, $jenis_grade);                // Grade
                        $objset->setCellValue("G" . $baris, $doj);                        // Tanggal Mulai Kerja
                        $objset->setCellValue("H" . $baris, $selisih);                    // Masa Kerja

                        $objset->setCellValue("I" . $baris, $r->basic_salary);             // Gaji Pokok
                        $objset->setCellValue("J" . $baris, $r->jumlah_tunj_jabatan);     // Tj. Jabatan
                        $objset->setCellValue("K" . $baris, $r->total_jumlah);             // Total

                        $objset->setCellValue("L" . $baris, $r->net_salary);            // Total THR
                        $objset->setCellValue("M" . $baris, "'" . $r->rekening_name);     // No.Rekening
                        $objset->setCellValue("N" . $baris, $bank_name);                // Bank

                        $no++;
                        $baris++;
                    }

                    $dep++;
                }
            }

            $total_emp = $this->Employees_model->get_employee_by_company_bulanan_thr($d->company_id, $thr_year, $tanggal_thr);
            if (!is_null($total_emp)) {
                $total_karyawan = $total_emp[0]->jumlah;
            } else {
                $total_karyawan = '';
            }

            $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 1) . "", $company_name);
            $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Jumlah Karyawan THR Bulanan Tahun ' . $cek_tahun_thr . ' Tanggal Batas THR ' . $tanggal_thr . ' : ');


            $objset->getStyle("B" . ($jumlah_karyawan + $baris + 1) . ":N" . ($jumlah_karyawan + $baris + 1) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'E26B0A')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 12,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":N" . ($jumlah_karyawan + $baris + 2) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'F7F1A5')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 1) . ":D" . ($jumlah_karyawan + $baris + 1) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris + 1) . ":D" . ($jumlah_karyawan + $baris + 1) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->getStyle("L" . ($jumlah_karyawan + $baris + 1) . ":L" . ($jumlah_karyawan + $baris + 1) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );

            $grand_total = $this->Payroll_model->get_comp_template_bulanan_lihat_thr($d->company_id, 1, $thr_year);

            foreach ($grand_total->result() as $g) {

                $objset->setCellValue("L" . ($jumlah_karyawan + $baris + 1) . "", $g->net_salary);
                $objset->setCellValue("L" . ($jumlah_karyawan + $baris + 2) . "", $total_karyawan);
            }
            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Rekap THR Bulanan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Rekap THR Bulanan ' . $company_name . ' - ' . $cek_tahun_thr;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ========================================================================
    // 12.6.3 REKAP THR
    // ========================================================================

    public function rekap_thr()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Rekap THR | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']   = 'Rekap THR';
        $data['path_url']      = 'reports_rekap_thr';

        $data['all_companies'] = $this->Company_model->get_company();
        $data['all_tahun_thr']    = $this->Core_model->all_tahun_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1381', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/rekap_thr", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function slip_rekap_thr_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/rekap_thr", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("thr_year");
        $tanggal_thr = $this->input->get("tanggal_thr");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_thr($this->input->get("company_id"), $this->input->get("thr_year"), $this->input->get("tanggal_thr"));

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {
            $user = $this->Core_model->read_user_info($r->employee_id);
            if (!is_null($user)) {

                $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;
                $emp_link = $user[0]->employee_id;

                $tahun_thr = date("Y", strtotime($r->tahun_thr));

                $p_amount = $this->Core_model->currency_sign($r->net_salary);

                // get date > created at > and format
                $created_at = $this->Core_model->set_date_format($r->created_at);
                // get designation
                $designation = $this->Designation_model->read_designation_information($user[0]->designation_id);
                if (!is_null($designation)) {
                    $designation_name = $designation[0]->designation_name;
                } else {
                    $designation_name = '--';
                }

                // department
                $department = $this->Department_model->read_department_information($user[0]->department_id);
                if (!is_null($department)) {
                    $department_name = $department[0]->department_name;
                } else {
                    $department_name = '--';
                }

                $department_designation = $designation_name . ' (' . $department_name . ')';

                // get company
                $company = $this->Core_model->read_company_info($user[0]->company_id);
                if (!is_null($company)) {
                    $comp_name = $company[0]->name;
                } else {
                    $comp_name = '--';
                }



                $ifull_name = nl2br($full_name . "\r\n <small class='text-muted'><i>" . $this->lang->line('xin_employees_id') . ': ' . $emp_link . "<i></i></i></small>\r\n <small class='text-muted'><i>" . $department_designation . '<i></i></i></small>');

                $data[] = array(
                    $no,
                    $tahun_thr,
                    $tanggal_thr,
                    $full_name,
                    $comp_name,
                    $department_name,
                    $designation_name,
                    $p_amount,
                    $r->rekening_name,
                    $r->bank_name
                );
                $no++;
            }
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function export_rekap_thr()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/detail_thr", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');
        $thr_year     = $this->input->post('thr_year');

        $tanggal_thr     = $this->input->post('tanggal_thr');

        $cek_tahun_thr = $this->input->post('thr_year');


        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);

        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $departemen = $this->Payroll_model->get_comp_template_dept_bulanan_lihat_thr($company_id, $thr_year);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        if (count($departemen) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:N1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:N2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:N3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "REKAP THR BULANAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", "TAHUN " . $cek_tahun_thr . " TANGGAL " . $tanggal_thr);

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0);     // inisiasi set object
            $objget = $objPHPExcel->getActiveSheet();           // inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:N5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:N6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('M7:M2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('B5:N5000')->getAlignment()->setWrapText(true);

            // Kanan
            $objPHPExcel->getActiveSheet()->getStyle("I7:I2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->getActiveSheet()->getStyle("J7:J2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->getActiveSheet()->getStyle("K7:K2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->getActiveSheet()->getStyle("L7:L2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));

            $objPHPExcel->getActiveSheet()->getStyle("M7:M2560")->getNumberFormat()->setFormatCode()->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT)));

            // $objPHPExcel->getActiveSheet()->getStyle("F7:F2560")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('I5:I6');
            $objPHPExcel->getActiveSheet()->getStyle('I5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('J5:J6');
            $objPHPExcel->getActiveSheet()->getStyle('J5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('K5:K6');
            $objPHPExcel->getActiveSheet()->getStyle('K5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('L5:L6');
            $objPHPExcel->getActiveSheet()->getStyle('L5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('M5:M6');
            $objPHPExcel->getActiveSheet()->getStyle('M5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('N5:N6');
            $objPHPExcel->getActiveSheet()->getStyle('N5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);



            //table header
            $cols = array("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N");

            $val = array("", "No", "Nama", 'Jabatan', "Status", "Grade", "Tanggal Kerja", "Masa Kerja", "Gaji Pokok", "Tj.Jabatan", "Total T1&T2", "Total THR", "No Rekening", "Bank");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );


            for ($a = 0; $a < 14; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(45); // Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(35); // Jabatan

                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(10); // StatuS
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(10); // Grade
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(12); // Tanggal Kerja
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(12); // Masa Kerja

                $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(15); // Gaji Pokok
                $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15); // Tj. Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(15); // Tj. T1&T2

                $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(15); // Total THR
                $objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(20); // No.Rekening
                $objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(15); // Bank

                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $dep = 6;
            $baris = $dep + 1;



            // $da = $baris+1;
            //$mo = $no+$baris;
            foreach ($departemen->result() as $d) {

                $grouping = $this->Employees_model->get_employee_by_department_company_bulanan_thr($d->company_id, $d->department_id, $thr_year, $tanggal_thr);
                if (!is_null($grouping)) {
                    $jumlah_karyawan = $grouping[0]->jumlah;
                } else {
                    $jumlah_karyawan = '';
                }

                if ($jumlah_karyawan > 0) {

                    // Karyawan Departemen
                    $department = $this->Department_model->read_department_information($d->department_id);
                    if (!is_null($department)) {
                        $department_name = $department[0]->department_name;
                    } else {
                        $department_name = '';
                    }

                    // $objset->setCellValue("B".$baris, );
                    $objset->setCellValue("B" . ($baris + 1) . "", $department_name . ', Jumlah  : ' . $jumlah_karyawan . ' Karyawan');

                    $objset->getStyle("B" . ($baris + 1) . ":N" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'B8CCE4')
                                ),

                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                ),

                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                )
                            )
                        );

                    $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":N" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'B8CCE4')
                                ),
                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )
                            )
                        );


                    $objset->mergeCells("B" . ($baris + 1) . ":D" . ($baris + 1) . "")
                        ->getStyle("B" . ($baris + 1) . ":D" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->getStyle("I" . ($jumlah_karyawan + $baris + 2) . ":L" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getNumberFormat()
                        ->setFormatCode("#,##0")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                                ),

                            )
                        );

                    $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Total ');

                    $objset->setCellValue("I" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(I" . ($baris + 2) . ":I" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("J" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(J" . ($baris + 2) . ":J" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("K" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(K" . ($baris + 2) . ":K" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("L" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(L" . ($baris + 2) . ":L" . ($jumlah_karyawan + $baris + 1) . ")");


                    // $objset->setCellValue("B".($jumlah_karyawan+$baris+3)."", '');

                    $thr = $this->Payroll_model->get_comp_template_bulanan_dep_lihat_thr($d->company_id, 1, $thr_year, $tanggal_thr, $d->department_id);

                    $no = 1;
                    $baris =  $baris + 2;
                    foreach ($thr->result() as $r) {

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        // Karyawan ID
                        $emp_id = $r->employee_id;

                        $user_info = $this->Core_model->read_user_info($emp_id);
                        $emp_nik   = $user_info[0]->employee_id;
                        $full_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        // $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
                        //       		if(!is_null($rekening)){
                        // 	$rekening_name = $rekening[0]->account_number;
                        // 	$bank_name = $rekening[0]->bank_name;
                        // } else {
                        // 	$rekening_name = '';
                        // 	$bank_name = '--';
                        // }

                        $rekening_name = $r->rekening_name;

                        $bank_name = $r->bank_name;

                        $cek_karyawan_status = $user_info[0]->emp_status;

                        if ($cek_karyawan_status != '') {
                            $karyawan_status     = $cek_karyawan_status;
                        } else {
                            $karyawan_status     = '';
                        }



                        // Karyawan Posisi
                        $designation = $this->Designation_model->read_designation_information($r->designation_id);
                        if (!is_null($designation)) {
                            $designation_name = $designation[0]->designation_name;
                        } else {
                            $designation_name = '';
                        }

                        $jabatan = $designation_name;

                        // Karyawan Masa kerja
                        date_default_timezone_set("Asia/Jakarta");

                        $doj = $r->doj;

                        $tanggal1 = new DateTime($r->doj);
                        $tanggal2 = new DateTime($tanggal_thr);

                        if ($tanggal2->diff($tanggal1)->y == 0) {
                            $selisih = $tanggal2->diff($tanggal1)->m . ' bln';
                        } else {
                            $selisih = $tanggal2->diff($tanggal1)->y . ' thn' . ' ' . $tanggal2->diff($tanggal1)->m . ' bln';
                        }

                        $cek_karyawan_status = $user_info[0]->emp_status;

                        // Karyawan Status
                        $emp_status =  $this->Employees_model->read_employee_contract_information2($r->employee_id);
                        if (!is_null($emp_status)) {
                            $emp_status_name = $emp_status[0]->name_type;
                        } else {
                            if ($cek_karyawan_status == 'Tetap') {
                                $emp_status_name = 'Tetap';
                            } else {
                                $emp_status_name = '';
                            }
                        }

                        // grade
                        $grade_type = $this->Core_model->read_user_jenis_grade($user_info[0]->grade_type);

                        if (!is_null($grade_type)) {
                            $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                            $jenis_grade_warna = $grade_type[0]->warna;
                        } else {
                            $jenis_grade       = '';
                            $jenis_grade_warna = '';
                        }


                        //pemanggilan sesuaikan dengan nama kolom tabel

                        $objset->setCellValue("B" . $baris, $no);                        // No
                        $objset->setCellValue("C" . $baris, $full_name);                // Nama Karyawan
                        $objset->setCellValue("D" . $baris, $jabatan);                    // Jabatan

                        $objset->setCellValue("E" . $baris, $emp_status_name);            // Status
                        $objset->setCellValue("F" . $baris, $jenis_grade);                // Grade
                        $objset->setCellValue("G" . $baris, $doj);                        // Tanggal Mulai Kerja
                        $objset->setCellValue("H" . $baris, $selisih);                    // Masa Kerja

                        $objset->setCellValue("I" . $baris, $r->basic_salary);             // Gaji Pokok
                        $objset->setCellValue("J" . $baris, $r->jumlah_tunj_jabatan);     // Tj. Jabatan
                        $objset->setCellValue("K" . $baris, $r->total_jumlah);             // Total

                        $objset->setCellValue("L" . $baris, $r->net_salary);            // Total THR
                        $objset->setCellValue("M" . $baris, "'" . $r->rekening_name);     // No.Rekening
                        $objset->setCellValue("N" . $baris, $bank_name);                // Bank

                        $no++;
                        $baris++;
                    }

                    $dep++;
                }
            }

            $total_emp = $this->Employees_model->get_employee_by_company_bulanan_thr($d->company_id, $thr_year, $tanggal_thr);
            if (!is_null($total_emp)) {
                $total_karyawan = $total_emp[0]->jumlah;
            } else {
                $total_karyawan = '';
            }

            $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 1) . "", $company_name);
            $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Jumlah Karyawan THR Bulanan Tahun ' . $cek_tahun_thr . ' Tanggal Batas THR ' . $tanggal_thr . ' : ');


            $objset->getStyle("B" . ($jumlah_karyawan + $baris + 1) . ":N" . ($jumlah_karyawan + $baris + 1) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'E26B0A')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 12,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":N" . ($jumlah_karyawan + $baris + 2) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'F7F1A5')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 1) . ":D" . ($jumlah_karyawan + $baris + 1) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris + 1) . ":D" . ($jumlah_karyawan + $baris + 1) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->getStyle("L" . ($jumlah_karyawan + $baris + 1) . ":L" . ($jumlah_karyawan + $baris + 1) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );

            $grand_total = $this->Payroll_model->get_comp_template_bulanan_lihat_thr($d->company_id, 1, $thr_year);

            foreach ($grand_total->result() as $g) {

                $objset->setCellValue("L" . ($jumlah_karyawan + $baris + 1) . "", $g->net_salary);
                $objset->setCellValue("L" . ($jumlah_karyawan + $baris + 2) . "", $total_karyawan);
            }
            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Rekap THR Bulanan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Rekap THR Bulanan ' . $company_name . ' - ' . $cek_tahun_thr;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ========================================================================
    // 12.6.4 RESUME
    // ========================================================================

    public function resume_thr_bulanan()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Resume THR Bulanan | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']   = 'Resume THR Bulanan';
        $data['path_url']      = 'reports_resume_thr_bulanan';

        $data['all_companies'] = $this->Company_model->get_company();
        $data['all_tahun_thr']    = $this->Core_model->all_tahun_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1381', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/resume_thr_bulanan", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function resume_thr_bulanan_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/resume_thr_bulanan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("tahun_thr");


        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_thr_resume_year($this->input->get("tahun_thr"));


        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {

            // get company
            $company = $this->Core_model->read_company_info($r->company_id);
            if (!is_null($company)) {
                $comp_name = $company[0]->name;
            } else {
                $comp_name = '<span class="badge bg-red"> ? </span>';
            }

            $data[] = array(
                $no,
                date("Y", strtotime($r->tahun_thr)),
                $r->tanggal_thr,
                $r->jumlah,
                $this->Core_model->currency_sign($r->net_salary),
                $comp_name
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function resume_thr_bulanan_list_detail()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/resume_thr_bulanan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date      = $this->input->get("tahun_gaji");
        $tanggal_thr = $this->input->get("tanggal_thr");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_thr_history_year($this->input->get("company_id"), $this->input->get("tahun_gaji"), $this->input->get("tanggal_thr"));

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {
            $data[] = array(
                $no,

                date("F", strtotime($r->salary_month)),
                $r->jumlah,
                $this->Core_model->currency_sign($r->ga_pok),
                $this->Core_model->currency_sign($r->lembur),
                $this->Core_model->currency_sign($r->tj_jabatan),
                $this->Core_model->currency_sign($r->tj_produktifitas),
                $this->Core_model->currency_sign($r->tj_transportasi),
                $this->Core_model->currency_sign($r->tj_komunikasi),
                $this->Core_model->currency_sign($r->insentif),

                $this->Core_model->currency_sign($r->pph),
                $this->Core_model->currency_sign($r->pinjaman),
                $this->Core_model->currency_sign($r->bpjs_kes),
                $this->Core_model->currency_sign($r->bpjs_tk),
                $r->jum_alpa,
                $this->Core_model->currency_sign($r->potongan_alpa),
                $r->jum_izin,
                $this->Core_model->currency_sign($r->potongan_izin),

                $this->Core_model->currency_sign($r->net_salary),
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function export_resume_thr_bulanan()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/resume", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');
        $month_year   = $this->input->post('month_year');


        $bulan_gaji         = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji     = $bulan_gaji[0]->desc;
        $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji[0]->end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);
        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $departemen = $this->Payroll_model->get_comp_template_dept_bulanan_resume($company_id);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        if (count($departemen) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:Y1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:Y2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:Y3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );



            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "REKAP GAJI BULANAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object
            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object



            $objPHPExcel->getActiveSheet()->getStyle("B5:Y5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );




            $objPHPExcel->getActiveSheet()->getStyle("B6:Y6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('B5:W5000')->getAlignment()->setWrapText(true);

            // Kanan

            $objPHPExcel->setActiveSheetIndex(0)->getStyle("I7:I2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("J7:J2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("K7:K2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("L7:L2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("M7:M2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("N7:N2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("O7:O2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("P7:P2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("Q7:Q2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("R7:R2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("S7:S2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("T7:T2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("U7:U2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("V7:V2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("W7:W2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("X7:X2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));

            $objPHPExcel->getActiveSheet()->getStyle('Y7:Y2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('I5:I6');
            $objPHPExcel->getActiveSheet()->getStyle('I5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            $objPHPExcel->getActiveSheet()->mergeCells('J5:O5');

            $objPHPExcel->getActiveSheet()->mergeCells('P5:W5');

            $objPHPExcel->getActiveSheet()->mergeCells('X5:X6');
            $objPHPExcel->getActiveSheet()->getStyle('X5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('Y5:Y6');
            $objPHPExcel->getActiveSheet()->getStyle('Y5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y");

            $val = array("No", "Nama", 'Jabatan', "Status", "Grade", "Tanggal Kerja", "Masa Kerja", "Gaji Pokok", "Penambah", "K", "L", "M", "N", "O", "Pengurang", "Q", "R", "S", "T", "U", "V", "W", "Total Gaji", "No Rekening");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );



            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("J6", "Lembur");
            $objPHPExcel->getActiveSheet()->getStyle('J6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("K6", "Tj.Jabatan");
            $objPHPExcel->getActiveSheet()->getStyle('K6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("L6", "Tj.Produktifitas");
            $objPHPExcel->getActiveSheet()->getStyle('L6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("M6", "Tj.Transportasi");
            $objPHPExcel->getActiveSheet()->getStyle('M6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("N6", "Tj.Komunikasi");
            $objPHPExcel->getActiveSheet()->getStyle('N6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("O6", "Insentif");
            $objPHPExcel->getActiveSheet()->getStyle('O6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("P6", "Pajak (PPh)");
            $objPHPExcel->getActiveSheet()->getStyle('P6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("Q6", "Pinjaman");
            $objPHPExcel->getActiveSheet()->getStyle('Q6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("R6", "BPJS Kes");
            $objPHPExcel->getActiveSheet()->getStyle('R6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("S6", "BPJS TK");
            $objPHPExcel->getActiveSheet()->getStyle('S6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("T6", "Jumlah Alpa");
            $objPHPExcel->getActiveSheet()->getStyle('T6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("U6", "Potongan Alpa");
            $objPHPExcel->getActiveSheet()->getStyle('U6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("V6", "Jumlah Izin");
            $objPHPExcel->getActiveSheet()->getStyle('V6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("W6", "Potongan Izin");
            $objPHPExcel->getActiveSheet()->getStyle('W6')->applyFromArray($style);


            for ($a = 0; $a < 24; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(45); // Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(35); // Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(10); // Status
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(10); // Grade
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(12); // Tanggal
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(12); // Masa Kerja
                $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(15); // Gaji Pokok
                $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15); // Lembur
                $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(15); // Tj.Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(15); // Tj.Produktifitas
                $objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(15); // Tj.Transportasi
                $objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(15); // Tj.Komunikasi
                $objPHPExcel->getActiveSheet()->getColumnDimension('O')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('P')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('Q')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('R')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('S')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('T')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('U')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('V')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('W')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('X')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('Y')->setWidth(15); // Insentif


                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $dep = 6;
            $baris = $dep + 1;



            // $da = $baris+1;
            //$mo = $no+$baris;
            foreach ($departemen->result() as $d) {

                $grouping = $this->Employees_model->get_employee_by_department_company($d->company_id, $d->department_id);
                if (!is_null($grouping)) {
                    $jumlah_karyawan = $grouping[0]->jumlah;
                } else {
                    $jumlah_karyawan = '';
                }

                // $objset->setCellValue("B".$baris, );
                $objset->setCellValue("B" . ($baris + 1) . "", $d->department_name . ', Jumlah  : ' . $jumlah_karyawan . ' Karyawan');

                $objset->getStyle("B" . ($baris + 1) . ":Y" . ($baris + 1) . "")
                    ->applyFromArray(
                        array(
                            'fill' => array(
                                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                'color' => array('rgb' => 'B8CCE4')
                            ),

                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            ),

                            'borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            )
                        )
                    );

                $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":Y" . ($jumlah_karyawan + $baris + 2) . "")
                    ->applyFromArray(
                        array(
                            'fill' => array(
                                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                'color' => array('rgb' => 'B8CCE4')
                            ),
                            'borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )
                        )
                    );


                $objset->mergeCells("B" . ($baris + 1) . ":Y" . ($baris + 1) . "")
                    ->getStyle("B" . ($baris + 1) . ":Y" . ($baris + 1) . "")
                    ->applyFromArray(
                        array(

                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )

                        )
                    );

                $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                    ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                    ->applyFromArray(
                        array(

                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )

                        )
                    );

                $objset->getStyle("I" . ($jumlah_karyawan + $baris + 2) . ":X" . ($jumlah_karyawan + $baris + 2) . "")
                    ->getNumberFormat()
                    ->setFormatCode("#,##0")
                    ->applyFromArray(
                        array(

                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                            ),

                        )
                    );

                $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Total ');

                $objset->setCellValue("I" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(I" . ($baris + 2) . ":I" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("J" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(J" . ($baris + 2) . ":J" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("K" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(K" . ($baris + 2) . ":K" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("L" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(L" . ($baris + 2) . ":L" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("M" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(M" . ($baris + 2) . ":M" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("N" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(N" . ($baris + 2) . ":N" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("O" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(O" . ($baris + 2) . ":O" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("P" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(P" . ($baris + 2) . ":P" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("Q" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(Q" . ($baris + 2) . ":Q" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("R" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(R" . ($baris + 2) . ":R" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("S" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(S" . ($baris + 2) . ":S" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("T" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(T" . ($baris + 2) . ":T" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("U" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(U" . ($baris + 2) . ":U" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("V" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(V" . ($baris + 2) . ":V" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("W" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(W" . ($baris + 2) . ":W" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("X" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(X" . ($baris + 2) . ":X" . ($jumlah_karyawan + $baris + 1) . ")");

                // $objset->setCellValue("B".($jumlah_karyawan+$baris+3)."", '');

                $payslip = $this->Payroll_model->get_comp_template_bulanan_dep_lihat($d->company_id, 1, $month_year, $d->department_id);

                $no = 1;
                $baris =  $baris + 2;
                foreach ($payslip->result() as $r) {

                    // ====================================================================================================================
                    // DATA KARYAWAN
                    // ====================================================================================================================

                    // Karyawan ID
                    $emp_id = $r->employee_id;

                    $user_info = $this->Core_model->read_user_info($emp_id);
                    $emp_nik   = $user_info[0]->employee_id;
                    $full_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;

                    // ====================================================================================================================
                    // DATA KARYAWAN
                    // ====================================================================================================================
                    $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
                    if (!is_null($rekening)) {
                        $rekening_name = $rekening[0]->account_number;
                    } else {
                        $rekening_name = '';
                    }

                    $cek_karyawan_status = $user_info[0]->emp_status;

                    if ($cek_karyawan_status != '') {
                        $karyawan_status     = $cek_karyawan_status;
                    } else {
                        $karyawan_status     = '';
                    }

                    // Karyawan Departemen
                    $department = $this->Department_model->read_department_information($r->department_id);
                    if (!is_null($department)) {
                        $department_name = $department[0]->department_name;
                    } else {
                        $department_name = '';
                    }

                    // Karyawan Posisi
                    $designation = $this->Designation_model->read_designation_information($r->designation_id);
                    if (!is_null($designation)) {
                        $designation_name = $designation[0]->designation_name;
                    } else {
                        $designation_name = '';
                    }

                    $jabatan = $designation_name;

                    // Karyawan Masa kerja
                    date_default_timezone_set("Asia/Jakarta");

                    $doj = $r->doj;

                    $tanggal1 = new DateTime($r->doj);
                    $tanggal2 = new DateTime();

                    if ($tanggal2->diff($tanggal1)->y == 0) {
                        $selisih = $tanggal2->diff($tanggal1)->m . ' bln';
                    } else {
                        $selisih = $tanggal2->diff($tanggal1)->y . ' thn' . ' ' . $tanggal2->diff($tanggal1)->m . ' bln';
                    }

                    // Karyawan Status
                    $emp_status =  $this->Employees_model->read_employee_contract_information2($r->employee_id);
                    if (!is_null($emp_status)) {
                        $emp_status_name = $emp_status[0]->name_type;
                    } else {
                        $emp_status_name = '';
                    }

                    // grade
                    $grade_type = $this->Core_model->read_user_jenis_grade($user_info[0]->grade_type);

                    if (!is_null($grade_type)) {
                        $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                        $jenis_grade_warna = $grade_type[0]->warna;
                    } else {
                        $jenis_grade       = '';
                        $jenis_grade_warna = '';
                    }


                    //pemanggilan sesuaikan dengan nama kolom tabel
                    $objset->setCellValue("B" . $baris, $no);                                                                         // No
                    $objset->setCellValue("C" . $baris, $full_name);                                                                 // Nama Karyawan
                    $objset->setCellValue("D" . $baris, $jabatan);                                                         // Jabatan
                    $objset->setCellValue("E" . $baris, $emp_status_name);                                                             // Status
                    $objset->setCellValue("F" . $baris, $jenis_grade);                                                                 // Grade
                    $objset->setCellValue("G" . $baris, $doj);                                                                         // Tanggal Mulai Kerja
                    $objset->setCellValue("H" . $baris, $selisih);                                                                     // Masa Kerja
                    $objset->setCellValue("I" . $baris, $r->basic_salary);                         // Gaji Pokok
                    $objset->setCellValue("J" . $baris, $r->overtime_amount);                                                                                 // Gaji Pokok
                    $objset->setCellValue("K" . $baris, $r->jumlah_tunj_jabatan);                                                                                 // Gaji Poko
                    $objset->setCellValue("L" . $baris, $r->jumlah_tunj_produktifitas);                                                                                 // Gaji Poko
                    $objset->setCellValue("M" . $baris, $r->jumlah_tunj_transportasi);                                                                                 // Gaji Poko
                    $objset->setCellValue("N" . $baris, $r->jumlah_tunj_komunikasi);
                    $objset->setCellValue("O" . $baris, $r->commissions_amount);
                    $objset->setCellValue("P" . $baris, $r->other_payments_amount);
                    $objset->setCellValue("Q" . $baris, $r->loan_de_amount);
                    $objset->setCellValue("R" . $baris, $r->bpjs_kes_amount);                                                                                 // Gaji Poko
                    $objset->setCellValue("S" . $baris, $r->bpjs_tk_amount);
                    $objset->setCellValue("T" . $baris, $r->jumlah_alpa);
                    $objset->setCellValue("U" . $baris, $r->potongan_alpa);
                    $objset->setCellValue("V" . $baris, $r->jumlah_izin);
                    $objset->setCellValue("W" . $baris, $r->potongan_izin);
                    $objset->setCellValue("X" . $baris, $r->net_salary);

                    $objset->setCellValue("Y" . $baris, $r->rekening_name);

                    $no++;
                    $baris++;
                }

                $dep++;
            }

            $total_emp = $this->Employees_model->get_employee_by_company($d->company_id);
            if (!is_null($grouping)) {
                $total_karyawan = $total_emp[0]->jumlah;
            } else {
                $total_karyawan = '';
            }

            $objset->setCellValue("B" . ($jumlah_karyawan + $baris) . "", 'Grand Total ' . $total_karyawan . ' Karyawan');

            $objset->getStyle("B" . ($jumlah_karyawan + $baris) . ":Y" . ($jumlah_karyawan + $baris) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'B8CCE4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );


            $objset->mergeCells("B" . ($jumlah_karyawan + $baris) . ":H" . ($jumlah_karyawan + $baris) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris) . ":H" . ($jumlah_karyawan + $baris) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->getStyle("I" . ($jumlah_karyawan + $baris) . ":X" . ($jumlah_karyawan + $baris) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );

            $grand_total = $this->Payroll_model->get_comp_template_bulanan_lihat($d->company_id, 1, $month_year);

            foreach ($grand_total->result() as $g) {
                $objset->setCellValue("I" . ($jumlah_karyawan + $baris) . "", $g->ga_pok);
                $objset->setCellValue("J" . ($jumlah_karyawan + $baris) . "", $g->lembur);
                $objset->setCellValue("K" . ($jumlah_karyawan + $baris) . "", $g->tj_jabatan);
                $objset->setCellValue("L" . ($jumlah_karyawan + $baris) . "", $g->tj_produktifitas);
                $objset->setCellValue("M" . ($jumlah_karyawan + $baris) . "", $g->tj_transportasi);
                $objset->setCellValue("N" . ($jumlah_karyawan + $baris) . "", $g->tj_komunikasi);
                $objset->setCellValue("O" . ($jumlah_karyawan + $baris) . "", $g->insentif);
                $objset->setCellValue("P" . ($jumlah_karyawan + $baris) . "", $g->pph);
                $objset->setCellValue("Q" . ($jumlah_karyawan + $baris) . "", $g->pinjaman);
                $objset->setCellValue("R" . ($jumlah_karyawan + $baris) . "", $g->bpjs_kes);
                $objset->setCellValue("S" . ($jumlah_karyawan + $baris) . "", $g->bpjs_tk);
                $objset->setCellValue("T" . ($jumlah_karyawan + $baris) . "", $g->jum_alpa);
                $objset->setCellValue("U" . ($jumlah_karyawan + $baris) . "", $g->potongan_alpa);
                $objset->setCellValue("V" . ($jumlah_karyawan + $baris) . "", $g->jum_izin);
                $objset->setCellValue("W" . ($jumlah_karyawan + $baris) . "", $g->potongan_izin);
                $objset->setCellValue("X" . ($jumlah_karyawan + $baris) . "", $g->net_salary);
            }
            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Daftar Gaji Bulanan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Gaji Bulanan ' . $company_name . ' - ' . $cek_bulan_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ================================================================================
    // 06. MODUL PENGGAJIAN
    // ================================================================================

    // ****************************************************************************
    // >>  13.6 BULANAN
    // ****************************************************************************

    // ========================================================================
    // 13.6.1 KARYAWAN
    // ========================================================================

    public function karyawan_bulanan()
    {

        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Karyawan Gaji Bulanan ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['desc']             = 'LAPORAN : Karyawan Gaji Bulanan';
        $data['breadcrumbs']      = 'Karyawan Gaji Bulanan';
        $data['path_url']         = 'reports_karyawan_bulanan';

        $data['all_companies']    = $this->Company_model->get_company();;
        $data['all_departments']  = $this->Department_model->all_departments();
        $data['all_designations'] = $this->Designation_model->all_designations();

        $role_resources_ids       = $this->Core_model->user_role_resource();

        if (in_array('1361', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/karyawan_bulanan", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_karyawan_bulanan_list()
    {

        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/karyawan_bulanan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $company_id = $this->uri->segment(4);
        $department_id = $this->uri->segment(5);
        $designation_id = $this->uri->segment(6);
        $employee = $this->Reports_model->get_karyawan_bulanan_reports($company_id, $department_id, $designation_id);

        $data = array();
        $no = 1;
        foreach ($employee->result() as $r) {


            // user full name
            $full_name = $r->first_name . ' ' . $r->last_name;

            // get designation
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '--';
            }
            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '--';
            }

            if ($r->emp_status == '') {
                $emp_status = '<span class="badge bg-red"> ? </span>';
            } elseif ($r->emp_status == 'Tetap') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_tetap') . '</span>';
            } elseif ($r->emp_status == 'Kontrak') {
                $emp_status = '<span class="badge bg-yellow">' . $this->lang->line('xin_employee_status_kontrak') . '</span>';
            } elseif ($r->emp_status == 'Percobaan') {
                $emp_status = '<span class="badge bg-blue">' . $this->lang->line('xin_employee_status_percobaan') . '</span>';
            }

            $cek_emp_status =  $this->Employees_model->read_employee_contract_information($r->user_id);
            if (!is_null($cek_emp_status)) {
                $emp_status_name = '<span class="badge bg-yellow">' . $cek_emp_status[0]->name_type . '</span>';
            } else {

                if ($r->emp_status == 'Tetap') {
                    $emp_status_name = '<span class="badge bg-green"> Tetap </span>';
                } else {
                    $emp_status_name = '<span class="badge bg-red"> ? </span>';
                }
            }

            // jenis gaji
            $wages_type = $this->Core_model->read_user_jenis_gaji($r->wages_type);
            // user full name
            if (!is_null($wages_type)) {
                $jenis_gaji       = $wages_type[0]->jenis_gaji_keterangan;
                $jenis_gaji_warna = $wages_type[0]->warna;
            } else {
                $jenis_gaji = '<span class="badge bg-red"> ? </span>';
                $jenis_gaji_warna = '';
            }

            $rolemp_status = '<span class="' . $jenis_gaji_warna . '">' . $jenis_gaji . '</sapan>';

            // grade
            $grade_type = $this->Core_model->read_user_jenis_grade($r->grade_type);
            // user full name
            if (!is_null($grade_type)) {
                $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                $jenis_grade_warna = $grade_type[0]->warna;
            } else {
                $jenis_grade = '<span class="badge bg-red"> ? </span>';
                $jenis_grade_warna = '';
            }

            $grade_status = '<span class="' . $jenis_grade_warna . '">' . $jenis_grade . '</sapan>';

            $data[] = array(
                $no . ". ",
                date("d-m-Y", strtotime($r->date_of_joining)),
                $r->employee_id,
                $full_name,
                $department_name,
                $designation_name,
                $emp_status,
                $emp_status_name,
                $rolemp_status,
                $grade_status,
            );

            $no++;
        }
        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    // ========================================================================
    // 13.6.2 DETAIL
    // ========================================================================

    public function gaji_bulanan()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Detail Gaji Bulanan | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['desc']         = 'LAPORAN : Detail Gaji Bulanan';
        $data['breadcrumbs']   = 'Detail Gaji Bulanan';
        $data['path_url']      = 'report_gaji_bulanan';

        $data['all_companies']     = $this->Company_model->get_company();
        $data['all_bulan_gaji']    = $this->Core_model->all_bulan_gaji();

        $role_resources_ids    = $this->Core_model->user_role_resource();
        if (in_array('1362', $role_resources_ids)) {
            if (!empty($session)) {
                $data['subview'] = $this->load->view("admin/reports/gaji_bulanan", $data, TRUE);
                $this->load->view('admin/layout/layout_main', $data); //page load
            } else {
                redirect('admin/');
            }
        } else {
            redirect('admin/dashboard');
        }
    }

    // payslip > employees
    public function gaji_bulanan_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_bulanan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("month_year");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        if ($user_info[0]->user_role_id == 1 || in_array('1361', $role_resources_ids)) {

            if ($this->input->get("company_id") == 0) {

                $payslip = $this->Employees_model->get_employees_payslip_bulanan_lhat($p_date);

                // payment_export_bulanan($p_date);

            } else if ($this->input->get("company_id") != 0) {

                $payslip = $this->Payroll_model->get_comp_template_bulanan_company($this->input->get("company_id"), $p_date);
            } else {

                $payslip = $this->Employees_model->get_employees_payslip_bulanan_lhat($p_date);
            }
        } else {

            $payslip = $this->Payroll_model->get_employee_comp_template_lihat($user_info[0]->company_id, $session['user_id']);
        }

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($payslip->result() as $r) {

            // ====================================================================================================================
            // DATA KARYAWAN
            // ====================================================================================================================
            $month_payment = date("F, Y", strtotime($r->salary_month));
            // Karyawan ID
            $emp_id = $r->employee_id;

            $user_info = $this->Core_model->read_user_info($emp_id);
            $emp_nik   = $user_info[0]->employee_id;
            $full_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;

            // ====================================================================================================================
            // DATA KARYAWAN
            // ====================================================================================================================

            $rekening_name = $r->rekening_name;

            // grade
            $grade_type = $this->Core_model->read_user_jenis_grade($user_info[0]->grade_type);

            if (!is_null($grade_type)) {
                $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                $jenis_grade_warna = $grade_type[0]->warna;
            } else {
                $jenis_grade       = '<span class="badge bg-red"> ? </span>';
                $jenis_grade_warna = '';
            }

            $cek_karyawan_status = $user_info[0]->emp_status;

            if ($cek_karyawan_status != '') {
                $karyawan_status     = $cek_karyawan_status;
            } else {
                $karyawan_status     = '<span class="badge bg-red"> ? </span>';
            }

            // Karyawan Departemen
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '<span class="badge bg-red"> ? </span>';
            }

            // Karyawan Posisi
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '<span class="badge bg-red"> ? </span>';
            }

            // Karyawan Masa kerja
            date_default_timezone_set("Asia/Jakarta");

            $doj = $r->doj;

            $tanggal1 = new DateTime($r->doj);
            $tanggal2 = new DateTime();

            if ($tanggal2->diff($tanggal1)->y == 0) {
                $selisih = $tanggal2->diff($tanggal1)->m . ' bln';
            } else {
                $selisih = $tanggal2->diff($tanggal1)->y . ' thn' . ' ' . $tanggal2->diff($tanggal1)->m . ' bln';
            }

            // Karyawan Status
            $emp_status =  $this->Employees_model->read_employee_contract_information2($r->employee_id);
            if (!is_null($emp_status)) {
                $emp_status_name = $emp_status[0]->name_type;
            } else {
                if ($cek_karyawan_status == 'Tetap') {
                    $emp_status_name = '-';
                } else {
                    $emp_status_name = '<span class="badge bg-red"> ? </span>';
                }
            }

            $jumlah_tambah = $r->basic_salary + $r->overtime_amount + $r->jumlah_tunj_jabatan + $r->jumlah_tunj_produktifitas + $r->jumlah_tunj_transportasi + $r->jumlah_tunj_komunikasi + $r->commissions_amount;

            $jumlah_potong = $r->other_payments_amount + $r->loan_de_amount + $r->bpjs_kes_amount + $r->bpjs_tk_amount + $r->potongan_alpa + $r->potongan_izin + $r->potongan_lain;


            $data[] = array(
                $no,
                $month_payment,
                $emp_nik,
                $full_name,
                $department_name,
                $designation_name,
                $doj,
                $selisih,
                $cek_karyawan_status,
                $emp_status_name,
                $jenis_grade,
                number_format($r->basic_salary, 0, ',', '.'),
                number_format($r->overtime_amount, 0, ',', '.'),
                number_format($r->jumlah_tunj_jabatan, 0, ',', '.'),
                number_format($r->jumlah_tunj_produktifitas, 0, ',', '.'),
                number_format($r->jumlah_tunj_transportasi, 0, ',', '.'),
                number_format($r->jumlah_tunj_komunikasi, 0, ',', '.'),
                number_format($r->commissions_amount, 0, ',', '.'),
                number_format($jumlah_tambah, 0, ',', '.'),
                number_format($r->other_payments_amount, 0, ',', '.'),
                number_format($r->loan_de_amount, 0, ',', '.'),
                number_format($r->bpjs_kes_amount, 0, ',', '.'),
                number_format($r->bpjs_tk_amount, 0, ',', '.'),
                $r->jumlah_alpa,
                number_format($r->potongan_alpa, 0, ',', '.'),
                $r->jumlah_izin,
                number_format($r->potongan_izin, 0, ',', '.'),
                $r->jumlah_libur,
                number_format($r->potongan_libur, 0, ',', '.'),
                number_format($r->potongan_lain, 0, ',', '.'),

                number_format($jumlah_potong, 0, ',', '.'),

                number_format($r->net_salary, 0, ',', '.'),
                $r->rekening_name
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $payslip->num_rows(),
            "recordsFiltered" => $payslip->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function gaji_bulanan_jumlah()
    {
        $company_id = $this->input->get('company_id');
        $bulan_gaji = $this->input->get('month_year');


        $sql = 'SELECT sum(jumlah) as jumlah_karyawan, sum(net_salary) as jumlah_gaji
                            FROM view_salary_month_jumlah WHERE company_id = "' . $company_id . '" AND salary_month = "' . $bulan_gaji . '" ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $bulan_gaji_cek     = $this->Payroll_model->check_bulan_gaji($bulan_gaji);
                $cek_bulan_gaji     = $bulan_gaji_cek[0]->desc;
                $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji_cek[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji_cek[0]->end_date));

                // company
                $company = $this->Company_model->read_company_information($company_id);
                if (!is_null($company)) {
                    $company_name = $company[0]->name;
                } else {
                    $company_name = '--';
                }

                $response['val'][] = array(
                    'company_name'    => $company_name,
                    'bulan_gaji'      => $cek_bulan_gaji,
                    'jumlah_karyawan' => $val->jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }
    public function export_bulanan()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_bulanan", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');
        $month_year   = $this->input->post('month_year');


        $bulan_gaji = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji   = $bulan_gaji[0]->desc;
        $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji[0]->end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);

        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $departemen = $this->Payroll_model->get_comp_template_dept_bulanan_lihat($company_id, $month_year);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        if (count($departemen) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:AA1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:AA2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:AA3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );



            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "DETAIL GAJI BULANAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object
            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:AA5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:AA6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('B5:G5000')->getAlignment()->setWrapText(true);

            $objPHPExcel->getActiveSheet()->getStyle('AA7:AA2560')->getNumberFormat()->setFormatCode('0');

            $objPHPExcel->getActiveSheet()->getStyle('AA7:AA2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            // Kanan
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("I7:I2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("J7:J2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("K7:K2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("L7:L2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("M7:M2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("N7:N2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("O7:O2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("P7:P2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("Q7:Q2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("R7:R2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("S7:S2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("T7:T2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("U7:U2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("V7:V2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("W7:W2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("X7:X2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("Y7:Y2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("Z7:Z2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));


            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('I5:I6');
            $objPHPExcel->getActiveSheet()->getStyle('I5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            $objPHPExcel->getActiveSheet()->mergeCells('J5:O5');

            $objPHPExcel->getActiveSheet()->mergeCells('P5:Y5');

            // $objPHPExcel->getActiveSheet()->mergeCells('X5:X6');
            // $objPHPExcel->getActiveSheet()->getStyle('X5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            // $objPHPExcel->getActiveSheet()->mergeCells('Y5:Y6');
            // $objPHPExcel->getActiveSheet()->getStyle('Y5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('Z5:Z6');
            $objPHPExcel->getActiveSheet()->getStyle('Z5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('AA5:AA6');
            $objPHPExcel->getActiveSheet()->getStyle('AA5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);



            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "AA");

            $val = array("No", "Nama", 'Jabatan', "Status", "Grade", "Tanggal Kerja", "Masa Kerja", "Gaji Pokok", "Penambah", "K", "L", "M", "N", "O", "Pengurang", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Total Gaji", "No Rekening");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("J6", "Lembur");
            $objPHPExcel->getActiveSheet()->getStyle('J6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("K6", "Tj.Jabatan");
            $objPHPExcel->getActiveSheet()->getStyle('K6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("L6", "Tj.Produktifitas");
            $objPHPExcel->getActiveSheet()->getStyle('L6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("M6", "Tj.Transportasi");
            $objPHPExcel->getActiveSheet()->getStyle('M6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("N6", "Tj.Komunikasi");
            $objPHPExcel->getActiveSheet()->getStyle('N6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("O6", "Insentif");
            $objPHPExcel->getActiveSheet()->getStyle('O6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("P6", "Pajak (PPh)");
            $objPHPExcel->getActiveSheet()->getStyle('P6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("Q6", "Pinjaman");
            $objPHPExcel->getActiveSheet()->getStyle('Q6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("R6", "BPJS Kes");
            $objPHPExcel->getActiveSheet()->getStyle('R6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("S6", "BPJS TK");
            $objPHPExcel->getActiveSheet()->getStyle('S6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("T6", "Jumlah Alpa");
            $objPHPExcel->getActiveSheet()->getStyle('T6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("U6", "Potongan Alpa");
            $objPHPExcel->getActiveSheet()->getStyle('U6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("V6", "Jumlah Izin");
            $objPHPExcel->getActiveSheet()->getStyle('V6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("W6", "Potongan Izin");
            $objPHPExcel->getActiveSheet()->getStyle('W6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("X6", "Potongan Libur");
            $objPHPExcel->getActiveSheet()->getStyle('X6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("Y6", "Potongan Lain");
            $objPHPExcel->getActiveSheet()->getStyle('Y6')->applyFromArray($style);


            for ($a = 0; $a < 26; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(45); // Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(45); // Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(10); // Status
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(10); // Grade
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(12); // Tanggal
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(12); // Masa Kerja
                $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(15); // Gaji Pokok
                $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15); // Lembur
                $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(15); // Tj.Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(15); // Tj.Produktifitas
                $objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(15); // Tj.Transportasi
                $objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(15); // Tj.Komunikasi
                $objPHPExcel->getActiveSheet()->getColumnDimension('O')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('P')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('Q')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('R')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('S')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('T')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('U')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('V')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('W')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('X')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('Y')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('Z')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('AA')->setWidth(15); // Insentif

                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $dep = 6;
            $baris = $dep + 1;



            // $da = $baris+1;
            //$mo = $no+$baris;
            foreach ($departemen->result() as $d) {

                $grouping = $this->Employees_model->get_employee_by_department_company_bulanan($d->company_id, $d->department_id, $month_year);
                if (!is_null($grouping)) {
                    $jumlah_karyawan = $grouping[0]->jumlah;
                } else {
                    $jumlah_karyawan = '';
                }

                if ($jumlah_karyawan > 0) {

                    // Karyawan Departemen
                    $department = $this->Department_model->read_department_information($d->department_id);
                    if (!is_null($department)) {
                        $department_name = $department[0]->department_name;
                    } else {
                        $department_name = '';
                    }

                    // $objset->setCellValue("B".$baris, );
                    $objset->setCellValue("B" . ($baris + 1) . "", $department_name . ', Jumlah  : ' . $jumlah_karyawan . ' Karyawan');

                    $objset->getStyle("B" . ($baris + 1) . ":AA" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'B8CCE4')
                                ),

                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                ),

                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                )
                            )
                        );

                    $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":AA" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'B8CCE4')
                                ),
                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )
                            )
                        );


                    $objset->mergeCells("B" . ($baris + 1) . ":AA" . ($baris + 1) . "")
                        ->getStyle("B" . ($baris + 1) . ":AA" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->getStyle("I" . ($jumlah_karyawan + $baris + 2) . ":Z" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getNumberFormat()
                        ->setFormatCode("#,##0")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                                ),

                            )
                        );

                    $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Total ');

                    $objset->setCellValue("I" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(I" . ($baris + 2) . ":I" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("J" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(J" . ($baris + 2) . ":J" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("K" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(K" . ($baris + 2) . ":K" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("L" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(L" . ($baris + 2) . ":L" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("M" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(M" . ($baris + 2) . ":M" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("N" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(N" . ($baris + 2) . ":N" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("O" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(O" . ($baris + 2) . ":O" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("P" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(P" . ($baris + 2) . ":P" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("Q" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(Q" . ($baris + 2) . ":Q" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("R" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(R" . ($baris + 2) . ":R" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("S" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(S" . ($baris + 2) . ":S" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("T" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(T" . ($baris + 2) . ":T" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("U" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(U" . ($baris + 2) . ":U" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("V" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(V" . ($baris + 2) . ":V" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("W" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(W" . ($baris + 2) . ":W" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("X" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(X" . ($baris + 2) . ":X" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("Y" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(Y" . ($baris + 2) . ":Y" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("Z" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(Z" . ($baris + 2) . ":Z" . ($jumlah_karyawan + $baris + 1) . ")");

                    // $objset->setCellValue("B".($jumlah_karyawan+$baris+3)."", '');

                    $payslip = $this->Payroll_model->get_comp_template_bulanan_dep_lihat($d->company_id, 1, $month_year, $d->department_id);

                    $no = 1;
                    $baris =  $baris + 2;
                    foreach ($payslip->result() as $r) {

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        // Karyawan ID
                        $emp_id = $r->employee_id;

                        $user_info = $this->Core_model->read_user_info($emp_id);
                        $emp_nik   = $user_info[0]->employee_id;
                        $full_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        $rekening_name       = $r->rekening_name;

                        $cek_karyawan_status = $user_info[0]->emp_status;

                        if ($cek_karyawan_status != '') {
                            $karyawan_status     = $cek_karyawan_status;
                        } else {
                            $karyawan_status     = '';
                        }



                        // Karyawan Posisi
                        $designation = $this->Designation_model->read_designation_information($r->designation_id);
                        if (!is_null($designation)) {
                            $designation_name = $designation[0]->designation_name;
                        } else {
                            $designation_name = '';
                        }

                        $jabatan = $designation_name;

                        // Karyawan Masa kerja
                        date_default_timezone_set("Asia/Jakarta");

                        $doj = $r->doj;

                        $tanggal1 = new DateTime($r->doj);
                        $tanggal2 = new DateTime();

                        if ($tanggal2->diff($tanggal1)->y == 0) {
                            $selisih = $tanggal2->diff($tanggal1)->m . ' bln';
                        } else {
                            $selisih = $tanggal2->diff($tanggal1)->y . ' thn' . ' ' . $tanggal2->diff($tanggal1)->m . ' bln';
                        }

                        $cek_karyawan_status = $user_info[0]->emp_status;

                        // Karyawan Status
                        $emp_status =  $this->Employees_model->read_employee_contract_information2($r->employee_id);
                        if (!is_null($emp_status)) {
                            $emp_status_name = $emp_status[0]->name_type;
                        } else {
                            if ($cek_karyawan_status == 'Tetap') {
                                $emp_status_name = 'Tetap';
                            } else {
                                $emp_status_name = '';
                            }
                        }

                        // grade
                        $grade_type = $this->Core_model->read_user_jenis_grade($user_info[0]->grade_type);

                        if (!is_null($grade_type)) {
                            $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                            $jenis_grade_warna = $grade_type[0]->warna;
                        } else {
                            $jenis_grade       = '';
                            $jenis_grade_warna = '';
                        }

                        //pemanggilan sesuaikan dengan nama kolom tabel
                        $objset->setCellValue("B" . $baris, $no);                                                                         // No
                        $objset->setCellValue("C" . $baris, $full_name);                                                                 // Nama Karyawan
                        $objset->setCellValue("D" . $baris, $jabatan);                                                         // Jabatan
                        $objset->setCellValue("E" . $baris, $emp_status_name);                                                             // Status
                        $objset->setCellValue("F" . $baris, $jenis_grade);                                                                 // Grade
                        $objset->setCellValue("G" . $baris, date("d-m-Y", strtotime($doj)));                                                                         // Tanggal Mulai Kerja
                        $objset->setCellValue("H" . $baris, $selisih);                                                                     // Masa Kerja
                        $objset->setCellValue("I" . $baris, $r->basic_salary);                         // Gaji Pokok
                        $objset->setCellValue("J" . $baris, $r->overtime_amount);                                                                                 // Gaji Pokok
                        $objset->setCellValue("K" . $baris, $r->jumlah_tunj_jabatan);                                                                                 // Gaji Poko
                        $objset->setCellValue("L" . $baris, $r->jumlah_tunj_produktifitas);                                                                                 // Gaji Poko
                        $objset->setCellValue("M" . $baris, $r->jumlah_tunj_transportasi);                                                                                 // Gaji Poko
                        $objset->setCellValue("N" . $baris, $r->jumlah_tunj_komunikasi);
                        $objset->setCellValue("O" . $baris, $r->commissions_amount);
                        $objset->setCellValue("P" . $baris, $r->other_payments_amount);
                        $objset->setCellValue("Q" . $baris, $r->loan_de_amount);
                        $objset->setCellValue("R" . $baris, $r->bpjs_kes_amount);                                                                                 // Gaji Poko
                        $objset->setCellValue("S" . $baris, $r->bpjs_tk_amount);
                        $objset->setCellValue("T" . $baris, $r->jumlah_alpa);
                        $objset->setCellValue("U" . $baris, $r->potongan_alpa);
                        $objset->setCellValue("V" . $baris, $r->jumlah_izin);
                        $objset->setCellValue("W" . $baris, $r->potongan_izin);
                        $objset->setCellValue("X" . $baris, $r->potongan_libur);
                        $objset->setCellValue("Y" . $baris, $r->potongan_lain);

                        $objset->setCellValue("Z" . $baris, $r->net_salary);

                        $objset->setCellValue("AA" . $baris, "'" . $r->rekening_name);

                        $no++;
                        $baris++;
                    }

                    $dep++;
                }
            }

            $total_emp = $this->Employees_model->get_employee_by_company_bulanan($d->company_id, $month_year);
            if (!is_null($total_emp)) {
                $total_karyawan = $total_emp[0]->jumlah;
            } else {
                $total_karyawan = '';
            }

            $objset->setCellValue("B" . ($jumlah_karyawan + $baris) . "", 'Grand Total ' . $total_karyawan . ' Karyawan');

            $objset->getStyle("B" . ($jumlah_karyawan + $baris) . ":AA" . ($jumlah_karyawan + $baris) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'B8CCE4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($jumlah_karyawan + $baris) . ":H" . ($jumlah_karyawan + $baris) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris) . ":H" . ($jumlah_karyawan + $baris) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->getStyle("I" . ($jumlah_karyawan + $baris) . ":Z" . ($jumlah_karyawan + $baris) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );

            $grand_total = $this->Payroll_model->get_comp_template_bulanan_lihat($d->company_id, 1, $month_year);

            foreach ($grand_total->result() as $g) {
                $objset->setCellValue("I" . ($jumlah_karyawan + $baris) . "", $g->ga_pok);
                $objset->setCellValue("J" . ($jumlah_karyawan + $baris) . "", $g->lembur);
                $objset->setCellValue("K" . ($jumlah_karyawan + $baris) . "", $g->tj_jabatan);
                $objset->setCellValue("L" . ($jumlah_karyawan + $baris) . "", $g->tj_produktifitas);
                $objset->setCellValue("M" . ($jumlah_karyawan + $baris) . "", $g->tj_transportasi);
                $objset->setCellValue("N" . ($jumlah_karyawan + $baris) . "", $g->tj_komunikasi);
                $objset->setCellValue("O" . ($jumlah_karyawan + $baris) . "", $g->insentif);
                $objset->setCellValue("P" . ($jumlah_karyawan + $baris) . "", $g->pph);
                $objset->setCellValue("Q" . ($jumlah_karyawan + $baris) . "", $g->pinjaman);
                $objset->setCellValue("R" . ($jumlah_karyawan + $baris) . "", $g->bpjs_kes);
                $objset->setCellValue("S" . ($jumlah_karyawan + $baris) . "", $g->bpjs_tk);
                $objset->setCellValue("T" . ($jumlah_karyawan + $baris) . "", $g->jum_alpa);
                $objset->setCellValue("U" . ($jumlah_karyawan + $baris) . "", $g->potongan_alpa);
                $objset->setCellValue("V" . ($jumlah_karyawan + $baris) . "", $g->jum_izin);
                $objset->setCellValue("W" . ($jumlah_karyawan + $baris) . "", $g->potongan_izin);
                $objset->setCellValue("X" . ($jumlah_karyawan + $baris) . "", $g->potongan_libur);
                $objset->setCellValue("Y" . ($jumlah_karyawan + $baris) . "", $g->potongan_lain);
                $objset->setCellValue("Z" . ($jumlah_karyawan + $baris) . "", $g->net_salary);
            }
            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Detail Gaji Bulanan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Detail Gaji Bulanan ' . $company_name . ' - ' . $cek_bulan_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    public function export_bulanan_old()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_bulanan", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');
        $month_year   = $this->input->post('month_year');


        $bulan_gaji = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji   = $bulan_gaji[0]->desc;
        $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji[0]->end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);

        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $departemen = $this->Payroll_model->get_comp_template_dept_bulanan_lihat($company_id, $month_year);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        if (count($departemen) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:Y1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:Y2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:Y3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );



            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "DETAIL GAJI BULANAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object
            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object



            $objPHPExcel->getActiveSheet()->getStyle("B5:Y5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );




            $objPHPExcel->getActiveSheet()->getStyle("B6:Y6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('B5:Y5000')->getAlignment()->setWrapText(true);

            // Kanan

            $objPHPExcel->setActiveSheetIndex(0)->getStyle("I7:I2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("J7:J2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("K7:K2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("L7:L2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("M7:M2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("N7:N2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("O7:O2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("P7:P2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("Q7:Q2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("R7:R2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("S7:S2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("T7:T2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("U7:U2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("V7:V2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("W7:W2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("X7:X2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));

            $objPHPExcel->getActiveSheet()->getStyle('Y7:Y2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('I5:I6');
            $objPHPExcel->getActiveSheet()->getStyle('I5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            $objPHPExcel->getActiveSheet()->mergeCells('J5:O5');

            $objPHPExcel->getActiveSheet()->mergeCells('P5:W5');

            $objPHPExcel->getActiveSheet()->mergeCells('X5:X6');
            $objPHPExcel->getActiveSheet()->getStyle('X5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('Y5:Y6');
            $objPHPExcel->getActiveSheet()->getStyle('Y5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y");

            $val = array("No", "Nama", 'Jabatan', "Status", "Grade", "Tanggal Kerja", "Masa Kerja", "Gaji Pokok", "Penambah", "K", "L", "M", "N", "O", "Pengurang", "Q", "R", "S", "T", "U", "V", "W", "Total Gaji", "No Rekening");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("J6", "Lembur");
            $objPHPExcel->getActiveSheet()->getStyle('J6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("K6", "Tj.Jabatan");
            $objPHPExcel->getActiveSheet()->getStyle('K6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("L6", "Tj.Produktifitas");
            $objPHPExcel->getActiveSheet()->getStyle('L6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("M6", "Tj.Transportasi");
            $objPHPExcel->getActiveSheet()->getStyle('M6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("N6", "Tj.Komunikasi");
            $objPHPExcel->getActiveSheet()->getStyle('N6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("O6", "Insentif");
            $objPHPExcel->getActiveSheet()->getStyle('O6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("P6", "Pajak (PPh)");
            $objPHPExcel->getActiveSheet()->getStyle('P6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("Q6", "Pinjaman");
            $objPHPExcel->getActiveSheet()->getStyle('Q6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("R6", "BPJS Kes");
            $objPHPExcel->getActiveSheet()->getStyle('R6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("S6", "BPJS TK");
            $objPHPExcel->getActiveSheet()->getStyle('S6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("T6", "Jumlah Alpa");
            $objPHPExcel->getActiveSheet()->getStyle('T6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("U6", "Potongan Alpa");
            $objPHPExcel->getActiveSheet()->getStyle('U6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("V6", "Jumlah Izin");
            $objPHPExcel->getActiveSheet()->getStyle('V6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("W6", "Potongan Izin");
            $objPHPExcel->getActiveSheet()->getStyle('W6')->applyFromArray($style);


            for ($a = 0; $a < 24; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(45); // Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(35); // Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(10); // Status
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(10); // Grade
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(12); // Tanggal
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(12); // Masa Kerja
                $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(15); // Gaji Pokok
                $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15); // Lembur
                $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(15); // Tj.Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(15); // Tj.Produktifitas
                $objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(15); // Tj.Transportasi
                $objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(15); // Tj.Komunikasi
                $objPHPExcel->getActiveSheet()->getColumnDimension('O')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('P')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('Q')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('R')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('S')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('T')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('U')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('V')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('W')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('X')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('Y')->setWidth(15); // Insentif


                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $dep = 6;
            $baris = $dep + 1;



            // $da = $baris+1;
            //$mo = $no+$baris;
            foreach ($departemen->result() as $d) {

                $grouping = $this->Employees_model->get_employee_by_department_company_bulanan($d->company_id, $d->department_id, $month_year);
                if (!is_null($grouping)) {
                    $jumlah_karyawan = $grouping[0]->jumlah;
                } else {
                    $jumlah_karyawan = '';
                }

                if ($jumlah_karyawan > 0) {

                    // Karyawan Departemen
                    $department = $this->Department_model->read_department_information($d->department_id);
                    if (!is_null($department)) {
                        $department_name = $department[0]->department_name;
                    } else {
                        $department_name = '';
                    }

                    // $objset->setCellValue("B".$baris, );
                    $objset->setCellValue("B" . ($baris + 1) . "", $department_name . ', Jumlah  : ' . $jumlah_karyawan . ' Karyawan');

                    $objset->getStyle("B" . ($baris + 1) . ":Y" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'B8CCE4')
                                ),

                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                ),

                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                )
                            )
                        );

                    $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":Y" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'B8CCE4')
                                ),
                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )
                            )
                        );


                    $objset->mergeCells("B" . ($baris + 1) . ":Y" . ($baris + 1) . "")
                        ->getStyle("B" . ($baris + 1) . ":Y" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->getStyle("I" . ($jumlah_karyawan + $baris + 2) . ":X" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getNumberFormat()
                        ->setFormatCode("#,##0")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                                ),

                            )
                        );

                    $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Total ');

                    $objset->setCellValue("I" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(I" . ($baris + 2) . ":I" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("J" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(J" . ($baris + 2) . ":J" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("K" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(K" . ($baris + 2) . ":K" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("L" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(L" . ($baris + 2) . ":L" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("M" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(M" . ($baris + 2) . ":M" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("N" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(N" . ($baris + 2) . ":N" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("O" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(O" . ($baris + 2) . ":O" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("P" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(P" . ($baris + 2) . ":P" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("Q" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(Q" . ($baris + 2) . ":Q" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("R" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(R" . ($baris + 2) . ":R" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("S" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(S" . ($baris + 2) . ":S" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("T" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(T" . ($baris + 2) . ":T" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("U" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(U" . ($baris + 2) . ":U" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("V" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(V" . ($baris + 2) . ":V" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("W" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(W" . ($baris + 2) . ":W" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("X" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(X" . ($baris + 2) . ":X" . ($jumlah_karyawan + $baris + 1) . ")");

                    // $objset->setCellValue("B".($jumlah_karyawan+$baris+3)."", '');

                    $payslip = $this->Payroll_model->get_comp_template_bulanan_dep_lihat($d->company_id, 1, $month_year, $d->department_id);

                    $no = 1;
                    $baris =  $baris + 2;
                    foreach ($payslip->result() as $r) {

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        // Karyawan ID
                        $emp_id = $r->employee_id;

                        $user_info = $this->Core_model->read_user_info($emp_id);
                        $emp_nik   = $user_info[0]->employee_id;
                        $full_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        $rekening_name       = $r->rekening_name;

                        $cek_karyawan_status = $user_info[0]->emp_status;

                        if ($cek_karyawan_status != '') {
                            $karyawan_status     = $cek_karyawan_status;
                        } else {
                            $karyawan_status     = '';
                        }



                        // Karyawan Posisi
                        $designation = $this->Designation_model->read_designation_information($r->designation_id);
                        if (!is_null($designation)) {
                            $designation_name = $designation[0]->designation_name;
                        } else {
                            $designation_name = '';
                        }

                        $jabatan = $designation_name;

                        // Karyawan Masa kerja
                        date_default_timezone_set("Asia/Jakarta");

                        $doj = $r->doj;

                        $tanggal1 = new DateTime($r->doj);
                        $tanggal2 = new DateTime();

                        if ($tanggal2->diff($tanggal1)->y == 0) {
                            $selisih = $tanggal2->diff($tanggal1)->m . ' bln';
                        } else {
                            $selisih = $tanggal2->diff($tanggal1)->y . ' thn' . ' ' . $tanggal2->diff($tanggal1)->m . ' bln';
                        }

                        $cek_karyawan_status = $user_info[0]->emp_status;

                        // Karyawan Status
                        $emp_status =  $this->Employees_model->read_employee_contract_information2($r->employee_id);
                        if (!is_null($emp_status)) {
                            $emp_status_name = $emp_status[0]->name_type;
                        } else {
                            if ($cek_karyawan_status == 'Tetap') {
                                $emp_status_name = 'Tetap';
                            } else {
                                $emp_status_name = '';
                            }
                        }

                        // grade
                        $grade_type = $this->Core_model->read_user_jenis_grade($user_info[0]->grade_type);

                        if (!is_null($grade_type)) {
                            $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                            $jenis_grade_warna = $grade_type[0]->warna;
                        } else {
                            $jenis_grade       = '';
                            $jenis_grade_warna = '';
                        }


                        //pemanggilan sesuaikan dengan nama kolom tabel
                        $objset->setCellValue("B" . $baris, $no);                                                                         // No
                        $objset->setCellValue("C" . $baris, $full_name);                                                                 // Nama Karyawan
                        $objset->setCellValue("D" . $baris, $jabatan);                                                         // Jabatan
                        $objset->setCellValue("E" . $baris, $emp_status_name);                                                             // Status
                        $objset->setCellValue("F" . $baris, $jenis_grade);                                                                 // Grade
                        $objset->setCellValue("G" . $baris, $doj);                                                                         // Tanggal Mulai Kerja
                        $objset->setCellValue("H" . $baris, $selisih);                                                                     // Masa Kerja
                        $objset->setCellValue("I" . $baris, $r->basic_salary);                         // Gaji Pokok
                        $objset->setCellValue("J" . $baris, $r->overtime_amount);                                                                                 // Gaji Pokok
                        $objset->setCellValue("K" . $baris, $r->jumlah_tunj_jabatan);                                                                                 // Gaji Poko
                        $objset->setCellValue("L" . $baris, $r->jumlah_tunj_produktifitas);                                                                                 // Gaji Poko
                        $objset->setCellValue("M" . $baris, $r->jumlah_tunj_transportasi);                                                                                 // Gaji Poko
                        $objset->setCellValue("N" . $baris, $r->jumlah_tunj_komunikasi);
                        $objset->setCellValue("O" . $baris, $r->commissions_amount);
                        $objset->setCellValue("P" . $baris, $r->other_payments_amount);
                        $objset->setCellValue("Q" . $baris, $r->loan_de_amount);
                        $objset->setCellValue("R" . $baris, $r->bpjs_kes_amount);                                                                                 // Gaji Poko
                        $objset->setCellValue("S" . $baris, $r->bpjs_tk_amount);
                        $objset->setCellValue("T" . $baris, $r->jumlah_alpa);
                        $objset->setCellValue("U" . $baris, $r->potongan_alpa);
                        $objset->setCellValue("V" . $baris, $r->jumlah_izin);
                        $objset->setCellValue("W" . $baris, $r->potongan_izin);
                        $objset->setCellValue("X" . $baris, $r->net_salary);

                        $objset->setCellValue("Y" . $baris, $r->rekening_name);

                        $no++;
                        $baris++;
                    }

                    $dep++;
                }
            }

            $total_emp = $this->Employees_model->get_employee_by_company_bulanan($d->company_id, $month_year);
            if (!is_null($total_emp)) {
                $total_karyawan = $total_emp[0]->jumlah;
            } else {
                $total_karyawan = '';
            }

            $objset->setCellValue("B" . ($jumlah_karyawan + $baris) . "", 'Grand Total ' . $total_karyawan . ' Karyawan');

            $objset->getStyle("B" . ($jumlah_karyawan + $baris) . ":Y" . ($jumlah_karyawan + $baris) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'B8CCE4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($jumlah_karyawan + $baris) . ":H" . ($jumlah_karyawan + $baris) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris) . ":H" . ($jumlah_karyawan + $baris) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->getStyle("I" . ($jumlah_karyawan + $baris) . ":X" . ($jumlah_karyawan + $baris) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );

            $grand_total = $this->Payroll_model->get_comp_template_bulanan_lihat($d->company_id, 1, $month_year);

            foreach ($grand_total->result() as $g) {
                $objset->setCellValue("I" . ($jumlah_karyawan + $baris) . "", $g->ga_pok);
                $objset->setCellValue("J" . ($jumlah_karyawan + $baris) . "", $g->lembur);
                $objset->setCellValue("K" . ($jumlah_karyawan + $baris) . "", $g->tj_jabatan);
                $objset->setCellValue("L" . ($jumlah_karyawan + $baris) . "", $g->tj_produktifitas);
                $objset->setCellValue("M" . ($jumlah_karyawan + $baris) . "", $g->tj_transportasi);
                $objset->setCellValue("N" . ($jumlah_karyawan + $baris) . "", $g->tj_komunikasi);
                $objset->setCellValue("O" . ($jumlah_karyawan + $baris) . "", $g->insentif);
                $objset->setCellValue("P" . ($jumlah_karyawan + $baris) . "", $g->pph);
                $objset->setCellValue("Q" . ($jumlah_karyawan + $baris) . "", $g->pinjaman);
                $objset->setCellValue("R" . ($jumlah_karyawan + $baris) . "", $g->bpjs_kes);
                $objset->setCellValue("S" . ($jumlah_karyawan + $baris) . "", $g->bpjs_tk);
                $objset->setCellValue("T" . ($jumlah_karyawan + $baris) . "", $g->jum_alpa);
                $objset->setCellValue("U" . ($jumlah_karyawan + $baris) . "", $g->potongan_alpa);
                $objset->setCellValue("V" . ($jumlah_karyawan + $baris) . "", $g->jum_izin);
                $objset->setCellValue("W" . ($jumlah_karyawan + $baris) . "", $g->potongan_izin);
                $objset->setCellValue("X" . ($jumlah_karyawan + $baris) . "", $g->net_salary);
            }
            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Detail Gaji Bulanan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Detail Gaji Bulanan ' . $company_name . ' - ' . $cek_bulan_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    public function export_slip()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_bulanan", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');
        $month_year   = $this->input->post('month_year');


        $bulan_gaji         = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji     = $bulan_gaji[0]->desc;
        $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji[0]->end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);
        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $departemen = $this->Payroll_model->get_comp_template_dept_bulanan_slip($company_id);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        if (count($departemen) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:Y1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:Y2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:Y3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );



            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "REKAP GAJI BULANAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object
            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object



            $objPHPExcel->getActiveSheet()->getStyle("B5:Y5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );




            $objPHPExcel->getActiveSheet()->getStyle("B6:Y6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('B5:Y5000')->getAlignment()->setWrapText(true);

            // Kanan

            $objPHPExcel->setActiveSheetIndex(0)->getStyle("I7:I2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("J7:J2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("K7:K2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("L7:L2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("M7:M2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("N7:N2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("O7:O2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("P7:P2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("Q7:Q2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("R7:R2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("S7:S2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("T7:T2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("U7:U2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("V7:V2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("W7:W2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("X7:X2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));

            $objPHPExcel->getActiveSheet()->getStyle('Y7:Y2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('I5:I6');
            $objPHPExcel->getActiveSheet()->getStyle('I5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            $objPHPExcel->getActiveSheet()->mergeCells('J5:O5');

            $objPHPExcel->getActiveSheet()->mergeCells('P5:W5');

            $objPHPExcel->getActiveSheet()->mergeCells('X5:X6');
            $objPHPExcel->getActiveSheet()->getStyle('X5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('Y5:Y6');
            $objPHPExcel->getActiveSheet()->getStyle('Y5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y");

            $val = array("No", "Nama", 'Jabatan', "Status", "Grade", "Tanggal Kerja", "Masa Kerja", "Gaji Pokok", "Penambah", "K", "L", "M", "N", "O", "Pengurang", "Q", "R", "S", "T", "U", "V", "W", "Total Gaji", "No Rekening");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );



            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("J6", "Lembur");
            $objPHPExcel->getActiveSheet()->getStyle('J6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("K6", "Tj.Jabatan");
            $objPHPExcel->getActiveSheet()->getStyle('K6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("L6", "Tj.Produktifitas");
            $objPHPExcel->getActiveSheet()->getStyle('L6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("M6", "Tj.Transportasi");
            $objPHPExcel->getActiveSheet()->getStyle('M6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("N6", "Tj.Komunikasi");
            $objPHPExcel->getActiveSheet()->getStyle('N6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("O6", "Insentif");
            $objPHPExcel->getActiveSheet()->getStyle('O6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("P6", "Pajak (PPh)");
            $objPHPExcel->getActiveSheet()->getStyle('P6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("Q6", "Pinjaman");
            $objPHPExcel->getActiveSheet()->getStyle('Q6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("R6", "BPJS Kes");
            $objPHPExcel->getActiveSheet()->getStyle('R6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("S6", "BPJS TK");
            $objPHPExcel->getActiveSheet()->getStyle('S6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("T6", "Jumlah Alpa");
            $objPHPExcel->getActiveSheet()->getStyle('T6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("U6", "Potongan Alpa");
            $objPHPExcel->getActiveSheet()->getStyle('U6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("V6", "Jumlah Izin");
            $objPHPExcel->getActiveSheet()->getStyle('V6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("W6", "Potongan Izin");
            $objPHPExcel->getActiveSheet()->getStyle('W6')->applyFromArray($style);


            for ($a = 0; $a < 24; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(45); // Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(35); // Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(10); // Status
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(10); // Grade
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(12); // Tanggal
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(12); // Masa Kerja
                $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(15); // Gaji Pokok
                $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15); // Lembur
                $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(15); // Tj.Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(15); // Tj.Produktifitas
                $objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(15); // Tj.Transportasi
                $objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(15); // Tj.Komunikasi
                $objPHPExcel->getActiveSheet()->getColumnDimension('O')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('P')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('Q')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('R')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('S')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('T')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('U')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('V')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('W')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('X')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('Y')->setWidth(15); // Insentif


                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $dep = 6;
            $baris = $dep + 1;



            // $da = $baris+1;
            //$mo = $no+$baris;
            foreach ($departemen->result() as $d) {

                $grouping = $this->Employees_model->get_employee_by_department_company($d->company_id, $d->department_id);
                if (!is_null($grouping)) {
                    $jumlah_karyawan = $grouping[0]->jumlah;
                } else {
                    $jumlah_karyawan = '';
                }

                // $objset->setCellValue("B".$baris, );
                $objset->setCellValue("B" . ($baris + 1) . "", $d->department_name . ', Jumlah  : ' . $jumlah_karyawan . ' Karyawan');

                $objset->getStyle("B" . ($baris + 1) . ":Y" . ($baris + 1) . "")
                    ->applyFromArray(
                        array(
                            'fill' => array(
                                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                'color' => array('rgb' => 'B8CCE4')
                            ),

                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            ),

                            'borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            )
                        )
                    );

                $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":Y" . ($jumlah_karyawan + $baris + 2) . "")
                    ->applyFromArray(
                        array(
                            'fill' => array(
                                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                'color' => array('rgb' => 'B8CCE4')
                            ),
                            'borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )
                        )
                    );


                $objset->mergeCells("B" . ($baris + 1) . ":Y" . ($baris + 1) . "")
                    ->getStyle("B" . ($baris + 1) . ":Y" . ($baris + 1) . "")
                    ->applyFromArray(
                        array(

                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )

                        )
                    );

                $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                    ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                    ->applyFromArray(
                        array(

                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )

                        )
                    );

                $objset->getStyle("I" . ($jumlah_karyawan + $baris + 2) . ":X" . ($jumlah_karyawan + $baris + 2) . "")
                    ->getNumberFormat()
                    ->setFormatCode("#,##0")
                    ->applyFromArray(
                        array(

                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                            ),

                        )
                    );

                $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Total ');

                $objset->setCellValue("I" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(I" . ($baris + 2) . ":I" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("J" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(J" . ($baris + 2) . ":J" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("K" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(K" . ($baris + 2) . ":K" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("L" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(L" . ($baris + 2) . ":L" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("M" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(M" . ($baris + 2) . ":M" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("N" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(N" . ($baris + 2) . ":N" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("O" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(O" . ($baris + 2) . ":O" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("P" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(P" . ($baris + 2) . ":P" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("Q" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(Q" . ($baris + 2) . ":Q" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("R" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(R" . ($baris + 2) . ":R" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("S" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(S" . ($baris + 2) . ":S" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("T" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(T" . ($baris + 2) . ":T" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("U" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(U" . ($baris + 2) . ":U" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("V" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(V" . ($baris + 2) . ":V" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("W" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(W" . ($baris + 2) . ":W" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("X" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(X" . ($baris + 2) . ":X" . ($jumlah_karyawan + $baris + 1) . ")");

                // $objset->setCellValue("B".($jumlah_karyawan+$baris+3)."", '');

                $payslip = $this->Payroll_model->get_comp_template_bulanan_dep_lihat($d->company_id, 1, $month_year, $d->department_id);

                $no = 1;
                $baris =  $baris + 2;
                foreach ($payslip->result() as $r) {

                    // ====================================================================================================================
                    // DATA KARYAWAN
                    // ====================================================================================================================

                    // Karyawan ID
                    $emp_id = $r->employee_id;

                    $user_info = $this->Core_model->read_user_info($emp_id);
                    $emp_nik   = $user_info[0]->employee_id;
                    $full_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;

                    // ====================================================================================================================
                    // DATA KARYAWAN
                    // ====================================================================================================================
                    // $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
                    //       		if(!is_null($rekening)){
                    // 	$rekening_name = $rekening[0]->account_number;
                    // } else {
                    // 	$rekening_name = '';
                    // }

                    $rekening_name = $r->rekening_name;

                    $cek_karyawan_status = $user_info[0]->emp_status;

                    if ($cek_karyawan_status != '') {
                        $karyawan_status     = $cek_karyawan_status;
                    } else {
                        $karyawan_status     = '';
                    }

                    // Karyawan Departemen
                    $department = $this->Department_model->read_department_information($r->department_id);
                    if (!is_null($department)) {
                        $department_name = $department[0]->department_name;
                    } else {
                        $department_name = '';
                    }

                    // Karyawan Posisi
                    $designation = $this->Designation_model->read_designation_information($r->designation_id);
                    if (!is_null($designation)) {
                        $designation_name = $designation[0]->designation_name;
                    } else {
                        $designation_name = '';
                    }

                    $jabatan = $designation_name;

                    // Karyawan Masa kerja
                    date_default_timezone_set("Asia/Jakarta");

                    $doj = $r->doj;

                    $tanggal1 = new DateTime($r->doj);
                    $tanggal2 = new DateTime();

                    if ($tanggal2->diff($tanggal1)->y == 0) {
                        $selisih = $tanggal2->diff($tanggal1)->m . ' bln';
                    } else {
                        $selisih = $tanggal2->diff($tanggal1)->y . ' thn' . ' ' . $tanggal2->diff($tanggal1)->m . ' bln';
                    }

                    // Karyawan Status
                    $emp_status =  $this->Employees_model->read_employee_contract_information2($r->employee_id);
                    if (!is_null($emp_status)) {
                        $emp_status_name = $emp_status[0]->name_type;
                    } else {
                        $emp_status_name = '';
                    }

                    // grade
                    $grade_type = $this->Core_model->read_user_jenis_grade($user_info[0]->grade_type);

                    if (!is_null($grade_type)) {
                        $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                        $jenis_grade_warna = $grade_type[0]->warna;
                    } else {
                        $jenis_grade       = '';
                        $jenis_grade_warna = '';
                    }


                    //pemanggilan sesuaikan dengan nama kolom tabel
                    $objset->setCellValue("B" . $baris, $no);                                                                         // No
                    $objset->setCellValue("C" . $baris, $full_name);                                                                 // Nama Karyawan
                    $objset->setCellValue("D" . $baris, $jabatan);                                                         // Jabatan
                    $objset->setCellValue("E" . $baris, $emp_status_name);                                                             // Status
                    $objset->setCellValue("F" . $baris, $jenis_grade);                                                                 // Grade
                    $objset->setCellValue("G" . $baris, $doj);                                                                         // Tanggal Mulai Kerja
                    $objset->setCellValue("H" . $baris, $selisih);                                                                     // Masa Kerja
                    $objset->setCellValue("I" . $baris, $r->basic_salary);                         // Gaji Pokok
                    $objset->setCellValue("J" . $baris, $r->overtime_amount);                                                                                 // Gaji Pokok
                    $objset->setCellValue("K" . $baris, $r->jumlah_tunj_jabatan);                                                                                 // Gaji Poko
                    $objset->setCellValue("L" . $baris, $r->jumlah_tunj_produktifitas);                                                                                 // Gaji Poko
                    $objset->setCellValue("M" . $baris, $r->jumlah_tunj_transportasi);                                                                                 // Gaji Poko
                    $objset->setCellValue("N" . $baris, $r->jumlah_tunj_komunikasi);
                    $objset->setCellValue("O" . $baris, $r->commissions_amount);
                    $objset->setCellValue("P" . $baris, $r->other_payments_amount);
                    $objset->setCellValue("Q" . $baris, $r->loan_de_amount);
                    $objset->setCellValue("R" . $baris, $r->bpjs_kes_amount);                                                                                 // Gaji Poko
                    $objset->setCellValue("S" . $baris, $r->bpjs_tk_amount);
                    $objset->setCellValue("T" . $baris, $r->jumlah_alpa);
                    $objset->setCellValue("U" . $baris, $r->potongan_alpa);
                    $objset->setCellValue("V" . $baris, $r->jumlah_izin);
                    $objset->setCellValue("W" . $baris, $r->potongan_izin);
                    $objset->setCellValue("X" . $baris, $r->net_salary);

                    $objset->setCellValue("Y" . $baris, $r->rekening_name);

                    $no++;
                    $baris++;
                }

                $dep++;
            }

            $total_emp = $this->Employees_model->get_employee_by_company($d->company_id);
            if (!is_null($grouping)) {
                $total_karyawan = $total_emp[0]->jumlah;
            } else {
                $total_karyawan = '';
            }

            $objset->setCellValue("B" . ($jumlah_karyawan + $baris) . "", 'Grand Total ' . $total_karyawan . ' Karyawan');

            $objset->getStyle("B" . ($jumlah_karyawan + $baris) . ":Y" . ($jumlah_karyawan + $baris) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'B8CCE4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );


            $objset->mergeCells("B" . ($jumlah_karyawan + $baris) . ":H" . ($jumlah_karyawan + $baris) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris) . ":H" . ($jumlah_karyawan + $baris) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->getStyle("I" . ($jumlah_karyawan + $baris) . ":X" . ($jumlah_karyawan + $baris) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );

            $grand_total = $this->Payroll_model->get_comp_template_bulanan_lihat($d->company_id, 1, $month_year);

            foreach ($grand_total->result() as $g) {
                $objset->setCellValue("I" . ($jumlah_karyawan + $baris) . "", $g->ga_pok);
                $objset->setCellValue("J" . ($jumlah_karyawan + $baris) . "", $g->lembur);
                $objset->setCellValue("K" . ($jumlah_karyawan + $baris) . "", $g->tj_jabatan);
                $objset->setCellValue("L" . ($jumlah_karyawan + $baris) . "", $g->tj_produktifitas);
                $objset->setCellValue("M" . ($jumlah_karyawan + $baris) . "", $g->tj_transportasi);
                $objset->setCellValue("N" . ($jumlah_karyawan + $baris) . "", $g->tj_komunikasi);
                $objset->setCellValue("O" . ($jumlah_karyawan + $baris) . "", $g->insentif);
                $objset->setCellValue("P" . ($jumlah_karyawan + $baris) . "", $g->pph);
                $objset->setCellValue("Q" . ($jumlah_karyawan + $baris) . "", $g->pinjaman);
                $objset->setCellValue("R" . ($jumlah_karyawan + $baris) . "", $g->bpjs_kes);
                $objset->setCellValue("S" . ($jumlah_karyawan + $baris) . "", $g->bpjs_tk);
                $objset->setCellValue("T" . ($jumlah_karyawan + $baris) . "", $g->jum_alpa);
                $objset->setCellValue("U" . ($jumlah_karyawan + $baris) . "", $g->potongan_alpa);
                $objset->setCellValue("V" . ($jumlah_karyawan + $baris) . "", $g->jum_izin);
                $objset->setCellValue("W" . ($jumlah_karyawan + $baris) . "", $g->potongan_izin);
                $objset->setCellValue("X" . ($jumlah_karyawan + $baris) . "", $g->net_salary);
            }
            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Daftar Gaji Bulanan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Detail Gaji Bulanan ' . $company_name . ' - ' . $cek_bulan_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ========================================================================
    // 13.6.3 REKAP
    // ========================================================================

    public function payslip_bulanan()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Rekap Gaji Bulanan | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['desc']          = 'LAPORAN : Rekap Gaji Bulanan';
        $data['breadcrumbs']   = 'Rekap Gaji Bulanan';
        $data['path_url']      = 'reports_payslip_bulanan';

        $data['all_companies'] = $this->Company_model->get_company();
        $data['all_bulan_gaji']    = $this->Core_model->all_bulan_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1363', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/payslip_bulanan", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function slip_gaji_bulanan_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/payslip_bulanan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $no                 = 1;
        $data               = array();
        $p_date             = $this->input->get("month_year");
        $system             = $this->Core_model->read_setting_info(1);
        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);
        $history            = $this->Payroll_model->get_company_payslip_history_month($this->input->get("company_id"), $this->input->get("month_year"));

        foreach ($history->result() as $r) {
            $user = $this->Core_model->read_user_info($r->employee_id);
            if (!is_null($user)) {

                $full_name  = $user[0]->first_name . ' ' . $user[0]->last_name;
                $emp_link   = $user[0]->employee_id;

                $bulan_gaji_cek = $this->Payroll_model->check_bulan_gaji($r->salary_month);
                $month_payment  = $bulan_gaji_cek[0]->desc;
                $p_amount       = $r->net_salary;

                // get date > created at > and format
                $created_at = $this->Core_model->set_date_format($r->created_at);
                // get designation
                $designation = $this->Designation_model->read_designation_information($r->designation_id);
                if (!is_null($designation)) {
                    $designation_name = $designation[0]->designation_name;
                } else {
                    $designation_name = '--';
                }

                // department
                $department = $this->Department_model->read_department_information($r->department_id);
                if (!is_null($department)) {
                    $department_name = $department[0]->department_name;
                } else {
                    $department_name = '--';
                }

                $department_designation = $designation_name . ' (' . $department_name . ')';

                // get company
                $company = $this->Core_model->read_company_info($r->company_id);
                if (!is_null($company)) {
                    $comp_name = $company[0]->name;
                } else {
                    $comp_name = '--';
                }

                // bank account
                if ($r->payment_type == 1) {
                    $bayar          = 'Transfer Bank';
                    $bank_name      = $r->bank_name ?: '--';
                    $account_number = $r->rekening_name ?: '--';
                } else if ($r->payment_type == 2) {
                    $bayar          = 'Tunai';
                    $bank_name      = '--';
                    $account_number = '--';
                }

                $ifull_name = nl2br($full_name . "\r\n <small class='text-muted'><i>" . $this->lang->line('xin_employees_id') . ': ' . $emp_link . "<i></i></i></small>\r\n <small class='text-muted'><i>" . $department_designation . '<i></i></i></small>');

                $data[] = array(
                    $no,
                    $month_payment,
                    $full_name,
                    $comp_name,
                    $department_name,
                    $designation_name,
                    number_format($p_amount, 0, ',', '.'),
                    $bayar,
                    $account_number,
                    $bank_name
                );
                $no++;
            }
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );

        return json_response($output);
    }

    public function resume_bulanan_rekap_jumlah()
    {
        $bulan_gaji = $this->input->get('month_year');
        $comp_gaji    = $this->input->get("company_id");

        $sql = 'SELECT sum(jumlah) as jumlah_karyawan, sum(net_salary) as jumlah_gaji
                            FROM view_salary_month_jumlah WHERE company_id = "' . $comp_gaji . '" AND salary_month = "' . $bulan_gaji . '" ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $bulan_gaji_cek     = $this->Payroll_model->check_bulan_gaji($bulan_gaji);
                $cek_bulan_gaji     = $bulan_gaji_cek[0]->desc;
                $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji_cek[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji_cek[0]->end_date));

                $response['val'][] = array(
                    'bulan_gaji'      => $cek_bulan_gaji,
                    'jumlah_karyawan' => $val->jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    public function export_bulanan_rekap()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/payslip_bulanan", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');
        $month_year   = $this->input->post('month_year');


        $bulan_gaji = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji   = $bulan_gaji[0]->desc;
        $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji[0]->end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);

        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $departemen = $this->Payroll_model->get_comp_template_dept_bulanan_lihat($company_id, $month_year);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        if (count($departemen) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:H1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:H2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:H3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );



            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "REKAP GAJI BULANAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object
            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:H5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:H6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            // $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);


            $objPHPExcel->getActiveSheet()->getStyle('B5:H5000')->getAlignment()->setWrapText(true);

            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getNumberFormat()->setFormatCode('0');
            // Kanan

            $objPHPExcel->getActiveSheet()->getStyle("E7:E2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            // $objPHPExcel->setActiveSheetIndex(0)->getStyle("F7:F2560")->getNumberFormat()->setFormatCode()->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT)));
            // $objPHPExcel->getActiveSheet()->getStyle("F7:F2560")->getNumberFormat()->setFormatCode()->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER)));

            // $objPHPExcel->getActiveSheet()->getStyle("F7:F2560")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            //table header
            $cols = array("A", "B", "C", "D", "E", "F", "G", "H");

            $val = array("", "No", "Nama", 'Jabatan', "Total Gaji", "Pembayaran", "No Rekening", "Bank");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );


            for ($a = 0; $a < 8; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(45); // Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(55); // Jabatan

                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20); // Total Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20); // No.Rekening
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20); // No.Rekening
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20); // No.Rekening

                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $dep = 6;
            $baris = $dep + 1;



            // $da = $baris+1;
            //$mo = $no+$baris;
            foreach ($departemen->result() as $d) {

                $grouping = $this->Employees_model->get_employee_by_department_company_bulanan($d->company_id, $d->department_id, $month_year);
                if (!is_null($grouping)) {
                    $jumlah_karyawan = $grouping[0]->jumlah;
                } else {
                    $jumlah_karyawan = '';
                }

                if ($jumlah_karyawan > 0) {

                    // Karyawan Departemen
                    $department = $this->Department_model->read_department_information($d->department_id);
                    if (!is_null($department)) {
                        $department_name = $department[0]->department_name;
                    } else {
                        $department_name = '';
                    }

                    // $objset->setCellValue("B".$baris, );
                    $objset->setCellValue("B" . ($baris + 1) . "", $department_name . ', Jumlah  : ' . $jumlah_karyawan . ' Karyawan');

                    $objset->getStyle("B" . ($baris + 1) . ":H" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'B8CCE4')
                                ),

                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                ),

                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                )
                            )
                        );

                    $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'B8CCE4')
                                ),
                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )
                            )
                        );


                    $objset->mergeCells("B" . ($baris + 1) . ":D" . ($baris + 1) . "")
                        ->getStyle("B" . ($baris + 1) . ":D" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->getStyle("E" . ($jumlah_karyawan + $baris + 2) . ":E" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getNumberFormat()
                        ->setFormatCode("#,##0")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                                ),

                            )
                        );

                    $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Total ');

                    $objset->setCellValue("E" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(E" . ($baris + 2) . ":E" . ($jumlah_karyawan + $baris + 1) . ")");


                    // $objset->setCellValue("B".($jumlah_karyawan+$baris+3)."", '');

                    $payslip = $this->Payroll_model->get_comp_template_bulanan_dep_lihat($d->company_id, 1, $month_year, $d->department_id);

                    $no = 1;
                    $baris =  $baris + 2;
                    foreach ($payslip->result() as $r) {

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        // Karyawan ID
                        $emp_id = $r->employee_id;

                        $user_info = $this->Core_model->read_user_info($emp_id);
                        $emp_nik   = $user_info[0]->employee_id;
                        $full_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        if ($r->payment_type == 1) {

                            $bank_account = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
                            if (!is_null($bank_account)) {
                                $rekening_name = $r->rekening_name;
                                $bank_name     = $bank_account[0]->bank_code . '-' . $bank_account[0]->bank_name;
                            } else {
                                $rekening_name = '--';
                                $bank_name     = '--';
                            }

                            $bayar = 'Transfer Bank';
                        } else if ($r->payment_type == 2) {

                            $rekening_name  = '--';
                            $bank_name      = '--';

                            $bayar          = 'Tunai';
                        }



                        // Karyawan Posisi
                        $designation = $this->Designation_model->read_designation_information($r->designation_id);
                        if (!is_null($designation)) {
                            $designation_name = $designation[0]->designation_name;
                        } else {
                            $designation_name = '';
                        }

                        $jabatan = $designation_name;


                        //pemanggilan sesuaikan dengan nama kolom tabel

                        $objset->setCellValue("B" . $baris, $no);                  // No
                        $objset->setCellValue("C" . $baris, $full_name);          // Nama Karyawan
                        $objset->setCellValue("D" . $baris, $jabatan);              // Jabatan
                        $objset->setCellValue("E" . $baris, $r->net_salary);     // Total Gaji
                        $objset->setCellValue("F" . $baris, $bayar);  // No.Rekening
                        $objset->setCellValue("G" . $baris, $rekening_name);         // Bank
                        $objset->setCellValue("H" . $baris, $bank_name);         // Bank

                        $no++;
                        $baris++;
                    }

                    $dep++;
                }
            }

            $total_emp = $this->Employees_model->get_employee_by_company_bulanan($d->company_id, $month_year);
            if (!is_null($total_emp)) {
                $total_karyawan = $total_emp[0]->jumlah;
            } else {
                $total_karyawan = '';
            }

            $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 1) . "", $company_name);
            $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Jumlah Karyawan Bulan ' . $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ') : ');


            $objset->getStyle("B" . ($jumlah_karyawan + $baris + 1) . ":H" . ($jumlah_karyawan + $baris + 1) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'E26B0A')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 12,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'F7F1A5')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 1) . ":D" . ($jumlah_karyawan + $baris + 1) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris + 1) . ":D" . ($jumlah_karyawan + $baris + 1) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->getStyle("E" . ($jumlah_karyawan + $baris + 1) . ":E" . ($jumlah_karyawan + $baris + 1) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );

            $grand_total = $this->Payroll_model->get_comp_template_bulanan_lihat($d->company_id, 1, $month_year);

            foreach ($grand_total->result() as $g) {

                $objset->setCellValue("E" . ($jumlah_karyawan + $baris + 1) . "", $g->net_salary);
                $objset->setCellValue("E" . ($jumlah_karyawan + $baris + 2) . "", $total_karyawan);
            }
            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Rekap Gaji Bulanan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Rekap Gaji Bulanan ' . $company_name . ' - ' . $cek_bulan_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ========================================================================
    // 13.6.4 RESUME TAHUNAN
    // ========================================================================

    public function resume()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Resume Tahunan | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']   = 'Resume Tahunan';
        $data['path_url']      = 'reports_resume';

        $data['all_companies'] = $this->Company_model->get_company();
        $data['all_tahun_gaji']    = $this->Core_model->all_tahun_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1364', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/resume", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function resume_gaji_bulanan_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/resume", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("tahun_gaji");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_payslip_history_year($this->input->get("company_id"), $this->input->get("tahun_gaji"));

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {
            $data[] = array(
                $no,
                date("F", strtotime($r->salary_month)),
                $r->jumlah,
                number_format($r->net_salary, 0, ',', '.'),
                ''
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function resume_gaji_bulanan_list_detail()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/resume", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("tahun_gaji");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_payslip_history_year($this->input->get("company_id"), $this->input->get("tahun_gaji"));

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {
            $data[] = array(
                $no,

                date("F", strtotime($r->salary_month)),
                $r->jumlah,
                $this->Core_model->currency_sign($r->ga_pok),
                $this->Core_model->currency_sign($r->lembur),
                $this->Core_model->currency_sign($r->tj_jabatan),
                $this->Core_model->currency_sign($r->tj_produktifitas),
                $this->Core_model->currency_sign($r->tj_transportasi),
                $this->Core_model->currency_sign($r->tj_komunikasi),
                $this->Core_model->currency_sign($r->insentif),

                $this->Core_model->currency_sign($r->pph),
                $this->Core_model->currency_sign($r->pinjaman),
                $this->Core_model->currency_sign($r->bpjs_kes),
                $this->Core_model->currency_sign($r->bpjs_tk),
                $r->jum_alpa,
                $this->Core_model->currency_sign($r->potongan_alpa),
                $r->jum_izin,
                $this->Core_model->currency_sign($r->potongan_izin),

                $this->Core_model->currency_sign($r->net_salary),
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function export_resume()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/resume", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');
        $month_year   = $this->input->post('month_year');


        $bulan_gaji         = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji     = $bulan_gaji[0]->desc;
        $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji[0]->end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);
        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $departemen = $this->Payroll_model->get_comp_template_dept_bulanan_resume($company_id);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        if (count($departemen) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:Y1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:Y2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:Y3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );



            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "REKAP GAJI BULANAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object
            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object



            $objPHPExcel->getActiveSheet()->getStyle("B5:Y5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );




            $objPHPExcel->getActiveSheet()->getStyle("B6:Y6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('B5:W5000')->getAlignment()->setWrapText(true);

            // Kanan

            $objPHPExcel->setActiveSheetIndex(0)->getStyle("I7:I2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("J7:J2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("K7:K2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("L7:L2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("M7:M2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("N7:N2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("O7:O2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("P7:P2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("Q7:Q2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("R7:R2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("S7:S2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("T7:T2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("U7:U2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("V7:V2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("W7:W2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("X7:X2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));

            $objPHPExcel->getActiveSheet()->getStyle('Y7:Y2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('I5:I6');
            $objPHPExcel->getActiveSheet()->getStyle('I5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            $objPHPExcel->getActiveSheet()->mergeCells('J5:O5');

            $objPHPExcel->getActiveSheet()->mergeCells('P5:W5');

            $objPHPExcel->getActiveSheet()->mergeCells('X5:X6');
            $objPHPExcel->getActiveSheet()->getStyle('X5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('Y5:Y6');
            $objPHPExcel->getActiveSheet()->getStyle('Y5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y");

            $val = array("No", "Nama", 'Jabatan', "Status", "Grade", "Tanggal Kerja", "Masa Kerja", "Gaji Pokok", "Penambah", "K", "L", "M", "N", "O", "Pengurang", "Q", "R", "S", "T", "U", "V", "W", "Total Gaji", "No Rekening");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );



            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("J6", "Lembur");
            $objPHPExcel->getActiveSheet()->getStyle('J6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("K6", "Tj.Jabatan");
            $objPHPExcel->getActiveSheet()->getStyle('K6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("L6", "Tj.Produktifitas");
            $objPHPExcel->getActiveSheet()->getStyle('L6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("M6", "Tj.Transportasi");
            $objPHPExcel->getActiveSheet()->getStyle('M6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("N6", "Tj.Komunikasi");
            $objPHPExcel->getActiveSheet()->getStyle('N6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("O6", "Insentif");
            $objPHPExcel->getActiveSheet()->getStyle('O6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("P6", "Pajak (PPh)");
            $objPHPExcel->getActiveSheet()->getStyle('P6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("Q6", "Pinjaman");
            $objPHPExcel->getActiveSheet()->getStyle('Q6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("R6", "BPJS Kes");
            $objPHPExcel->getActiveSheet()->getStyle('R6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("S6", "BPJS TK");
            $objPHPExcel->getActiveSheet()->getStyle('S6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("T6", "Jumlah Alpa");
            $objPHPExcel->getActiveSheet()->getStyle('T6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("U6", "Potongan Alpa");
            $objPHPExcel->getActiveSheet()->getStyle('U6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("V6", "Jumlah Izin");
            $objPHPExcel->getActiveSheet()->getStyle('V6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("W6", "Potongan Izin");
            $objPHPExcel->getActiveSheet()->getStyle('W6')->applyFromArray($style);


            for ($a = 0; $a < 24; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(45); // Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(35); // Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(10); // Status
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(10); // Grade
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(12); // Tanggal
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(12); // Masa Kerja
                $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(15); // Gaji Pokok
                $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15); // Lembur
                $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(15); // Tj.Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(15); // Tj.Produktifitas
                $objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(15); // Tj.Transportasi
                $objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(15); // Tj.Komunikasi
                $objPHPExcel->getActiveSheet()->getColumnDimension('O')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('P')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('Q')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('R')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('S')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('T')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('U')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('V')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('W')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('X')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('Y')->setWidth(15); // Insentif


                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $dep = 6;
            $baris = $dep + 1;



            // $da = $baris+1;
            //$mo = $no+$baris;
            foreach ($departemen->result() as $d) {

                $grouping = $this->Employees_model->get_employee_by_department_company($d->company_id, $d->department_id);
                if (!is_null($grouping)) {
                    $jumlah_karyawan = $grouping[0]->jumlah;
                } else {
                    $jumlah_karyawan = '';
                }

                // $objset->setCellValue("B".$baris, );
                $objset->setCellValue("B" . ($baris + 1) . "", $d->department_name . ', Jumlah  : ' . $jumlah_karyawan . ' Karyawan');

                $objset->getStyle("B" . ($baris + 1) . ":Y" . ($baris + 1) . "")
                    ->applyFromArray(
                        array(
                            'fill' => array(
                                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                'color' => array('rgb' => 'B8CCE4')
                            ),

                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            ),

                            'borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            )
                        )
                    );

                $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":Y" . ($jumlah_karyawan + $baris + 2) . "")
                    ->applyFromArray(
                        array(
                            'fill' => array(
                                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                'color' => array('rgb' => 'B8CCE4')
                            ),
                            'borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )
                        )
                    );


                $objset->mergeCells("B" . ($baris + 1) . ":Y" . ($baris + 1) . "")
                    ->getStyle("B" . ($baris + 1) . ":Y" . ($baris + 1) . "")
                    ->applyFromArray(
                        array(

                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )

                        )
                    );

                $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                    ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                    ->applyFromArray(
                        array(

                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )

                        )
                    );

                $objset->getStyle("I" . ($jumlah_karyawan + $baris + 2) . ":X" . ($jumlah_karyawan + $baris + 2) . "")
                    ->getNumberFormat()
                    ->setFormatCode("#,##0")
                    ->applyFromArray(
                        array(

                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                            ),

                        )
                    );

                $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Total ');

                $objset->setCellValue("I" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(I" . ($baris + 2) . ":I" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("J" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(J" . ($baris + 2) . ":J" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("K" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(K" . ($baris + 2) . ":K" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("L" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(L" . ($baris + 2) . ":L" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("M" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(M" . ($baris + 2) . ":M" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("N" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(N" . ($baris + 2) . ":N" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("O" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(O" . ($baris + 2) . ":O" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("P" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(P" . ($baris + 2) . ":P" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("Q" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(Q" . ($baris + 2) . ":Q" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("R" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(R" . ($baris + 2) . ":R" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("S" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(S" . ($baris + 2) . ":S" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("T" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(T" . ($baris + 2) . ":T" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("U" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(U" . ($baris + 2) . ":U" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("V" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(V" . ($baris + 2) . ":V" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("W" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(W" . ($baris + 2) . ":W" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("X" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(X" . ($baris + 2) . ":X" . ($jumlah_karyawan + $baris + 1) . ")");

                // $objset->setCellValue("B".($jumlah_karyawan+$baris+3)."", '');

                $payslip = $this->Payroll_model->get_comp_template_bulanan_dep_lihat($d->company_id, 1, $month_year, $d->department_id);

                $no = 1;
                $baris =  $baris + 2;
                foreach ($payslip->result() as $r) {

                    // ====================================================================================================================
                    // DATA KARYAWAN
                    // ====================================================================================================================

                    // Karyawan ID
                    $emp_id = $r->employee_id;

                    $user_info = $this->Core_model->read_user_info($emp_id);
                    $emp_nik   = $user_info[0]->employee_id;
                    $full_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;

                    // ====================================================================================================================
                    // DATA KARYAWAN
                    // ====================================================================================================================
                    // $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
                    //       		if(!is_null($rekening)){
                    // 	$rekening_name = $rekening[0]->account_number;
                    // } else {
                    // 	$rekening_name = '';
                    // }

                    $rekening_name = $r->rekening_name;

                    $cek_karyawan_status = $user_info[0]->emp_status;

                    if ($cek_karyawan_status != '') {
                        $karyawan_status     = $cek_karyawan_status;
                    } else {
                        $karyawan_status     = '';
                    }

                    // Karyawan Departemen
                    $department = $this->Department_model->read_department_information($r->department_id);
                    if (!is_null($department)) {
                        $department_name = $department[0]->department_name;
                    } else {
                        $department_name = '';
                    }

                    // Karyawan Posisi
                    $designation = $this->Designation_model->read_designation_information($r->designation_id);
                    if (!is_null($designation)) {
                        $designation_name = $designation[0]->designation_name;
                    } else {
                        $designation_name = '';
                    }

                    $jabatan = $designation_name;

                    // Karyawan Masa kerja
                    date_default_timezone_set("Asia/Jakarta");

                    $doj = $r->doj;

                    $tanggal1 = new DateTime($r->doj);
                    $tanggal2 = new DateTime();

                    if ($tanggal2->diff($tanggal1)->y == 0) {
                        $selisih = $tanggal2->diff($tanggal1)->m . ' bln';
                    } else {
                        $selisih = $tanggal2->diff($tanggal1)->y . ' thn' . ' ' . $tanggal2->diff($tanggal1)->m . ' bln';
                    }

                    // Karyawan Status
                    $emp_status =  $this->Employees_model->read_employee_contract_information2($r->employee_id);
                    if (!is_null($emp_status)) {
                        $emp_status_name = $emp_status[0]->name_type;
                    } else {
                        $emp_status_name = '';
                    }

                    // grade
                    $grade_type = $this->Core_model->read_user_jenis_grade($user_info[0]->grade_type);

                    if (!is_null($grade_type)) {
                        $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                        $jenis_grade_warna = $grade_type[0]->warna;
                    } else {
                        $jenis_grade       = '';
                        $jenis_grade_warna = '';
                    }


                    //pemanggilan sesuaikan dengan nama kolom tabel
                    $objset->setCellValue("B" . $baris, $no);                                                                         // No
                    $objset->setCellValue("C" . $baris, $full_name);                                                                 // Nama Karyawan
                    $objset->setCellValue("D" . $baris, $jabatan);                                                         // Jabatan
                    $objset->setCellValue("E" . $baris, $emp_status_name);                                                             // Status
                    $objset->setCellValue("F" . $baris, $jenis_grade);                                                                 // Grade
                    $objset->setCellValue("G" . $baris, $doj);                                                                         // Tanggal Mulai Kerja
                    $objset->setCellValue("H" . $baris, $selisih);                                                                     // Masa Kerja
                    $objset->setCellValue("I" . $baris, $r->basic_salary);                         // Gaji Pokok
                    $objset->setCellValue("J" . $baris, $r->overtime_amount);                                                                                 // Gaji Pokok
                    $objset->setCellValue("K" . $baris, $r->jumlah_tunj_jabatan);                                                                                 // Gaji Poko
                    $objset->setCellValue("L" . $baris, $r->jumlah_tunj_produktifitas);                                                                                 // Gaji Poko
                    $objset->setCellValue("M" . $baris, $r->jumlah_tunj_transportasi);                                                                                 // Gaji Poko
                    $objset->setCellValue("N" . $baris, $r->jumlah_tunj_komunikasi);
                    $objset->setCellValue("O" . $baris, $r->commissions_amount);
                    $objset->setCellValue("P" . $baris, $r->other_payments_amount);
                    $objset->setCellValue("Q" . $baris, $r->loan_de_amount);
                    $objset->setCellValue("R" . $baris, $r->bpjs_kes_amount);                                                                                 // Gaji Poko
                    $objset->setCellValue("S" . $baris, $r->bpjs_tk_amount);
                    $objset->setCellValue("T" . $baris, $r->jumlah_alpa);
                    $objset->setCellValue("U" . $baris, $r->potongan_alpa);
                    $objset->setCellValue("V" . $baris, $r->jumlah_izin);
                    $objset->setCellValue("W" . $baris, $r->potongan_izin);
                    $objset->setCellValue("X" . $baris, $r->net_salary);

                    $objset->setCellValue("Y" . $baris, $r->rekening_name);

                    $no++;
                    $baris++;
                }

                $dep++;
            }

            $total_emp = $this->Employees_model->get_employee_by_company($d->company_id);
            if (!is_null($grouping)) {
                $total_karyawan = $total_emp[0]->jumlah;
            } else {
                $total_karyawan = '';
            }

            $objset->setCellValue("B" . ($jumlah_karyawan + $baris) . "", 'Grand Total ' . $total_karyawan . ' Karyawan');

            $objset->getStyle("B" . ($jumlah_karyawan + $baris) . ":Y" . ($jumlah_karyawan + $baris) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'B8CCE4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );


            $objset->mergeCells("B" . ($jumlah_karyawan + $baris) . ":H" . ($jumlah_karyawan + $baris) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris) . ":H" . ($jumlah_karyawan + $baris) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->getStyle("I" . ($jumlah_karyawan + $baris) . ":X" . ($jumlah_karyawan + $baris) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );

            $grand_total = $this->Payroll_model->get_comp_template_bulanan_lihat($d->company_id, 1, $month_year);

            foreach ($grand_total->result() as $g) {
                $objset->setCellValue("I" . ($jumlah_karyawan + $baris) . "", $g->ga_pok);
                $objset->setCellValue("J" . ($jumlah_karyawan + $baris) . "", $g->lembur);
                $objset->setCellValue("K" . ($jumlah_karyawan + $baris) . "", $g->tj_jabatan);
                $objset->setCellValue("L" . ($jumlah_karyawan + $baris) . "", $g->tj_produktifitas);
                $objset->setCellValue("M" . ($jumlah_karyawan + $baris) . "", $g->tj_transportasi);
                $objset->setCellValue("N" . ($jumlah_karyawan + $baris) . "", $g->tj_komunikasi);
                $objset->setCellValue("O" . ($jumlah_karyawan + $baris) . "", $g->insentif);
                $objset->setCellValue("P" . ($jumlah_karyawan + $baris) . "", $g->pph);
                $objset->setCellValue("Q" . ($jumlah_karyawan + $baris) . "", $g->pinjaman);
                $objset->setCellValue("R" . ($jumlah_karyawan + $baris) . "", $g->bpjs_kes);
                $objset->setCellValue("S" . ($jumlah_karyawan + $baris) . "", $g->bpjs_tk);
                $objset->setCellValue("T" . ($jumlah_karyawan + $baris) . "", $g->jum_alpa);
                $objset->setCellValue("U" . ($jumlah_karyawan + $baris) . "", $g->potongan_alpa);
                $objset->setCellValue("V" . ($jumlah_karyawan + $baris) . "", $g->jum_izin);
                $objset->setCellValue("W" . ($jumlah_karyawan + $baris) . "", $g->potongan_izin);
                $objset->setCellValue("X" . ($jumlah_karyawan + $baris) . "", $g->net_salary);
            }
            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Daftar Gaji Bulanan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Gaji Bulanan ' . $company_name . ' - ' . $cek_bulan_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ========================================================================
    // 13.6.5 RESUME PENGAJUAN
    // ========================================================================

    public function resume_pengajuan()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Resume Pengajuan | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['desc']          = 'LAPORAN : Resume Pengajua Gaji Bulanan';
        $data['breadcrumbs']   = 'Resume Pengajuan';
        $data['path_url']      = 'reports_resume_pengajuan';

        // $data['all_companies'] = $this->Company_model->get_company();
        $data['all_bulan_gaji']    = $this->Core_model->all_bulan_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1365', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/resume_pengajuan", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function resume_pengajuan_gaji_bulanan_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/resume_pengajuan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("month_year");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_payslip_history_year_month($this->input->get("month_year"));

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {
            $company = $this->Core_model->read_company_info($r->company_id);
            if (!is_null($company)) {
                $comp_name = $company[0]->name;
            } else {
                $comp_name = '<span class="badge bg-red"> ? </span>';
            }

            $bulan_gaji         = $this->Payroll_model->check_bulan_gaji($r->salary_month);
            $cek_bulan_gaji     = $bulan_gaji[0]->desc;

            $daftar_perjanjian = '';

            $sql_perjanjian = " SELECT *
                                    FROM
                                         view_salary_month_pembayaran
                                    WHERE
                                        1 = 1
                                    AND company_id  = '" . $r->company_id . "'
                                    AND salary_month  = '" . $r->salary_month . "'
                                    AND wages_type  = '1'
                                    ORDER BY payment_type DESC";

            // echo "<pre>";
            // print_r( $sql_perjanjian );
            // echo "</pre>";
            // die;

            $query_perjanjian = $this->db->query($sql_perjanjian);

            if ($query_perjanjian->num_rows() > 0) {
                $daftar_perjanjian = '<table class="datatables-demo table table-striped table-bordered" id="xin_table">
                                        <thead>
                                          <tr>
                                            <th class="text-center" width="50px">No.</th>
                                            <th class="text-center" > Pembayaran </th>
                                            <th class="text-center" > Jumlah Karyawan </th>
                                            <th class="text-center" > Jumlah Gaji </th>
                                            <th class="text-center" > Status </th>
                                          </tr>
                                        </thead>
                                        <tbody>';
                $mo = 1;
                $Total_gaji = 0;
                $Total_karyawan = 0;
                foreach ($query_perjanjian->result() as $row_perjanjian) :


                    $pebayaran = $this->Core_model->read_pembayaran_info($row_perjanjian->payment_type);
                    if (!is_null($pebayaran)) {
                        $Pembayaran_nama = $pebayaran[0]->jenis_gaji_keterangan;
                        $Pembayaran_warna = $pebayaran[0]->warna;
                    } else {
                        $Pembayaran_nama = '<span class="badge bg-red"> ? </span>';
                        $Pembayaran_warna = '';
                    }
                    $Pembayaran_jumlah        = $row_perjanjian->jumlah;
                    $Pembayaran_gaji          = number_format($row_perjanjian->net_salary, 2, ',', '.');



                    $daftar_perjanjian = $daftar_perjanjian . '
                                                    <tr >
                                                        <td width="2%" align="center">' . $mo . '.</td>

                                                        <td align="left">
                                                         ' . $Pembayaran_nama . '
                                                        </td>

                                                        <td width="20%" align="center">
                                                         ' . $Pembayaran_jumlah . '
                                                        </td>

                                                        <td width="20%" align="right">
                                                         ' . $Pembayaran_gaji . '
                                                        </td>

                                                        <td width="20%" align="left">
                                                        &nbsp; <span class="label label-success">' . $this->lang->line('xin_payroll_paid') . '</span>
                                                        </td>

                                                    </tr>';
                    $mo++;

                    $Total_gaji     += $row_perjanjian->net_salary;

                    $Total_karyawan += $row_perjanjian->jumlah;

                endforeach;



                $daftar_perjanjian = $daftar_perjanjian . '
                                                    <tr style="background-color: #f5f7fa !important;">

                                                        <td colspan ="2" width="2%" align="right">
                                                            <b>Grand Total &nbsp;</b>
                                                        </td>

                                                        <td width="20%" align="center">
                                                         <span class="blink blink-one">' . $Total_karyawan . '</span>
                                                        </td>

                                                        <td width="20%" align="right">
                                                          <span class="blink blink-one">' . number_format($Total_gaji, 2, ',', '.') . '</span>
                                                        </td>

                                                        <td width="20%" align="left">

                                                        </td>

                                                    </tr>';

                $daftar_perjanjian = $daftar_perjanjian . '
                                        </tbody>
                                        </table>';
            } else {
                $daftar_perjanjian = '<div class="warning-msg" style="padding:5px;">
                                            <i class ="fa fa-question-circle"></i> Tidak Ada Data
                                         </div>';
            }

            $data[] = array(
                $no . ". ",
                $comp_name,
                $cek_bulan_gaji,
                $r->jumlah,
                number_format($r->net_salary, 0, ',', '.'),
                $daftar_perjanjian
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function resume_pengajuan_gaji_bulanan_list_detail()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/resume_pengajuan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("tahun_gaji");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_payslip_history_year($this->input->get("company_id"), $this->input->get("tahun_gaji"));

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {
            $data[] = array(
                $no,

                date("F", strtotime($r->salary_month)),
                $r->jumlah,
                $this->Core_model->currency_sign($r->ga_pok),
                $this->Core_model->currency_sign($r->lembur),
                $this->Core_model->currency_sign($r->tj_jabatan),
                $this->Core_model->currency_sign($r->tj_produktifitas),
                $this->Core_model->currency_sign($r->tj_transportasi),
                $this->Core_model->currency_sign($r->tj_komunikasi),
                $this->Core_model->currency_sign($r->insentif),

                $this->Core_model->currency_sign($r->pph),
                $this->Core_model->currency_sign($r->pinjaman),
                $this->Core_model->currency_sign($r->bpjs_kes),
                $this->Core_model->currency_sign($r->bpjs_tk),
                $r->jum_alpa,
                $this->Core_model->currency_sign($r->potongan_alpa),
                $r->jum_izin,
                $this->Core_model->currency_sign($r->potongan_izin),

                $this->Core_model->currency_sign($r->net_salary),
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function export_resume_pengajuan_bulanan()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/resume_pengajuan", $data);
        } else {
            redirect('admin/');
        }

        $month_year   = $this->input->post('month_year');

        $bulan_gaji         = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji     = $bulan_gaji[0]->desc;
        $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji[0]->end_date));


        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);
        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $company_list = $this->Payroll_model->get_company_payslip_history_year_month($month_year);

        if (count($company_list) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:G1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:G2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:G3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", '');

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "RESUME PENGAJUAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object

            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:G5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:G6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle('I7:I2560')->getNumberFormat()->setFormatCode('0');

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            // $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            $objPHPExcel->getActiveSheet()->getStyle('B5:G5000')->getAlignment()->setWrapText(true);

            // Kanan
            $objPHPExcel->getActiveSheet()->getStyle("F7:F2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));


            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G");

            $val = array("No", "Nama Perusahaan", 'Bulan Gaji', "Jumlah Karyawan", "Total Gaji", "Keterangan");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );

            for ($a = 0; $a < 6; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // 1.No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(35); // 2.Nama Perusahan
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(15); // 3.Buln Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15); // 4.Jumlah Karyawan
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20); // 5.Total Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(50); // 6.Keterangan


                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $no     = 1;
            $baris = $no + 6;
            foreach ($company_list->result() as $r) {

                $company = $this->Core_model->read_company_info($r->company_id);
                if (!is_null($company)) {
                    $comp_name = $company[0]->name;
                } else {
                    $comp_name = '';
                }



                //pemanggilan sesuaikan dengan nama kolom tabel
                // $objset->setCellValue("B" . $baris, $no); 				// 0.
                $objset->setCellValue("B" . $baris, $no);                     // 1.No
                $objset->setCellValue("C" . $baris, $comp_name);             // 2.Nama Perusahaan
                $objset->setCellValue("D" . $baris, $cek_bulan_gaji);         // 3.Bulan Gaji
                $objset->setCellValue("E" . $baris, $r->jumlah);             // 4.Jumlah Karyawan
                $objset->setCellValue("F" . $baris, $r->net_salary);         // 7.Total Gaji
                $objset->setCellValue("G" . $baris, '');                     // 8.Keterangan

                $no++;
                $baris++;
            }

            $jumlah_pengajuan = count($company_list->result());

            $objset->setCellValue("B" . ($jumlah_pengajuan + 8) . "", 'Grand Total ');

            $objset->getStyle("B" . ($jumlah_pengajuan + 8) . ":G" . ($jumlah_pengajuan + 8) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'B8CCE4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($jumlah_pengajuan + 8) . ":E" . ($jumlah_pengajuan + 8) . "")
                ->getStyle("B" . ($jumlah_pengajuan + 8) . ":E" . ($jumlah_pengajuan + 8) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->setCellValue("F" . ($jumlah_pengajuan + 8) . "", "=SUM(F" . (7) . ":F" . ($jumlah_pengajuan + 8 - 2) . ")");

            $objset->getStyle("F" . ($jumlah_pengajuan + 8) . ":F" . ($jumlah_pengajuan + 8 - 2) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );



            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Resume Pengajuan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Resume Pengajuan Gaji Bulanan ' . $company_name . ' - ' . $cek_tanggal_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    public function resume_pengajuan_bulanan_jumlah()
    {
        $bulan_gaji = $this->input->get('month_year');


        $sql = 'SELECT sum(jumlah) as jumlah_karyawan, sum(net_salary) as jumlah_gaji FROM view_salary_month_jumlah WHERE salary_month = "' . $bulan_gaji . '" ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $bulan_gaji_cek     = $this->Payroll_model->check_bulan_gaji($bulan_gaji);
                $cek_bulan_gaji     = $bulan_gaji_cek[0]->desc;
                $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji_cek[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji_cek[0]->end_date));

                $response['val'][] = array(
                    'bulan_gaji'      => $cek_bulan_gaji,
                    'jumlah_karyawan' => $val->jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    // ========================================================================
    // 13.6.6 SLIP GAJI BULANAN
    // ========================================================================

    public function gaji_bulanan_slip()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Slip Gaji Bulanan | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['desc']          = 'LAPORAN : Slip Gaji Bulanan';
        $data['breadcrumbs']   = 'Slip Gaji Bulanan';
        $data['path_url']      = 'reports_slip_gaji_bulanan';

        $data['all_companies']  = $this->Company_model->get_company();
        $data['all_bulan_gaji'] = $this->Core_model->all_bulan_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1363', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/gaji_bulanan_slip", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function gaji_bulanan_slip_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_bulanan_slip", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("month_year");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_payslip_history_month($this->input->get("company_id"), $this->input->get("month_year"));

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {
            $user = $this->Core_model->read_user_info($r->employee_id);
            if (!is_null($user)) {

                $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;
                $emp_link = $user[0]->employee_id;

                $bulan_gaji_cek     = $this->Payroll_model->check_bulan_gaji($r->salary_month);
                $month_payment     = $bulan_gaji_cek[0]->desc;


                $p_amount = $r->net_salary;

                // get date > created at > and format
                $created_at = $this->Core_model->set_date_format($r->created_at);
                // get designation
                $designation = $this->Designation_model->read_designation_information($user[0]->designation_id);
                if (!is_null($designation)) {
                    $designation_name = $designation[0]->designation_name;
                } else {
                    $designation_name = '--';
                }

                // department
                $department = $this->Department_model->read_department_information($user[0]->department_id);
                if (!is_null($department)) {
                    $department_name = $department[0]->department_name;
                } else {
                    $department_name = '--';
                }

                $department_designation = $designation_name . ' (' . $department_name . ')';

                // get company
                $company = $this->Core_model->read_company_info($user[0]->company_id);
                if (!is_null($company)) {
                    $comp_name = $company[0]->name;
                } else {
                    $comp_name = '--';
                }
                // bank account
                $bank_account = $this->Employees_model->get_employee_bank_account_last($user[0]->user_id);
                if (!is_null($bank_account)) {
                    $account_number = $bank_account[0]->account_number;
                    $bank_name = $bank_account[0]->bank_code . '-' . $bank_account[0]->bank_name;
                } else {
                    $account_number = '--';
                    $bank_name = '--';
                }


                $ifull_name = nl2br($full_name . "\r\n <small class='text-muted'><i>" . $this->lang->line('xin_employees_id') . ': ' . $emp_link . "<i></i></i></small>\r\n <small class='text-muted'><i>" . $department_designation . '<i></i></i></small>');

                $key = urlencode(simple_encrypt("{$user[0]->user_id}@{$r->payslip_key}"));
                $view_url = '<a target ="_blank" href="' . site_url() . 'admin/reports/pdf_create_bulanan/p/' . $key . '" >
                    <button type="button" class="btn icon-btn btn-xs btn-success waves-effect waves-light">
                        <span class="fa fa-download"></span>
                    </button>
                </a>';

                $data[] = array(
                    $no,
                    $view_url,
                    $month_payment,
                    $full_name,
                    $comp_name,
                    $department_name,
                    $designation_name,
                    number_format($p_amount, 0, ',', '.'),
                    $account_number,
                    $bank_name
                );
                $no++;
            }
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function resume_slip_gaji_bulanan_jumlah()
    {
        $bulan_gaji = $this->input->get('month_year');
        $comp_gaji    = $this->input->get("company_id");

        $sql = 'SELECT sum(jumlah) as jumlah_karyawan, sum(net_salary) as jumlah_gaji
                            FROM view_salary_month_jumlah WHERE company_id = "' . $comp_gaji . '" AND salary_month = "' . $bulan_gaji . '" ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $bulan_gaji_cek     = $this->Payroll_model->check_bulan_gaji($bulan_gaji);
                $cek_bulan_gaji     = $bulan_gaji_cek[0]->desc;
                $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji_cek[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji_cek[0]->end_date));

                $response['val'][] = array(
                    'bulan_gaji'      => $cek_bulan_gaji,
                    'jumlah_karyawan' => $val->jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    public function pdf_create_bulanan()
    {
        //$this->load->library('Pdf');
        $system = $this->Core_model->read_setting_info(1);
        // create new PDF document
        $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

        list($employee_id, $key) = explode('@', simple_decrypt($this->uri->segment(5)));
        $payment = $this->Payroll_model->read_salary_payslip_info_key($key, $employee_id);
        if (is_null($payment)) {
            redirect('admin/reports/gaji_bulanan_slip');
        }
        $user = $this->Core_model->read_user_info($payment[0]->employee_id);

        // if password generate option enable
        if ($system[0]->is_payslip_password_generate == 1) {
            /**
             * Protect PDF from being printed, copied or modified. In order to being viewed, the user needs
             * to provide password as selected format in settings module.
             */
            if ($system[0]->payslip_password_format == 'dateofbirth') {
                $password_val = date("dmY", strtotime($user[0]->date_of_birth));
            } else if ($system[0]->payslip_password_format == 'contact_no') {
                $password_val = $user[0]->contact_no;
            } else if ($system[0]->payslip_password_format == 'full_name') {
                $password_val = $user[0]->first_name . $user[0]->last_name;
            } else if ($system[0]->payslip_password_format == 'email') {
                $password_val = $user[0]->email;
            } else if ($system[0]->payslip_password_format == 'password') {
                $password_val = $user[0]->password;
            } else if ($system[0]->payslip_password_format == 'user_password') {
                $password_val = $user[0]->username . $user[0]->password;
            } else if ($system[0]->payslip_password_format == 'employee_id') {
                $password_val = $user[0]->employee_id;
            } else if ($system[0]->payslip_password_format == 'employee_id_password') {
                $password_val = $user[0]->employee_id . $user[0]->password;
            } else if ($system[0]->payslip_password_format == 'dateofbirth_name') {
                $dob = date("dmY", strtotime($user[0]->date_of_birth));
                $fname = $user[0]->first_name;
                $lname = $user[0]->last_name;
                $password_val = $dob . $fname[0] . $lname[0];
            }
            $pdf->SetProtection(array('print', 'copy', 'modify'), $password_val, $password_val, 0, null);
        }


        $_des_name = $this->Designation_model->read_designation_information($user[0]->designation_id);
        if (!is_null($_des_name)) {
            $_designation_name = $_des_name[0]->designation_name;
        } else {
            $_designation_name = '';
        }
        $department = $this->Department_model->read_department_information($user[0]->department_id);
        if (!is_null($department)) {
            $_department_name = $department[0]->department_name;
        } else {
            $_department_name = '';
        }
        //$location = $this->Core_model->read_location_info($department[0]->location_id);
        // company info
        $company = $this->Core_model->read_company_info($user[0]->company_id);


        $p_method = '';
        if (!is_null($company)) {
            $company_logo = $company[0]->logo;
            $company_name = $company[0]->name;
            $address_1 = $company[0]->address_1;
            $address_2 = $company[0]->address_2;
            $city = $company[0]->city;
            $state = $company[0]->state;
            $zipcode = $company[0]->zipcode;
            $country = $this->Core_model->read_country_info($company[0]->country);
            if (!is_null($country)) {
                $country_name = $country[0]->country_name;
            } else {
                $country_name = '--';
            }
            $c_info_email = $company[0]->email;
            $c_info_phone = $company[0]->contact_number;
        } else {
            $company_logo = $company[0]->logo;
            $company_name = '--';
            $address_1 = '--';
            $address_2 = '--';
            $city = '--';
            $state = '--';
            $zipcode = '--';
            $country_name = '--';
            $c_info_email = '--';
            $c_info_phone = '--';
        }
        $pdf = new Pdf('P', 'mm', 'A4', true, 'UTF-8', false);

        // set default header data
        $c_info_address = $address_1 . ', ' . $address_2;

        $c_info_city    = $city . ', Kode Pos : ' . $zipcode . ' Jawa Timur - Indonesia';

        $email_phone_address = "$c_info_address \n" . "$c_info_city \n" . $this->lang->line('xin_phone') . " : $c_info_phone | " . $this->lang->line('dashboard_email') . " : $c_info_email \n";

        $header_string = $email_phone_address;

        // set document information
        $pdf->SetCreator('hris');
        $pdf->SetAuthor('Nizar Basyrewan');
        $pdf->SetTitle($company_name . ' - ' . $this->lang->line('xin_print_payslip'));
        $pdf->SetSubject($this->lang->line('xin_payslip'));
        $pdf->SetKeywords($this->lang->line('xin_payslip'));

        $pdf->SetHeaderData('../../../../../uploads/logo/payroll/' . $company_logo, 40, $company_name, $header_string);

        $pdf->setFooterData(array(0, 64, 0), array(0, 64, 128));

        // set header and footer fonts
        $pdf->setHeaderFont(array('arial', '', 12));
        $pdf->setFooterFont(array('helvetica', '', 9));

        // set default monospaced font
        $pdf->SetDefaultMonospacedFont('courier');

        // set margins
        $pdf->SetMargins(15, 27, 15);
        $pdf->SetHeaderMargin(5);
        $pdf->SetFooterMargin(10);

        // set auto page breaks
        $pdf->SetAutoPageBreak(TRUE, 25);

        // set image scale factor
        $pdf->setImageScale(1.25);

        // set font
        $pdf->SetFont('helvetica', 'B', 10);

        // set header and footer fonts
        $pdf->setHeaderFont(array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
        $pdf->setFooterFont(array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

        // set default monospaced font
        $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

        // set image scale factor
        $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

        // ---------------------------------------------------------

        // set default font subsetting mode
        $pdf->setFontSubsetting(true);

        // Set font
        // dejavusans is a UTF-8 Unicode font, if you only need to
        // print standard ASCII chars, you can use core fonts like
        // helvetica or times to reduce file size.
        $pdf->SetFont('dejavusans', '', 10, '', true);

        // Add a page
        // This method has several options, check the source code documentation for more information.
        $pdf->AddPage();
        // -----------------------------------------------------------------------------
        $fname           = $user[0]->first_name . ' ' . $user[0]->last_name;

        $created_at      = $this->Core_model->set_date_format($payment[0]->created_at);
        $date_of_joining = $this->Core_model->set_date_format($user[0]->date_of_joining);
        $salary_month    = $this->Core_model->set_date_format($payment[0]->salary_month);

        $tanggal       = $this->Timesheet_model->read_tanggal_information($payment[0]->salary_month);
        if (!is_null($tanggal)) {
            $start_att = date("d-m-Y", strtotime($tanggal[0]->start_date));
            $end_att   = date("d-m-Y", strtotime($tanggal[0]->end_date));
        } else {
            $start_att = '';
            $end_att = '';
        }

        // check
        $half_title = '';

        // ===========================================================
        // Penambah
        //============================================================

        // basic salary
        $bs = 0;
        $bs = $payment[0]->basic_salary;

        // Tunjangan
        $count_allowances = $this->Employees_model->count_employee_allowances_payslip($payment[0]->payslip_id);
        $allowances       = $this->Employees_model->set_employee_allowances_payslip($payment[0]->payslip_id);

        $allowances_amount = 0;
        foreach ($allowances->result() as $sl_allowances) {
            $allowances_amount += $sl_allowances->jumlah_tunj_jabatan + $sl_allowances->jumlah_tunj_produktifitas + $sl_allowances->jumlah_tunj_transportasi + $sl_allowances->jumlah_tunj_komunikasi;
        }

        // Insentif
        $count_commissions = $this->Employees_model->count_employee_commissions_payslip($payment[0]->payslip_id);
        $commissions = $this->Employees_model->set_employee_commissions_payslip($payment[0]->payslip_id);

        $commissions_amount = 0;
        foreach ($commissions->result() as $sl_commissions) {
            $commissions_amount += $sl_commissions->commissions_amount;
        }

        // Lembur
        $count_overtime = $this->Employees_model->count_employee_overtime_payslip($payment[0]->payslip_id);
        $overtime = $this->Employees_model->set_employee_overtime_payslip($payment[0]->payslip_id);

        $overtime_amount = 0;
        foreach ($overtime->result() as $sl_overtime) {
            $overtime_amount += $sl_overtime->overtime_amount;
        }

        // ============================================================================================================================
        // Pengurangan
        // ============================================================================================================================

        // ========================================================================================================================
        // BPJS
        // ========================================================================================================================
        $count_statutory_deductions = $this->Employees_model->count_employee_statutory_deductions_payslip($payment[0]->payslip_id);
        $statutory_deductions = $this->Employees_model->set_employee_statutory_deductions_payslip($payment[0]->payslip_id);

        $bpjs_amount = 0;
        foreach ($statutory_deductions->result() as $sl_statutory_deductions) {
            $bpjs_amount += $sl_statutory_deductions->bpjs_kes_amount + $sl_statutory_deductions->bpjs_tk_amount;
        }

        // ========================================================================================================================
        // Pajak
        // ========================================================================================================================
        $count_other_payments = $this->Employees_model->count_employee_other_payments_payslip($payment[0]->payslip_id);
        $other_payments = $this->Employees_model->set_employee_other_payments_payslip($payment[0]->payslip_id);

        $other_payments_amount = 0;
        foreach ($other_payments->result() as $sl_other_payments) {
            $other_payments_amount += $sl_other_payments->other_payments_amount;
        }

        // ========================================================================================================================
        // Pinjaman
        // ========================================================================================================================
        $count_loan = $this->Employees_model->count_employee_deductions_payslip($payment[0]->payslip_id);
        $loan = $this->Employees_model->set_employee_deductions_payslip($payment[0]->payslip_id);

        $loan_amount = 0;
        foreach ($loan->result() as $sl_loan) {
            $loan_amount += $sl_loan->loan_de_amount;
        }

        // ========================================================================================================================
        // Potongan Kehadiran
        // ========================================================================================================================
        $count_attedance = $this->Employees_model->count_employee_deductions_payslip($payment[0]->payslip_id);
        $attedance  = $this->Employees_model->set_employee_deductions_payslip($payment[0]->payslip_id);

        $attedance_amount = 0;
        foreach ($attedance->result() as $sl_attedance) {
            $attedance_amount += $sl_attedance->potongan_absen;
        }

        // ========================================================================================================================
        // Potongan Lain
        // ========================================================================================================================
        $count_potongan_lain = $this->Employees_model->count_employee_potongan_lain_payslip($payment[0]->payslip_id);
        $potongan_lain       = $this->Employees_model->set_employee_potongan_lain_payslip($payment[0]->payslip_id);

        $potongan_lain_amount = 0;
        foreach ($potongan_lain->result() as $sl_potongan_lain) {
            $potongan_lain_amount += $sl_potongan_lain->potongan_lain;
        }
        // ========================================================================================================================

        $tbl = '<br><br>
                        <table cellpadding="1" cellspacing="1" border="0" >
                            <tr>
                                <td align="center"><h2> SLIP GAJI KARYAWAN </h2></td>
                            </tr>
                            <tr>
                                <td align="center">' . $this->lang->line('xin_payroll_year_date') . ': ' . $half_title . ' <strong>' . date("F Y", strtotime($payment[0]->salary_month)) . '</strong></td>
                            </tr>
                        </table>
                    ';

        $pdf->writeHTML($tbl, true, false, false, false, '');
        // -----------------------------------------------------------------------------
        // set cell padding
        $pdf->setCellPaddings(1, 1, 1, 1);

        // set cell margins
        $pdf->setCellMargins(0, 0, 0, 0);

        // set color for background
        $pdf->SetFillColor(255, 255, 127);
        // set some text for example
        //$txt = 'Employee Details';
        // Multicell
        // $pdf->MultiCell(180, 6, $txt, 0, 'L', 11, 0, '', '', true);
        $pdf->Ln(7);
        $tbl1 = '
                        <table cellpadding="1" cellspacing="0" border="0" width="100%" style="font-size:11px;" >

                        <tr>
                            <td width="15%;"> <strong>NAMA</strong> </td>
                            <td width="35%;"> : ' . strtoupper($fname) . '</td>
                            <td width="15%;"> <strong>PERIODE</strong> </td>
                            <td width="35%;"> : ' . $start_att . ' s/d ' . $end_att . ' </td>
                        </tr>
                        <tr>
                            <td width="15%;"> <strong>JABATAN</strong> </td>
                            <td width="35%;"> : ' . strtoupper($_designation_name) . '</td>
                            <td width="15%;"> <strong>N.I.K</strong> </td>
                            <td width="35%;"> : ' . $user[0]->employee_id . '</td>
                        </tr>';


        $tbl1 .= '
                            </table>';

        $pdf->writeHTML($tbl1, true, false, true, false, '');


        //// break..
        // $pdf->Ln(0);


        $tbl_new = '
                        <table cellpadding="6" cellspacing="0" border="1" width="100%" style="border: 1px solid #ccc; font-size:11px;">

                        <tr>
                            <td width="31%;" align ="center" colspan="2"> <strong>RINCIAN</strong> </td>
                            <td width="19%;" align ="center" > <strong>NOMINAL</strong> </td>


                            <td width="31%;" align ="center" colspan="2"> <strong>RINCIAN</strong> </td>
                            <td width="19%;" align ="center" > <strong>NOMINAL</strong> </td>
                        </tr>
                        <tr>
                            <td width="5%;" align ="center" style="text-align: middle;" rowspan="7">P<br>E<br>N<br>G<br>H<br>A<br>S<br>I<br>L<br>A<br>N</td>
                            <td width="26%;;"> GAJI POKOK </td>

                            <td width="19%;" align="right"> ' . number_format($bs, 0, ',', '.') . ' </td>

                            <td width="5%;;" align ="center" rowspan="7">P<br>O<br>T<br>O<br>N<br>G<br>A<br>N</td>
                            <td width="26%;;"> CICILAN PINJAMAN </td>';

        if ($count_loan > 0) {
            foreach ($loan->result() as $sl_loan) {
                $tbl_new .= '

                                    <td width="19%;" align="right">' . number_format($sl_loan->loan_de_amount, 0, ',', '.') . '</td>';
            }
        }

        $tbl_new .= '
                        </tr>

                        <tr>
                            <td width="26%;"> TJ. JABATAN </td>';

        if ($count_allowances > 0) {
            foreach ($allowances->result() as $sl_allowances) {
                $tbl_new .= '

                                    <td width="19%;" align="right" >' . number_format($sl_allowances->jumlah_tunj_jabatan, 0, ',', '.') . '</td>';
            }
        }

        $tbl_new .= '
                            <td width="26%;"> PPH 21 </td>';

        if ($count_other_payments > 0) {
            foreach ($other_payments->result() as $sl_other_payments) {
                $tbl_new .= '

                                    <td width="19%;" align="right">' . number_format($sl_other_payments->other_payments_amount, 0, ',', '.') . '</td>';
            }
        }

        $tbl_new .= '
                        </tr>
                        <tr>

                            <td width="26%;"> TJ. PRODUKTIFITAS </td>';

        if ($count_allowances > 0) {
            foreach ($allowances->result() as $sl_allowances) {
                $tbl_new .= '

                                    <td width="19%;" align="right">' . number_format($sl_allowances->jumlah_tunj_produktifitas, 0, ',', '.') . '</td>';
            }
        }

        $tbl_new .= '

                            <td width="26%;"> BPJS TK </td>';

        if ($count_statutory_deductions > 0) {
            foreach ($statutory_deductions->result() as $sl_statutory_deductions) {
                $tbl_new .= '
                                    <td width="19%;;" align="right">' . number_format($sl_statutory_deductions->bpjs_tk_amount, 0, ',', '.') . '</td>';
            }
        }

        $tbl_new .= '
                        </tr>
                        <tr>
                            <td width="26%;"> TJ. TRANSPORT </td>';

        if ($count_allowances > 0) {
            foreach ($allowances->result() as $sl_allowances) {
                $tbl_new .= '

                                    <td width="19%;" align="right">' . number_format($sl_allowances->jumlah_tunj_transportasi, 0, ',', '.') . '</td>';
            }
        }

        $tbl_new .= '

                            <td width="26%;"> BPJS KESEHATAN </td>';

        if ($count_statutory_deductions > 0) {
            foreach ($statutory_deductions->result() as $sl_statutory_deductions) {
                $tbl_new .= '
                                    <td width="19%;;" align="right">' . number_format($sl_statutory_deductions->bpjs_kes_amount, 0, ',', '.') . '</td>';
            }
        }

        $tbl_new .= '
                        </tr>
                        <tr>

                            <td width="26%;"> TJ. KOMUNIKASI </td>';

        if ($count_allowances > 0) {
            foreach ($allowances->result() as $sl_allowances) {
                $tbl_new .= '

                                    <td width="19%;" align="right">' . number_format($sl_allowances->jumlah_tunj_komunikasi, 0, ',', '.') . '</td>';
            }
        }

        $tbl_new .= '
                            <td width="26%;"> TIDAK MASUK </td>';

        if ($count_attedance > 0) {
            foreach ($attedance->result() as $sl_attedance) {
                $tbl_new .= '


                                    <td width="19%;" align="right">' . number_format($sl_attedance->potongan_absen, 0, ',', '.') . '</td>';
            }
        }

        $tbl_new .= '
                        </tr>

                        <tr>
                            <td width="26%;"> OVERTIME </td>';
        if ($count_overtime > 0) {
            foreach ($overtime->result() as $sl_overtime) {

                $tbl_new .= '

                                    <td width="19%;" align="right">' . number_format($sl_overtime->overtime_amount, 0, ',', '.') . '</td>';
            }
        }
        $tbl_new .= '
                            <td width="26%;"> LAIN-LAIN </td>';

        if ($count_potongan_lain > 0) {

            foreach ($potongan_lain->result() as $sl_potongan_lain) {
                $tbl_new .= '<td width="19%;" align="right">' . number_format($sl_potongan_lain->potongan_lain, 0, ',', '.') . '</td>';
            }
        } else {

            $tbl_new .= '<td width="19%;" align="right"> 0 </td>';
        }

        $tbl_new .= '</tr>

                        <tr>
                            <td width="26%;"> INSENTIF / REKONSILIASI </td>';

        if ($count_commissions > 0) {
            foreach ($commissions->result() as $sl_commissions) {
                $tbl_new .= '
                                        <td width="19%;" align="right">' . number_format($sl_commissions->commissions_amount, 0, ',', '.') . '</td>';
            }
        }

        $tbl_new .= ' <td width="26%;"> </td>

                            <td width="19%;"> </td>
                        </tr>';

        $total_earning    = $bs + $allowances_amount + $overtime_amount + $commissions_amount;
        $total_deduction  = $loan_amount + $bpjs_amount + $other_payments_amount + $attedance_amount + $potongan_lain_amount;
        $total_net_salary = $total_earning - $total_deduction;

        $tbl_new .= ' <tr>
                            <td width="31%;" align="left" colspan="2"> <strong>TOTAL UPAH</strong></td>
                            <td width="19%;" align="right">' . number_format($total_earning, 0, ',', '.') . ' </td>

                            <td width="31%;" align="left" colspan="2"> <strong>TOTAL POTONGAN</strong></td>
                            <td width="19%;" align="right"> ' . number_format($total_deduction, 0, ',', '.') . ' </td>
                        </tr>
                        <tr>
                            <td width="81%;" align="left" colspan="5"> <strong>GAJI YANG DITERIMA</strong></td>
                            <td width="19%;" align="right"> <b>' . number_format($total_net_salary, 0, ',', '.') . '</b> </td>
                        </tr>';


        $tbl_new .= '
                            </table>';

        $pdf->writeHTML($tbl_new, true, false, true, false, '');

        //// break..
        $pdf->Ln(0);

        $tbl = '
                        <table cellpadding="5" cellspacing="0" border="1" width="100%">
                            <tr>
                                <td >
                                    Keterangan :
                                </td>
                            </tr>
                            <tr>
                                <td >
                                    <ol class="c" >
                                        <li>Slip gaji adalah bukti dan informasi resmi penerimaan gaji dari pemberi kerja kepada karyawan.
                                            Mengingat slip gaji merupakan dokumen yang bersifat pribadi & rahasia ,mohon dapat digunakan dengan bijaksana.
                                        </li>
                                        <li>Sesuaikan jumlah gaji yang anda terima dengan slip.</li>
                                        <li>Segera sampaikan kepada pihak HRD jika ada yang tidak sesuai / kesalahan.</li>
                                        <li>Batas klarifikasi gaji maksimal 2 hari setelah slip gaji diterima.</li>
                                        <li>HRD tidak melayani klarifikasi jika melebihi point 3.</li>
                                        <li>Semoga gaji anda Berkah untuk anda dan keluarga.</li>

                                    </ol>
                                </td>
                            </tr>


                        </table>';

        $pdf->writeHTML($tbl, true, false, false, false, '');

        // Jombang, '.date('l jS \of F Y \a\t G:i:s A').'
        $tbl_ttd = '
                        <table cellpadding="5" cellspacing="0" border="0" width="50%">
                            <tr>
                                <td>
                                    <strong>Jombang, ' . date('d F Y') . '</strong>
                                </td>
                            </tr>
                            <tr>
                                <td><br><br><br><br><br><br></td>
                            </tr>
                            <tr>
                                <td>
                                    HRD <br>
                                    <strong>PT. AKUI BIRD NEST INDONESIA</strong>
                                </td>
                            </tr>
                        </table>';

        $pdf->writeHTML($tbl_ttd, true, false, false, false, '');

        $tbl_note = '
                        <table cellpadding="0" cellspacing="0" border="0" width="100%">
                            <tr>
                                <td align="center">
                                    <strong>“private and confidential”</strong>
                                </td>
                            </tr>

                        </table>';

        $pdf->writeHTML($tbl_note, true, false, false, false, '');


        // Close and output PDF document
        // This method has several options, check the source code documentation for more information.
        $fname = strtolower($fname);
        $pay_month = strtolower(date("F Y", strtotime($payment[0]->year_to_date)));

        //Close and output PDF document
        ob_start();



        $pdf->Output('slip_gaji_bulanan_' . $fname . '_' . $pay_month . '.pdf', 'I');
        ob_end_flush();
    }

    // ****************************************************************************
    // >>  12.7 HARIAN
    // ****************************************************************************

    // ========================================================================
    // 12.7.1 KARYAWAN
    // ========================================================================

    public function karyawan_harian()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Karyawan Gaji Harian ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['desc']             = 'LAPORAN : Karyawan Gaji Harian';
        $data['breadcrumbs']      = 'Karyawan Gaji Harian';
        $data['path_url']         = 'reports_karyawan_harian';

        $data['all_companies']    = $this->Company_model->get_company();;
        $data['all_departments']  = $this->Department_model->all_departments();
        $data['all_designations'] = $this->Designation_model->all_designations();

        $role_resources_ids       = $this->Core_model->user_role_resource();

        if (in_array('1371', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/karyawan_harian", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_karyawan_harian_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/karyawan_harian", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $company_id = $this->uri->segment(4);
        $department_id = $this->uri->segment(5);
        $designation_id = $this->uri->segment(6);
        $employee = $this->Reports_model->get_karyawan_harian_reports($company_id, $department_id, $designation_id);

        $data = array();
        $no = 1;
        foreach ($employee->result() as $r) {

            // user full name
            $full_name = $r->first_name . ' ' . $r->last_name;

            // get designation
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '--';
            }
            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '--';
            }

            // get workstation
            $workstation = $this->Core_model->read_designation_workstation_info($r->designation_id);
            if (!is_null($workstation)) {
                $workstation_name = $workstation[0]->workstation_name;
            } else {
                $workstation_name = '--';
            }

            if ($r->emp_status == '') {
                $emp_status = '<span class="badge bg-red"> ? </span>';
            } elseif ($r->emp_status == 'Tetap') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_tetap') . '</span>';
            } elseif ($r->emp_status == 'Kontrak') {
                $emp_status = '<span class="badge bg-yellow">' . $this->lang->line('xin_employee_status_kontrak') . '</span>';
            } elseif ($r->emp_status == 'Percobaan') {
                $emp_status = '<span class="badge bg-blue">' . $this->lang->line('xin_employee_status_percobaan') . '</span>';
            }

            $cek_emp_status =  $this->Employees_model->read_employee_contract_information($r->user_id);
            if (!is_null($cek_emp_status)) {
                $emp_status_name = '<span class="badge bg-yellow">' . $cek_emp_status[0]->name_type . '</span>';
            } else {

                if ($r->emp_status == 'Tetap') {
                    $emp_status_name = '<span class="badge bg-green"> Tetap </span>';
                } else {
                    $emp_status_name = '<span class="badge bg-red"> ? </span>';
                }
            }

            // jenis gaji
            $wages_type = $this->Core_model->read_user_jenis_gaji($r->wages_type);
            // user full name
            if (!is_null($wages_type)) {
                $jenis_gaji       = $wages_type[0]->jenis_gaji_keterangan;
                $jenis_gaji_warna = $wages_type[0]->warna;
            } else {
                $jenis_gaji = '<span class="badge bg-red"> ? </span>';
                $jenis_gaji_warna = '';
            }

            $rolemp_status = '<span class="' . $jenis_gaji_warna . '">' . $jenis_gaji . '</sapan>';

            // grade
            $grade_type = $this->Core_model->read_user_jenis_grade($r->grade_type);
            // user full name
            if (!is_null($grade_type)) {
                $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                $jenis_grade_warna = $grade_type[0]->warna;
            } else {
                $jenis_grade = '<span class="badge bg-red"> ? </span>';
                $jenis_grade_warna = '';
            }

            $grade_status = '<span class="' . $jenis_grade_warna . '">' . $jenis_grade . '</sapan>';

            $data[] = array(
                $no . ". ",
                date("d-m-Y", strtotime($r->date_of_joining)),
                $r->employee_id,
                $full_name,
                $department_name,
                $workstation_name,
                $designation_name,
                $emp_status,
                $emp_status_name,
                $rolemp_status,
                $grade_status,
            );

            $no++;
        }
        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    // ========================================================================
    // 12.7.2 DETAIL GAJI HARIAN - PER PERIODE
    // ========================================================================

    public function gaji_harian_periode()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']          = 'Detail Gaji Harian Periode | ' . $this->Core_model->site_title();
        $data['icon']           = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']    = 'Detail Gaji Harian Periode';
        $data['desc']           = 'LAPORAN : Detail Gaji Harian Periode (2 Mingguan) ';
        $data['path_url']       = 'report_gaji_harian_periode';

        $data['all_companies']  = $this->Company_model->get_company();
        $data['all_bulan_gaji'] = $this->Core_model->all_bulan_gaji();

        $role_resources_ids     = $this->Core_model->user_role_resource();
        if (in_array('1372', $role_resources_ids)) {
            if (!empty($session)) {
                $data['subview'] = $this->load->view("admin/reports/gaji_harian_periode", $data, TRUE);
                $this->load->view('admin/layout/layout_main', $data); //page load
            } else {
                redirect('admin/');
            }
        } else {
            redirect('admin/dashboard');
        }
    }

    // payslip > employees
    public function gaji_harian_periode_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_harian_periode", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $company_id = $this->input->get("company_id");
        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $role_resources_ids = $this->Core_model->user_role_resource();

        $payslip = $this->Payroll_model->get_comp_template_harian_company($company_id, $start_date, $end_date);

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($payslip->result() as $r) {

            // ====================================================================================================================
            // DATA KARYAWAN
            // ====================================================================================================================
            // $month_payment = date("F, Y", strtotime($r->start_date));
            // Karyawan ID
            $emp_id = $r->employee_id;

            $user_info = $this->Core_model->read_user_info($emp_id);
            $emp_nik   = $user_info[0]->employee_id;
            $full_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;

            // ====================================================================================================================
            // DATA KARYAWAN
            // ====================================================================================================================

            // grade
            $grade_type = $this->Core_model->read_user_jenis_grade($user_info[0]->grade_type);

            if (!is_null($grade_type)) {
                $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                $jenis_grade_warna = $grade_type[0]->warna;
            } else {
                $jenis_grade       = '<span class="badge bg-red"> ? </span>';
                $jenis_grade_warna = '';
            }

            $cek_karyawan_status = $user_info[0]->emp_status;

            if ($cek_karyawan_status != '') {
                $karyawan_status     = $cek_karyawan_status;
            } else {
                $karyawan_status     = '<span class="badge bg-red"> ? </span>';
            }

            // Karyawan Departemen
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '<span class="badge bg-red"> ? </span>';
            }

            // Karyawan Posisi
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '<span class="badge bg-red"> ? </span>';
            }

            // Karyawan Masa kerja
            date_default_timezone_set("Asia/Jakarta");

            $doj = $r->doj;

            $tanggal1 = new DateTime($r->doj);
            $tanggal2 = new DateTime();

            if ($tanggal2->diff($tanggal1)->y == 0) {
                $selisih = $tanggal2->diff($tanggal1)->m . ' bln';
            } else {
                $selisih = $tanggal2->diff($tanggal1)->y . ' thn' . ' ' . $tanggal2->diff($tanggal1)->m . ' bln';
            }

            // Karyawan Status
            $emp_status =  $this->Employees_model->read_employee_contract_information2($r->employee_id);
            if (!is_null($emp_status)) {
                $emp_status_name = $emp_status[0]->name_type;
            } else {
                if ($cek_karyawan_status == 'Tetap') {
                    $emp_status_name = '-';
                } else {
                    $emp_status_name = '<span class="badge bg-red"> ? </span>';
                }
            }


            $data[] = array(
                $no,
                $start_date . ' s/d ' . $end_date,
                $emp_nik,
                $full_name,
                $department_name,
                $designation_name,
                $doj,
                $selisih,
                $cek_karyawan_status,
                $emp_status_name,
                $jenis_grade,
                // 12
                number_format($r->basic_salary, 0, ',', '.'),
                $r->jumlah_hadir,
                number_format($r->total_upah, 0, ',', '.'),
                // 16
                $r->jumlah_overtime,
                number_format($r->overtime_amount, 0, ',', '.'),

                number_format($r->commissions_amount, 0, ',', '.'),
                number_format($r->bpjs_kes_amount, 0, ',', '.'),
                number_format($r->bpjs_tk_amount, 0, ',', '.'),

                number_format($r->minus_amount, 0, ',', '.'),
                // 18
                number_format($r->net_salary, 0, ',', '.'),
                $r->rekening_name
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $payslip->num_rows(),
            "recordsFiltered" => $payslip->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function gaji_harian_periode_jumlah()
    {
        $company_id = $this->input->get('company_id');

        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $grouping = $this->Payroll_model->get_company_payslip_periode_jumlah($company_id, $start_date, $end_date);
        if (!is_null($grouping)) {
            $jumlah_karyawan = $grouping[0]->jumlah;
        } else {
            $jumlah_karyawan = '';
        }

        // company
        $company = $this->Company_model->read_company_information($company_id);
        if (!is_null($company)) {
            $company_name = $company[0]->name;
        } else {
            $company_name = '--';
        }

        $sql = 'SELECT sum(net_salary) as jumlah_gaji
                            FROM view_salary_harian
                            WHERE company_id = "' . $company_id . '" AND start_date = "' . $start_date . '" AND end_date = "' . $end_date . '"
                             ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $response['val'][] = array(
                    'start_date'     => date("d-m-Y", strtotime($start_date)),
                    'end_date'       => date("d-m-Y", strtotime($end_date)),

                    'company_name'    => $company_name,
                    'jumlah_karyawan' => $jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    public function export_harian_periode()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_harian_periode", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');

        $periode_id = $this->input->post("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }


        // $bulan_gaji = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji   = 'Periode ';

        $cek_tanggal_gaji   = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);

        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $designation = $this->Payroll_model->get_employee_by_designation_company_harian_group($company_id, $start_date, $end_date);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        if (count($designation) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:U1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:U2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:U3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "DETAIL HARIAN PERIODE");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object

            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:U5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:U6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );


            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('B5:U5000')->getAlignment()->setWrapText(true);

            // Kanan
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("I7:I2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("J7:J2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("K7:K2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("L7:L2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("M7:M2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("N7:N2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("O7:O2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("P7:P2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("Q7:Q2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("R7:R2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));

            // $objPHPExcel->getActiveSheet()->getStyle('Q7:Q2560')->getNumberFormat()->setFormatCode( PHPExcel_Style_NumberFormat::FORMAT_TEXT );

            $objPHPExcel->getActiveSheet()->getStyle('S7:S2560')->getNumberFormat()->setFormatCode('0');

            $objPHPExcel->getActiveSheet()->getStyle('S7:S2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('T7:T2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('U7:U2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('I5:I6');
            $objPHPExcel->getActiveSheet()->getStyle('I5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('J5:J6');
            $objPHPExcel->getActiveSheet()->getStyle('J5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('K5:K6');
            $objPHPExcel->getActiveSheet()->getStyle('K5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('L5:L6');
            $objPHPExcel->getActiveSheet()->getStyle('L5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('M5:M6');
            $objPHPExcel->getActiveSheet()->getStyle('M5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('N5:N6');
            $objPHPExcel->getActiveSheet()->getStyle('N5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('O5:O6');
            $objPHPExcel->getActiveSheet()->getStyle('O5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('P5:P6');
            $objPHPExcel->getActiveSheet()->getStyle('P5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('Q5:Q6');
            $objPHPExcel->getActiveSheet()->getStyle('Q5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('R5:R6');
            $objPHPExcel->getActiveSheet()->getStyle('R5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('S5:S6');
            $objPHPExcel->getActiveSheet()->getStyle('S5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('T5:T6');
            $objPHPExcel->getActiveSheet()->getStyle('T5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('U5:U6');
            $objPHPExcel->getActiveSheet()->getStyle('U5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U");

            $val = array("No", "Nama", 'Jabatan', "Status", "Grade", "Tanggal Kerja", "Masa Kerja", "Gaji Pokok", "Kehadiran", "Total Gaji", "Jam Lembur", "Total Lembur", "Total Insentif", "Total Potong", "Total BPJS Kes", "Total BPJS TK", "Gaji Diterima", "No.Rekening", "Nama Bank", "Email");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );

            for ($a = 0; $a < 20; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // 1.No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(45); // 2.Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(35); // 3.Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(10); // 4.Status
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(10); // 5.Grade
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(12); // 6.Tanggal
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(12); // 7.Masa Kerja

                $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(15); // 8.Gaji Pokok
                $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15); // 9.Jumlah Hadir
                $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(15); // 10.Total Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(15); // 11.Jumlah Jam Lembur
                $objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(15); // 12.Total Lembur
                $objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(15); // 13.Total Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('O')->setWidth(15); // 14.Total Potong
                $objPHPExcel->getActiveSheet()->getColumnDimension('P')->setWidth(15); // 14.Total BPJS KES
                $objPHPExcel->getActiveSheet()->getColumnDimension('Q')->setWidth(15); // 14.Total BPJS TK
                $objPHPExcel->getActiveSheet()->getColumnDimension('R')->setWidth(15); // 15.Total Gaji

                $objPHPExcel->getActiveSheet()->getColumnDimension('S')->setWidth(25); // 16.No Rek
                $objPHPExcel->getActiveSheet()->getColumnDimension('T')->setWidth(25); // 17.Bank Rek
                $objPHPExcel->getActiveSheet()->getColumnDimension('U')->setWidth(35); // 18.Email

                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $dep = 6;
            $baris = $dep + 1;

            foreach ($designation->result() as $d) {

                $grouping = $this->Employees_model->get_employee_by_designation_company_harian($d->company_id, $d->designation_id, $start_date, $end_date);
                if (!is_null($grouping)) {
                    $jumlah_karyawan = $grouping[0]->jumlah;
                } else {
                    $jumlah_karyawan = '0';
                }

                if ($jumlah_karyawan > 0) {

                    $departement_info = $this->Department_model->read_department_information($d->department_id);
                    if (!is_null($departement_info)) {
                        $departement_name = $departement_info[0]->department_name;
                    } else {
                        $departement_name = '';
                    }

                    // Karyawan Posisi
                    $designation_info = $this->Designation_model->read_designation_information($d->designation_id);
                    if (!is_null($designation)) {
                        $designation_name = $designation_info[0]->designation_name;
                    } else {
                        $designation_name = '';
                    }

                    // $objset->setCellValue("B".$baris, );
                    $objset->setCellValue("B" . ($baris + 1) . "", $departement_name . ' - ' . $designation_name . ', Jumlah  : ' . $jumlah_karyawan . ' Karyawan');

                    $objset->getStyle("B" . ($baris + 1) . ":U" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'B8CCE4')
                                ),

                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                ),

                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                )
                            )
                        );

                    $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":U" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'FCD5B4')
                                ),
                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )
                            )
                        );

                    $objset->mergeCells("B" . ($baris + 1) . ":U" . ($baris + 1) . "")
                        ->getStyle("B" . ($baris + 1) . ":U" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->getStyle("I" . ($jumlah_karyawan + $baris + 2) . ":R" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getNumberFormat()
                        ->setFormatCode("#,##0")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                                ),

                            )
                        );

                    $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Total ');

                    $objset->setCellValue("I" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(I" . ($baris + 2) . ":I" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("J" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(J" . ($baris + 2) . ":J" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("K" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(K" . ($baris + 2) . ":K" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("L" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(L" . ($baris + 2) . ":L" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("M" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(M" . ($baris + 2) . ":M" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("N" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(N" . ($baris + 2) . ":N" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("O" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(O" . ($baris + 2) . ":O" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("P" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(P" . ($baris + 2) . ":P" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("Q" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(Q" . ($baris + 2) . ":Q" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("R" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(R" . ($baris + 2) . ":R" . ($jumlah_karyawan + $baris + 1) . ")");

                    // $objset->setCellValue("B".($jumlah_karyawan+$baris+3)."", '');

                    $payslip = $this->Payroll_model->get_comp_template_harian_designation_lihat($d->company_id, 2, $start_date, $end_date, $d->designation_id);

                    $no = 1;
                    $baris =  $baris + 2;
                    foreach ($payslip->result() as $r) {

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        // Karyawan ID
                        $emp_id = $r->employee_id;

                        $user_info = $this->Core_model->read_user_info($emp_id);
                        $emp_nik   = $user_info[0]->employee_id;
                        $full_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;
                        $email     = $user_info[0]->email;

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        $rekening_name = $r->rekening_name;

                        $bank_name = $r->bank_name;

                        $cek_karyawan_status = $user_info[0]->emp_status;

                        if ($cek_karyawan_status != '') {
                            $karyawan_status     = $cek_karyawan_status;
                        } else {
                            $karyawan_status     = '';
                        }

                        // Karyawan Departemen
                        $department = $this->Department_model->read_department_information($r->department_id);
                        if (!is_null($department)) {
                            $department_name = $department[0]->department_name;
                        } else {
                            $department_name = '';
                        }

                        // Karyawan Posisi
                        $designation = $this->Designation_model->read_designation_information($r->designation_id);
                        if (!is_null($designation)) {
                            $designation_name = $designation[0]->designation_name;
                        } else {
                            $designation_name = '';
                        }

                        $jabatan = $designation_name;

                        // Karyawan Masa kerja
                        date_default_timezone_set("Asia/Jakarta");

                        $doj = $r->doj;

                        $tanggal1 = new DateTime($r->doj);
                        $tanggal2 = new DateTime();

                        if ($tanggal2->diff($tanggal1)->y == 0) {
                            $selisih = $tanggal2->diff($tanggal1)->m . ' bln';
                        } else {
                            $selisih = $tanggal2->diff($tanggal1)->y . ' thn' . ' ' . $tanggal2->diff($tanggal1)->m . ' bln';
                        }

                        $cek_karyawan_status = $user_info[0]->emp_status;

                        // Karyawan Status
                        $emp_status =  $this->Employees_model->read_employee_contract_information2($r->employee_id);
                        if (!is_null($emp_status)) {
                            $emp_status_name = $emp_status[0]->name_type;
                        } else {
                            if ($cek_karyawan_status == 'Tetap') {
                                $emp_status_name = 'Tetap';
                            } else {
                                $emp_status_name = '';
                            }
                        }

                        // grade
                        $grade_type = $this->Core_model->read_user_jenis_grade($user_info[0]->grade_type);

                        if (!is_null($grade_type)) {
                            $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                            $jenis_grade_warna = $grade_type[0]->warna;
                        } else {
                            $jenis_grade       = '';
                            $jenis_grade_warna = '';
                        }


                        //pemanggilan sesuaikan dengan nama kolom tabel
                        $objset->setCellValue("B" . $baris, $no);                         // 2.No
                        $objset->setCellValue("C" . $baris, $full_name);                 // 3.Nama Karyawan
                        $objset->setCellValue("D" . $baris, $jabatan);                     // 4.Jabatan
                        $objset->setCellValue("E" . $baris, $emp_status_name);             // 5.Status
                        $objset->setCellValue("F" . $baris, $jenis_grade);                 // 6.Grade
                        $objset->setCellValue("G" . $baris, $doj);                         // 7.Tanggal Mulai Kerja
                        $objset->setCellValue("H" . $baris, $selisih);                     // 8.Masa Kerja

                        $objset->setCellValue("I" . $baris, $r->basic_salary);             // 9.Gaji Pokok
                        $objset->setCellValue("J" . $baris, $r->jumlah_hadir);             // 10.Jumlah Hadir
                        $objset->setCellValue("K" . $baris, $r->total_upah);             // 11.Total Gaji
                        $objset->setCellValue("L" . $baris, $r->jumlah_overtime);         // 12.Jumlah Jam Lembur
                        $objset->setCellValue("M" . $baris, $r->overtime_amount);         // 13.Total Lembur
                        $objset->setCellValue("N" . $baris, $r->commissions_amount);     // 14.Total Insentif
                        $objset->setCellValue("O" . $baris, $r->minus_amount);             // 15.Total Potong
                        $objset->setCellValue("P" . $baris, $r->bpjs_kes_amount);         // 16.Total BPJS KES
                        $objset->setCellValue("Q" . $baris, $r->bpjs_tk_amount);         // 17.Total BPJS TK
                        $objset->setCellValue("R" . $baris, $r->net_salary);            // 18.Total Gaji

                        $objset->setCellValue("S" . $baris, "'" . $rekening_name);            // 19.Rekening No
                        $objset->setCellValue("T" . $baris, $bank_name);                // 20.Bank Name
                        $objset->setCellValue("U" . $baris, $email);                    // 21.Email


                        $no++;
                        $baris++;
                    }

                    $dep++;
                }
            }

            $total_emp = $this->Employees_model->get_employee_by_company_harian($d->company_id, $start_date, $end_date);

            if (!is_null($total_emp)) {
                $total_karyawan = $total_emp[0]->jumlah;
            } else {
                $total_karyawan = '';
            }

            $objset->setCellValue("B" . ($baris + 1) . "", 'Grand Total ' . $total_karyawan . ' Karyawan');

            $objset->getStyle("B" . ($baris + 1) . ":U" . ($baris + 1) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'FFC000')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($baris + 1) . ":H" . ($baris + 1) . "")
                ->getStyle("B" . ($baris + 1) . ":H" . ($baris + 1) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->getStyle("I" . ($baris + 1) . ":R" . ($baris + 1) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );

            $grand_total = $this->Payroll_model->get_comp_template_harian_lihat($d->company_id, 2, $start_date, $end_date);

            foreach ($grand_total->result() as $g) {
                $objset->setCellValue("I" . ($baris + 1) . "", $g->ga_pok);
                $objset->setCellValue("J" . ($baris + 1) . "", $g->jumlah_hadir);
                $objset->setCellValue("K" . ($baris + 1) . "", $g->total_upah);
                $objset->setCellValue("L" . ($baris + 1) . "", $g->jumlah_jam_lembur);
                $objset->setCellValue("M" . ($baris + 1) . "", $g->total_lembur);
                $objset->setCellValue("N" . ($baris + 1) . "", $g->total_insentif);
                $objset->setCellValue("O" . ($baris + 1) . "", $g->total_potong);
                $objset->setCellValue("P" . ($baris + 1) . "", $g->total_bpjs_kes_amount);
                $objset->setCellValue("Q" . ($baris + 1) . "", $g->total_bpjs_tk_amount);
                $objset->setCellValue("R" . ($baris + 1) . "", $g->net_salary);
            }

            $objset->setCellValue("B" . ($baris + 3) . "", "*. Silahkan hapus tanda petik (') di kolom No Rekening.");

            $objset->mergeCells("B" . ($baris + 3) . ":U" . ($baris + 3) . "")
                ->getStyle("B" . ($baris + 3) . ":U" . ($baris + 3) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Detail Harian Periode');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Detail Harian Periode ' . $company_name . ' - ' . $cek_tanggal_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ========================================================================
    // 12.7.3 REKAP GAJI HARIAN - PERIODE
    // ========================================================================

    public function gaji_harian_periode_rekap()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']          = 'Rekap Gaji Harian Periode | ' . $this->Core_model->site_title();
        $data['icon']           = '<i class="fa fa-print"></i>';
        $data['desc']           = 'LAPORAN : Rekap Gaji Harian - Periode';
        $data['breadcrumbs']    = 'Rekap Gaji Harian Periode';
        $data['path_url']       = 'report_gaji_harian_periode_rekap';

        $data['all_companies']  = $this->Company_model->get_company();
        $data['all_bulan_gaji'] = $this->Core_model->all_bulan_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1373', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/gaji_harian_periode_rekap", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function gaji_harian_periode_rekap_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_harian_periode_rekap", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $company_id = $this->input->get("company_id");
        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        // $history = $this->Payroll_model->cek_jumlah_gaji($this->input->get("company_id"),$start_date,$end_date);

        $history = $this->Payroll_model->get_company_payslip($company_id, $start_date, $end_date);

        // echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {

            // get addd by > template
            $user = $this->Core_model->read_user_info($r->employee_id);
            // user full name
            $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;

            $month_payment = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

            $employee_name = strtoupper($full_name);

            // get workstation
            $workstation = $this->Core_model->read_workstation_info($r->workstation_id);
            if (!is_null($workstation)) {
                $workstation_name = $workstation[0]->workstation_name;
            } else {
                $workstation_name = '--';
            }

            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '--';
            }

            // designation
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '--';
            }

            $data[] = array(
                $no,
                // $month_payment,
                date("d-m-Y", strtotime($r->start_date)) . ' s/d ' . date("d-m-Y", strtotime($r->end_date)),
                $employee_name,
                strtoupper($department_name),
                strtoupper($workstation_name),
                strtoupper($designation_name),
                number_format($r->net_salary, 0, ',', '.'),
                $r->rekening_name,
                $r->bank_name,

            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function gaji_harian_rekap_jumlah()
    {
        $company_id = $this->input->get('company_id');
        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $sql = 'SELECT count(*) as jumlah_periode,  sum(jumlah) as jumlah_karyawan,  sum(net_salary) as jumlah_gaji
                            FROM view_salary_harian_jumlah
                            WHERE company_id = "' . $company_id . '" AND start_date >= "' . $start_date . '" AND end_date <= "' . $end_date . '" ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $response['val'][] = array(
                    'start_date'     => date("d-m-Y", strtotime($start_date)),
                    'end_date'       => date("d-m-Y", strtotime($end_date)),

                    'jumlah_periode' => $val->jumlah_periode,
                    'jumlah_karyawan' => $val->jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    public function export_gaji_harian_periode_rekap()
    {
        $data['title'] = $this->Core_model->site_title();
        $session       = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_harian_periode_rekap", $data);
        } else {
            redirect('admin/');
        }

        $company_id = $this->input->post('company');

        $periode_id = $this->input->post("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $cek_bulan_gaji   = 'Periode ';

        $cek_tanggal_gaji   = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);
        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);


        $workstation_list      = $this->Payroll_model->get_company_payslip_workstation($company_id, $start_date, $end_date);

        if (count($workstation_list) > 0) {


            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:K1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:K2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:K3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "REKAP GAJI HARIAN PERIODE");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object

            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:K5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:K6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            // $objPHPExcel->getActiveSheet()->getStyle('I7:I2560')->getNumberFormat()->setFormatCode('0');

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            $objPHPExcel->getActiveSheet()->getStyle('B5:K5000')->getAlignment()->setWrapText(true);

            // Kanan
            $objPHPExcel->getActiveSheet()->getStyle("H7:H2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);


            $objPHPExcel->getActiveSheet()->getStyle('I7:I2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);



            // $objPHPExcel->getActiveSheet()->getStyle('I7:I2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('J7:J2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('K7:K2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);


            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('I5:I6');
            $objPHPExcel->getActiveSheet()->getStyle('I5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            $objPHPExcel->getActiveSheet()->mergeCells('J5:J6');
            $objPHPExcel->getActiveSheet()->getStyle('J5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('K5:K6');
            $objPHPExcel->getActiveSheet()->getStyle('K5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H", "I", "J", "K");

            $val = array("No", "NIP", 'Nama', "Departemen", "Workstation", "Posisi", "Total Gaji", "No Rekening", "Bank", "Email");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );

            for ($a = 0; $a < 10; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // 1.No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(15); // 2.NIP
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(40); // 3.Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(30); // 4.Departemen
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(25); // 5.Workstation
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(45); // 6.Posisi
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(15); // 7.Total Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(25); // 8.No. Rekening
                $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15); // 9.Bank
                $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(50); // 10.Email


                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }

            $dep = 6;
            $baris = $dep + 1;

            foreach ($workstation_list->result() as $d) {

                $group_workstation = $this->Employees_model->get_employee_by_workstation_company_harian($d->company_id, $d->workstation_id, $start_date, $end_date);

                if (!is_null($group_workstation)) {
                    $jumlah_karyawan = $group_workstation[0]->jumlah_works;
                } else {
                    $jumlah_karyawan = '0';
                }

                // Karyawan Posisi
                $workstation_info = $this->Workstation_model->read_workstation_information($d->workstation_id);
                if (!is_null($workstation_info)) {
                    $workstation_name = $workstation_info[0]->workstation_name;
                } else {
                    $workstation_name = '';
                }

                // $objset->setCellValue("B".$baris, );
                $objset->setCellValue("B" . ($baris + 1) . "", 'Workstation : ' . $workstation_name . ', Jumlah  : ' . $jumlah_karyawan . ' Karyawan');

                $objset->getStyle("B" . ($baris + 1) . ":K" . ($baris + 1) . "")
                    ->applyFromArray(
                        array(
                            'fill' => array(
                                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                'color' => array('rgb' => 'B8CCE4')
                            ),
                            'borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )
                        )
                    );

                $objset->mergeCells("B" . ($baris + 1) . ":K" . ($baris + 1) . "")
                    ->getStyle("B" . ($baris + 1) . ":K" . ($baris + 1) . "")
                    ->applyFromArray(
                        array(

                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )

                        )
                    );

                if ($jumlah_karyawan > 0) {



                    $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Total ');

                    $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":K" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'FCD5B4')
                                ),
                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )
                            )
                        );


                    $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":G" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":G" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->getStyle("H" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getNumberFormat()
                        ->setFormatCode("#,##0")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                                ),

                            )
                        );



                    $objset->setCellValue("H" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(H" . ($baris + 2) . ":H" . ($jumlah_karyawan + $baris + 1) . ")");

                    // $objset->setCellValue("B".($jumlah_karyawan+$baris+3)."", '');

                    $payslip = $this->Payroll_model->get_comp_template_harian_workstation_lihat($d->company_id, $start_date, $end_date, $d->workstation_id);

                    $no    = 1;

                    $baris =  $baris + 2;

                    foreach ($payslip->result() as $r) {

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        // Karyawan ID
                        $emp_id = $r->employee_id;

                        $user_info     = $this->Core_model->read_user_info($emp_id);
                        $employee_id   = $user_info[0]->employee_id;
                        $employee_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;


                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
                        if (!is_null($rekening)) {
                            $rekening_name = $rekening[0]->account_number;
                            $bank_name     = $rekening[0]->bank_name;
                        } else {
                            $rekening_name = '';
                            $bank_name = '--';
                        }
                        if ($bank_name == 'Bank BRI') {
                            $objPHPExcel->getActiveSheet()->getStyle("I" . $baris)->getNumberFormat()->setFormatCode('000000000000000');
                        } else {
                            $objPHPExcel->getActiveSheet()->getStyle("I" . $baris)->getNumberFormat()->setFormatCode('0000000000');
                        }

                        // $objPHPExcel ->getActiveSheet() ->getCellByColumnAndRow("I", $baris) ->setValueExplicit($value, PHPExcel_Cell_DataType::TYPE_STRING);

                        // Karyawan Departemen
                        $department = $this->Department_model->read_department_information($r->department_id);
                        if (!is_null($department)) {
                            $department_name = $department[0]->department_name;
                        } else {
                            $department_name = '';
                        }

                        // Karyawan Posisi
                        $designation = $this->Designation_model->read_designation_information($r->designation_id);
                        if (!is_null($designation)) {
                            $designation_name = $designation[0]->designation_name;
                        } else {
                            $designation_name = '';
                        }

                        // 		// get workstation
                        $workstation = $this->Core_model->read_workstation_info($d->workstation_id);
                        if (!is_null($workstation)) {
                            $workstation_name = $workstation[0]->workstation_name;
                        } else {
                            $workstation_name = '--';
                        }

                        //pemanggilan sesuaikan dengan nama kolom tabel
                        // $objset->setCellValue("A" . $baris, $no); 				  							// 0.
                        $objset->setCellValue("B" . $baris, $no);                                                 // 1.No
                        $objset->setCellValue("C" . $baris, $employee_id);                                         // 2.NIP
                        $objset->setCellValue("D" . $baris, $employee_name);                                     // 3.Nama Karyawan
                        $objset->setCellValue("E" . $baris, strtoupper($department_name));                         // 4.Departemen
                        $objset->setCellValue("F" . $baris, strtoupper($workstation_name));                     // 5.Workstation
                        $objset->setCellValue("G" . $baris, strtoupper($designation_name));                     // 6.Posisi
                        $objset->setCellValue("H" . $baris, round($r->net_salary, 0));                             // 7.Total Gaji
                        $objset->setCellValue("I" . $baris, "'" . $r->rekening_name);                                 // 8.No.Rekening
                        $objset->setCellValue("J" . $baris, $r->bank_name);                                     // 9.Bank
                        $objset->setCellValue("K" . $baris, $r->email);                                                 // 10.Email


                        $no++;
                        $baris++;
                    }

                    $dep++;
                }
            }

            $total_emp = $this->Employees_model->get_employee_by_company_harian_workstation($company_id, $start_date, $end_date);

            if (!is_null($total_emp)) {

                $total_karyawan = $total_emp[0]->jumlah_karyawan;
            } else {

                $total_karyawan = '0';
            }

            $objset->setCellValue("B" . ($baris + 1) . "", 'Grand Total ' . $total_karyawan . ' Karyawan');

            $objset->getStyle("B" . ($baris + 1) . ":K" . ($baris + 1) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'FFC000')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($baris + 1) . ":G" . ($baris + 1) . "")
                ->getStyle("B" . ($baris + 1) . ":G" . ($baris + 1) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );


            $objset->getStyle("H" . ($baris + 1) . ":H" . ($baris + 1) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );

            $grand_total = $this->Payroll_model->get_comp_template_harian_lihat_workstation($company_id, $start_date, $end_date);

            foreach ($grand_total->result() as $gt) {

                $objset->setCellValue("H" . ($baris + 1) . "", $gt->besar_gaji);
            }

            $objset->setCellValue("B" . ($baris + 3) . "", "*. Silahkan hapus tanda petik (') di kolom No Rekening.");

            $objset->mergeCells("B" . ($baris + 3) . ":G" . ($baris + 3) . "")
                ->getStyle("B" . ($baris + 3) . ":G" . ($baris + 3) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Rekap Gaji Harian Periode');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Rekap Gaji Harian Periode ' . $company_name . ' - ' . $cek_tanggal_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ========================================================================
    // 12.7.4 REKAP GAJI HARIAN - BULANAN
    // ========================================================================

    public function gaji_harian_bulanan()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Rekap Gaji Harian Bulanan | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['desc']          = 'LAPORAN : Rekap Gaji Harian Bulanan';
        $data['breadcrumbs']   = 'Rekap Gaji Harian Bulanan';
        $data['path_url']      = 'report_gaji_harian_bulanan';

        $data['all_companies'] = $this->Company_model->get_company();
        $data['all_bulan_gaji'] = $this->Core_model->all_bulan_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1373', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/gaji_harian_bulanan", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function gaji_harian_bulanan_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_harian_bulanan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $company_id = $this->input->get("company_id");
        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        // $history = $this->Payroll_model->cek_jumlah_gaji($this->input->get("company_id"),$start_date,$end_date);

        $history = $this->Payroll_model->get_company_payslip_perbulan($company_id, $start_date, $end_date);

        // echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {

            // get addd by > template
            $user = $this->Core_model->read_user_info($r->employee_id);
            // user full name
            $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;


            $employee_id = strtoupper($user[0]->employee_id);

            $employee_name = strtoupper($full_name);

            $jumlah_gaji = $this->Payroll_model->cek_jumlah_gaji($r->employee_id, $start_date, $end_date);
            if (!is_null($jumlah_gaji)) {
                $gaji_karyawan = $jumlah_gaji[0]->jumlah;
            } else {
                $gaji_karyawan = '';
            }


            if ($r->employee_id == '') {
                $ol = '<span class="blink blink-one"> 0  </span>';
            } else {
                $ol = '<ol style="margin-bottom: 0px !important;">';
                $employee = $this->Payroll_model->read_employee_kerja($r->employee_id, $start_date, $end_date);
                foreach ($employee->result() as $e) {
                    if (!is_null($employee)) {
                        $designation = $this->Designation_model->read_designation_information($e->designation_id);
                        if (!is_null($designation)) {
                            $designation_name = $designation[0]->designation_name;
                        } else {
                            $designation_name = '--';
                        }
                        $department = $this->Department_model->read_department_information($e->department_id);
                        if (!is_null($department)) {
                            $department_name = $department[0]->department_name;
                        } else {
                            $department_name = '--';
                        }
                        $ol .= '<li>' . date("d-m-Y", strtotime($e->start_date)) . ' s/d ' . date("d-m-Y", strtotime($e->end_date)) . ' (' . number_format($e->net_salary, 0, ',', '.') . ' - ' . $designation_name . ' - ' . $department_name . ') </li>';
                    } else {
                        $ol .= '--';
                    }
                }
                $ol .= '</ol>';
            }

            $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
            if (!is_null($rekening)) {
                $rekening_name = $rekening[0]->account_number;
                $bank_name = $rekening[0]->bank_name;
            } else {
                $rekening_name = '';
                $bank_name = '--';
            }

            $data[] = array(
                $no,
                $employee_id,
                $employee_name,
                number_format($gaji_karyawan, 0, ',', '.'),
                $rekening_name,
                $bank_name,
                $ol

            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function gaji_harian_bulanan_jumlah()
    {
        $company_id = $this->input->get('company_id');
        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $grouping = $this->Payroll_model->get_company_payslip_perbulan_jumlah($company_id, $start_date, $end_date);
        if (!is_null($grouping)) {
            $jumlah_karyawan = $grouping[0]->jumlah;
        } else {
            $jumlah_karyawan = '';
        }

        // company
        $company = $this->Company_model->read_company_information($company_id);
        if (!is_null($company)) {
            $company_name = $company[0]->name;
        } else {
            $company_name = '--';
        }

        $sql = 'SELECT sum(net_salary) as jumlah_gaji
                            FROM xin_salary_payslips_harian
                            WHERE company_id = "' . $company_id . '" AND start_date >= "' . $start_date . '" AND end_date <= "' . $end_date . '" ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $response['val'][] = array(
                    'start_date'     => date("d-m-Y", strtotime($start_date)),
                    'end_date'       => date("d-m-Y", strtotime($end_date)),

                    'company_name'    => $company_name,
                    'jumlah_karyawan' => $jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    public function export_harian_bulanan()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_harian_bulanan", $data);
        } else {
            redirect('admin/');
        }

        $company_id = $this->input->post('company');

        $periode_id = $this->input->post("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $cek_bulan_gaji   = 'Periode ';

        $cek_tanggal_gaji   = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);
        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $employee_list = $this->Payroll_model->get_company_payslip_perbulan($company_id, $start_date, $end_date);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        // echo "<pre>";
        // print_r($employee_list);
        // echo "</pre>";
        // die();

        if (count($employee_list) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:H1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:H2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:H3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "REKAP GAJI HARIAN BULANAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object

            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:H5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:H6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getNumberFormat()->setFormatCode('0');

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('B5:H5000')->getAlignment()->setWrapText(true);

            $objPHPExcel->getActiveSheet()->getStyle("E7:E2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));

            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            // $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setWrapText(true);
            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H");

            $val = array("No", "NIP", 'Nama', "Total Gaji", "No Rekening", "Bank", "Keterangan Periode (2 mingguan)");

            $style = array(
                'alignment' => array(
                    'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
                )
            );

            for ($a = 0; $a < 7; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // 1.No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(15); // 2.NIP
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(35); // 3.Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15); // 4.Total Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(25); // 5.No. Rekening
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(15); // 6.Bank
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(80); // 7.Keterangan


                $style = array(
                    'alignment' => array(
                        'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $no     = 1;
            $baris = $no + 6;
            foreach ($employee_list->result() as $r) {

                // get addd by > template
                $user = $this->Core_model->read_user_info($r->employee_id);
                // user full name
                $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;

                $month_payment = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

                $employee_id = strtoupper($user[0]->employee_id);

                $employee_name = strtoupper($full_name);

                $jumlah_gaji = $this->Payroll_model->cek_jumlah_gaji($r->employee_id, $start_date, $end_date);
                if (!is_null($jumlah_gaji)) {
                    $gaji_karyawan = $jumlah_gaji[0]->jumlah;
                } else {
                    $gaji_karyawan = '';
                }

                if ($r->employee_id == '') {
                    $ol = '';
                } else {
                    $ol = "\n";
                    $employee = $this->Payroll_model->read_employee_kerja($r->employee_id, $start_date, $end_date);
                    foreach ($employee->result() as $e) {
                        if (!is_null($employee)) {
                            $designation = $this->Designation_model->read_designation_information($e->designation_id);
                            if (!is_null($designation)) {
                                $designation_name = $designation[0]->designation_name;
                            } else {
                                $designation_name = '--';
                            }
                            $department = $this->Department_model->read_department_information($e->department_id);
                            if (!is_null($department)) {
                                $department_name = $department[0]->department_name;
                            } else {
                                $department_name = '--';
                            }
                            $ol .= date("d-m-Y", strtotime($e->start_date)) . ' s/d ' . date("d-m-Y", strtotime($e->end_date)) . ' (' . number_format($e->net_salary, 0, ',', '.') . ' - ' . $designation_name . ' - ' . $department_name . ') ' . '' . "\n";
                        } else {
                            $ol .= '--';
                        }
                    }
                    $ol .= '';
                }

                $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
                if (!is_null($rekening)) {
                    $rekening_name = $rekening[0]->account_number;
                    $bank_name = $rekening[0]->bank_name;
                } else {
                    $rekening_name = '';
                    $bank_name = '--';
                }

                //pemanggilan sesuaikan dengan nama kolom tabel
                // $objset->setCellValue("B" . $baris, $no); 				  	// 0.//
                $objset->setCellValue("B" . $baris, $no);                         // 1.No
                $objset->setCellValue("C" . $baris, $employee_id);                 // 2.NIP
                $objset->setCellValue("D" . $baris, $employee_name);             // 3.Nama Karyawan

                $objset->setCellValue("E" . $baris, round($gaji_karyawan, 0));     // 4.Total Gaji
                $objset->setCellValue("F" . $baris, $rekening_name);         // 5.No.Rekening
                $objset->setCellValue("G" . $baris, $bank_name);             // 6.Bank
                $objset->setCellValue("H" . $baris, $ol);                         // 7.Keterangan

                $no++;
                $baris++;
            }

            $jumlah_karyawan = count($employee_list->result());

            $objset->setCellValue("B" . ($jumlah_karyawan + 8) . "", 'Total ');

            $objset->getStyle("B" . ($jumlah_karyawan + 8) . ":H" . ($jumlah_karyawan + 8) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'FCD5B4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($jumlah_karyawan + 8) . ":D" . ($jumlah_karyawan + 8) . "")
                ->getStyle("B" . ($jumlah_karyawan + 8) . ":D" . ($jumlah_karyawan + 8) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->setCellValue("E" . ($jumlah_karyawan + 8) . "", "=SUM(E" . (7) . ":E" . ($jumlah_karyawan + 8 - 2) . ")");

            $objset->getStyle("E" . ($jumlah_karyawan + 8) . ":E" . ($jumlah_karyawan + 8 - 2) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );



            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Rekap Gaji Harian - Per Bulan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Rekap Gaji Harian - Per Bulan ' . $company_name . ' - ' . $cek_tanggal_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ========================================================================
    // 12.7.5 RESUME GAJI HARIAN - BULANAN
    // ========================================================================

    public function gaji_harian_resume()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Resume Gaji Harian | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['desc']          = 'LAPORAN : Resume Gaji Harian Bulanan';
        $data['breadcrumbs']   = 'Resume Gaji Harian';
        $data['path_url']      = 'report_gaji_harian_resume';

        $data['all_companies'] = $this->Company_model->get_company();
        $data['all_bulan_gaji']    = $this->Core_model->all_bulan_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1375', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/gaji_harian_resume", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function gaji_harian_resume_bulanan_list()
    {
       
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_harian_resume", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $company_id = $this->input->get("company_id");
        $p_date = $this->input->get("month_year");

        
        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Timesheet_model->get_bulan_periode_resume($p_date);

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {

            $bulan_gaji         = $this->Payroll_model->check_bulan_gaji($r->month_payroll);
            $cek_bulan_gaji     = $bulan_gaji[0]->desc;

            $daftar_perusahaan = '';

            $sql_perusahaan = " SELECT *
                                    FROM
                                         xin_companies
                                    ORDER BY company_id ASC";

            // echo "<pre>";
            // print_r( $sql_perusahaan );
            // echo "</pre>";
            // die;

            $query_perusahaan = $this->db->query($sql_perusahaan);

            if ($query_perusahaan->num_rows() > 0) {
                $daftar_perusahaan = '<table class="datatables-demo table table-striped table-bordered" id="xin_table">
                                        <thead>
                                          <tr>
                                            <th class="text-center" width="50px">No.</th>
                                            <th class="text-center" > Perusahaan </th>
                                            <th class="text-center" > Periode Kerja Harian </th>

                                          </tr>
                                        </thead>
                                        <tbody>';
                $no = 1;

                foreach ($query_perusahaan->result() as $row_perusahaan) :
                 
                    $name    = strtoupper($row_perusahaan->name);

                    $daftar_periode_harian = '';

                    $query_periode_harian = $this->Core_model->total_gaji_harian($r->month_payroll,$row_perusahaan->company_id);

                    if ($query_periode_harian->num_rows() > 0) {
                        $daftar_periode_harian = '<table class="datatables-demo table table-striped table-bordered" id="xin_table">
                                                            <thead>
                                                              <tr>
                                                                <th class="text-center" width="50px">No.</th>
                                                                <th class="text-center" > Tanggal Mulai </th>
                                                                <th class="text-center" > Tanggal Sampai </th>
                                                                <th class="text-center" > Durasi </th>
                                                                <th class="text-center" > Karyawan</th>
                                                                <th class="text-center" > Jumlah Gaji </th>
                                                                <th class="text-center" > Status </th>
                                                              </tr>
                                                            </thead>
                                                            <tbody>';
                        $mo = 1;
                        $Total_gaji = 0;
                        $Total_karyawan = 0;
                        foreach ($query_periode_harian->result() as $row_periode_harian) :

                            $d_start_date    = new DateTime($row_periode_harian->start_date);
                            $d_end_date      = new DateTime($row_periode_harian->end_date);
                            $interval_date   = $d_start_date->diff($d_end_date)->d + 1;

                            $jum_gaji          = number_format($row_periode_harian->jumlah_gaji, 0, ',', '.');

                            $jum_karyawan      = number_format($row_periode_harian->jumlah_karyawan, 0, ',', '.');



                            $daftar_periode_harian = $daftar_periode_harian . '
                                                                        <tr >
                                                                            <td width="2%" align="center">' . $mo . '.</td>

                                                                            <td width="10%" align="center">
                                                                             ' . date("d-m-Y", strtotime($row_periode_harian->start_date)) . '
                                                                            </td>

                                                                            <td width="10%" align="center">
                                                                              ' . date("d-m-Y", strtotime($row_periode_harian->end_date)) . '
                                                                            </td>

                                                                            <td width="10%" align="center">
                                                                             ' . $interval_date . ' hari
                                                                            </td>

                                                                            <td width="10%" align="center">
                                                                             ' . $jum_karyawan . '
                                                                            </td>

                                                                            <td width="15%" align="right">
                                                                             ' . $jum_gaji . '
                                                                            </td>

                                                                            <td  align="left">
                                                                            &nbsp; <span class="label label-success">' . $this->lang->line('xin_payroll_paid') . '</span>
                                                                            </td>

                                                                        </tr>';
                            $mo++;

                            $Total_karyawan += $row_periode_harian->jumlah_karyawan;

                            $Total_gaji     += $row_periode_harian->jumlah_gaji;

                        endforeach;

                        $daftar_periode_harian = $daftar_periode_harian . '
                                                                        <tr style="background-color: #f5f7fa !important;">

                                                                            <td colspan ="4" width="2%" align="right">
                                                                                <b>Grand Total &nbsp;</b>
                                                                            </td>

                                                                            <td width="10%" align="center">
                                                                              <span class="blink blink-one">' . number_format($Total_karyawan, 0, ',', '.') . '</span>
                                                                            </td>

                                                                            <td width="10%" align="right">
                                                                              <span class="blink blink-one">' . number_format($Total_gaji, 0, ',', '.') . '</span>
                                                                            </td>

                                                                            <td  align="left">

                                                                            </td>

                                                                        </tr>';

                        $daftar_periode_harian = $daftar_periode_harian . '
                                                            </tbody>
                                                            </table>';
                    } else {
                        $daftar_periode_harian = '<div class="warning-msg" style="padding:5px;">
                                                                <i class ="fa fa-question-circle"></i> Tidak Ada Data Periode Kerja Harian
                                                             </div>';
                    }


                    $daftar_perusahaan = $daftar_perusahaan . '
                                                    <tr >
                                                        <td width="2%" align="center">' . $no . '.</td>

                                                        <td width="20%" align="left">
                                                         ' . $name . '
                                                        </td>

                                                        <td  >
                                                          ' . $daftar_periode_harian . '
                                                        </td>


                                                    </tr>';
                    $no++;



                endforeach;



                $daftar_perusahaan = $daftar_perusahaan . '
                                        </tbody>
                                        </table>';
            } else {
                $daftar_perusahaan = '<div class="warning-msg" style="padding:5px;">
                                            <i class ="fa fa-question-circle"></i> Tidak Ada Data Perusahaan
                                         </div>';
            }



            $data[] = array(
                $no . ". ",

                $cek_bulan_gaji,
                $daftar_perusahaan
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function gaji_harian_resume_gaji_bulanan_list_detail()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_harian_resume", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("tahun_gaji");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_payslip_history_year($this->input->get("company_id"), $this->input->get("tahun_gaji"));

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {
            $data[] = array(
                $no,

                date("F", strtotime($r->salary_month)),
                $r->jumlah,
                $this->Core_model->currency_sign($r->ga_pok),
                $this->Core_model->currency_sign($r->lembur),
                $this->Core_model->currency_sign($r->tj_jabatan),
                $this->Core_model->currency_sign($r->tj_produktifitas),
                $this->Core_model->currency_sign($r->tj_transportasi),
                $this->Core_model->currency_sign($r->tj_komunikasi),
                $this->Core_model->currency_sign($r->insentif),

                $this->Core_model->currency_sign($r->pph),
                $this->Core_model->currency_sign($r->pinjaman),
                $this->Core_model->currency_sign($r->bpjs_kes),
                $this->Core_model->currency_sign($r->bpjs_tk),
                $r->jum_alpa,
                $this->Core_model->currency_sign($r->potongan_alpa),
                $r->jum_izin,
                $this->Core_model->currency_sign($r->potongan_izin),

                $this->Core_model->currency_sign($r->net_salary),
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function export_gaji_harian_resume_bulanan()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_harian_resume", $data);
        } else {
            redirect('admin/');
        }

        $month_year   = $this->input->post('month_year');

        $bulan_gaji         = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji     = $bulan_gaji[0]->desc;
        $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji[0]->end_date));


        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);
        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $company_list = $this->Payroll_model->get_company_payslip_history_year_month($month_year);

        if (count($company_list) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:G1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:G2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:G3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", '');

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "RESUME PENGAJUAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object

            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:G5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:G6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle('I7:I2560')->getNumberFormat()->setFormatCode('0');

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            // $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            $objPHPExcel->getActiveSheet()->getStyle('B5:G5000')->getAlignment()->setWrapText(true);

            // Kanan
            $objPHPExcel->getActiveSheet()->getStyle("F7:F2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));


            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G");

            $val = array("No", "Nama Perusahaan", 'Bulan Gaji', "Jumlah Karyawan", "Total Gaji", "Keterangan");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );

            for ($a = 0; $a < 6; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // 1.No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(35); // 2.Nama Perusahan
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(15); // 3.Buln Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15); // 4.Jumlah Karyawan
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20); // 5.Total Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(50); // 6.Keterangan


                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $no     = 1;
            $baris = $no + 6;
            foreach ($company_list->result() as $r) {

                $company = $this->Core_model->read_company_info($r->company_id);
                if (!is_null($company)) {
                    $comp_name = $company[0]->name;
                } else {
                    $comp_name = '';
                }

                //pemanggilan sesuaikan dengan nama kolom tabel
                // $objset->setCellValue("B" . $baris, $no); 				// 0.
                $objset->setCellValue("B" . $baris, $no);                     // 1.No
                $objset->setCellValue("C" . $baris, $comp_name);             // 2.Nama Perusahaan
                $objset->setCellValue("D" . $baris, $cek_bulan_gaji);         // 3.Bulan Gaji
                $objset->setCellValue("E" . $baris, $r->jumlah);             // 4.Jumlah Karyawan
                $objset->setCellValue("F" . $baris, $r->net_salary);         // 7.Total Gaji
                $objset->setCellValue("G" . $baris, '');                     // 8.Keterangan

                $no++;
                $baris++;
            }

            $jumlah_pengajuan = count($company_list->result());

            $objset->setCellValue("B" . ($jumlah_pengajuan + 8) . "", 'Grand Total ');

            $objset->getStyle("B" . ($jumlah_pengajuan + 8) . ":G" . ($jumlah_pengajuan + 8) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'B8CCE4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($jumlah_pengajuan + 8) . ":E" . ($jumlah_pengajuan + 8) . "")
                ->getStyle("B" . ($jumlah_pengajuan + 8) . ":E" . ($jumlah_pengajuan + 8) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->setCellValue("F" . ($jumlah_pengajuan + 8) . "", "=SUM(F" . (7) . ":F" . ($jumlah_pengajuan + 8 - 2) . ")");

            $objset->getStyle("F" . ($jumlah_pengajuan + 8) . ":F" . ($jumlah_pengajuan + 8 - 2) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );

            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Resume Pengajuan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Resume Pengajuan Gaji Bulanan ' . $company_name . ' - ' . $cek_tanggal_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    public function gaji_harian_resume_bulanan_jumlah()
    {
        $bulan_gaji = $this->input->get('month_year');


        $sql = 'SELECT sum(jumlah_gaji) as jumlah FROM view_gaji_harian WHERE month_payroll = "' . $bulan_gaji . '" ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $bulan_gaji_cek     = $this->Payroll_model->check_bulan_gaji($bulan_gaji);
                $cek_bulan_gaji     = $bulan_gaji_cek[0]->desc;
                $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji_cek[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji_cek[0]->end_date));

                $response['val'][] = array(
                    'bulan_gaji'      => $cek_bulan_gaji,
                    'jumlah_karyawan' => 0,
                    'jumlah_gaji'      => number_format($val->jumlah, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    // ========================================================================
    // 12.7.6 SLIP GAJI HARIAN
    // ========================================================================

    public function gaji_harian_slip()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Slip Gaji Harian | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['desc']          = 'LAPORAN : Slip Gaji Haria';
        $data['breadcrumbs']   = 'Slip Gaji Harian';
        $data['path_url']      = 'report_gaji_harian_slip';

        $data['all_companies'] = $this->Company_model->get_company();
        $data['all_bulan_gaji'] = $this->Core_model->all_bulan_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1376', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/gaji_harian_slip", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function gaji_harian_slip_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_harian_slip", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $company_id = $this->input->get("company_id");
        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        // $history = $this->Payroll_model->cek_jumlah_gaji($this->input->get("company_id"),$start_date,$end_date);

        $history = $this->Payroll_model->get_company_payslip_perbulan($company_id, $start_date, $end_date);

        // echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {

            // get addd by > template
            $user = $this->Core_model->read_user_info($r->employee_id);
            // user full name
            $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;


            $employee_id = strtoupper($user[0]->employee_id);

            $employee_name = strtoupper($full_name);

            $jumlah_gaji = $this->Payroll_model->cek_jumlah_gaji($r->employee_id, $start_date, $end_date);
            if (!is_null($jumlah_gaji)) {
                $gaji_karyawan = $jumlah_gaji[0]->jumlah;
            } else {
                $gaji_karyawan = '';
            }


            if ($r->employee_id == '') {
                $ol = '<span class="blink blink-one"> 0  </span>';
            } else {
                $ol = '<ol style="margin-bottom: 0px !important;">';
                $employee = $this->Payroll_model->read_employee_kerja($r->employee_id, $start_date, $end_date);
                foreach ($employee->result() as $e) {
                    if (!is_null($employee)) {
                        $designation = $this->Designation_model->read_designation_information($e->designation_id);
                        if (!is_null($designation)) {
                            $designation_name = $designation[0]->designation_name;
                        } else {
                            $designation_name = '--';
                        }
                        $department = $this->Department_model->read_department_information($e->department_id);
                        if (!is_null($department)) {
                            $department_name = $department[0]->department_name;
                        } else {
                            $department_name = '--';
                        }
                        $ol .= '<li>' . date("d-m-Y", strtotime($e->start_date)) . ' s/d ' . date("d-m-Y", strtotime($e->end_date)) . ' (' . number_format($e->net_salary, 0, ',', '.') . ' - ' . $designation_name . ' - ' . $department_name . ') </li>';
                    } else {
                        $ol .= '--';
                    }
                }
                $ol .= '</ol>';
            }

            $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
            if (!is_null($rekening)) {
                $rekening_name = $rekening[0]->account_number;
                $bank_name = $rekening[0]->bank_name;
            } else {
                $rekening_name = '';
                $bank_name = '--';
            }

            $data[] = array(
                $no,
                $employee_id,
                $employee_name,
                number_format($gaji_karyawan, 0, ',', '.'),
                $rekening_name,
                $bank_name,
                $ol

            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function gaji_harian_slip_jumlah()
    {
        $company_id = $this->input->get("company_id");
        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $grouping = $this->Payroll_model->get_company_payslip_perbulan_jumlah($company_id, $start_date, $end_date);
        if (!is_null($grouping)) {
            $jumlah_karyawan = $grouping[0]->jumlah;
        } else {
            $jumlah_karyawan = '';
        }

        // company
        $company = $this->Company_model->read_company_information($company_id);
        if (!is_null($company)) {
            $company_name = $company[0]->name;
        } else {
            $company_name = '--';
        }

        $sql = 'SELECT sum(net_salary) as jumlah_gaji
                            FROM xin_salary_payslips_harian
                            WHERE company_id = "' . $company_id . '" AND start_date = "' . $start_date . '" AND end_date = "' . $end_date . '"
                             ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $response['val'][] = array(
                    'start_date'     => date("d-m-Y", strtotime($start_date)),
                    'end_date'       => date("d-m-Y", strtotime($end_date)),

                    'company_name'    => $company_name,
                    'jumlah_karyawan' => $jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    public function cetak_harian_bulanan_slip()
    {
        $system = $this->Core_model->read_setting_info(1);
        // create new PDF document
        $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

        // $key = $this->uri->segment(5);

        $company_id = $this->input->post('company');

        $periode_id = $this->input->post("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $month_payment = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        $pdf = new Pdf('P', 'mm', 'F4', true, 'UTF-8', false);

        // set document information
        $pdf->SetCreator('hris');
        $pdf->SetAuthor('Nizar Basyrewan');
        $pdf->SetTitle($this->lang->line('xin_print_payslip_harian') . ', Periode ' . $month_payment);
        $pdf->SetSubject($this->lang->line('xin_payslip'));
        $pdf->SetKeywords($this->lang->line('xin_payslip'));

        $pdf->setFooterData(array(0, 64, 0), array(0, 64, 128));

        // set header and footer fonts
        $pdf->setHeaderFont(array('arial', '', 8));
        $pdf->setFooterFont(array('helvetica', '', 8));

        // set default monospaced font
        $pdf->SetDefaultMonospacedFont('courier');

        // set margins
        $pdf->SetMargins(5, 7, 5);
        $pdf->SetHeaderMargin(5);
        $pdf->SetPrintHeader(false);
        $pdf->SetFooterMargin(5);

        // set auto page breaks
        $pdf->SetAutoPageBreak(TRUE, 25);

        // set image scale factor
        $pdf->setImageScale(1.25);

        // set font
        $pdf->SetFont('helvetica', 'B', 8);

        // set header and footer fonts
        $pdf->setHeaderFont(array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
        $pdf->setFooterFont(array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

        // set default monospaced font
        $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

        // set image scale factor
        $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

        // ---------------------------------------------------------

        // set default font subsetting mode
        $pdf->setFontSubsetting(true);

        // Set font
        // dejavusans is a UTF-8 Unicode font, if you only need to
        // print standard ASCII chars, you can use core fonts like
        // helvetica or times to reduce file size.
        $pdf->SetFont('dejavusans', '', 8, '', true);

        // Add a page
        // This method has several options, check the source code documentation for more information.
        $pdf->AddPage('P', 'F4');
        // -----------------------------------------------------------------------------

        $columns = 2;

        // disable existing columns
        $pdf->resetColumns();

        // determine column widths
        $column_width = round(12071 / $columns);

        // set columns
        $pdf->setEqualColumns($columns, $column_width);
        // $pdf->setEqualColumns(2,185);  // KEY PART -  number of cols and width
        // $pdf->selectColumn();

        $pdf->Ln(3);

        $employee_list = $this->Payroll_model->get_company_payslip_perbulan_cetak($company_id, $start_date, $end_date);

        if (count($employee_list) > 0) {
            $no = 1;
            foreach ($employee_list->result() as $r) {

                // get addd by > template
                $user = $this->Core_model->read_user_info($r->employee_id);
                // user full name
                $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;

                // get workstation
                $workstation = $this->Core_model->read_workstation_info($r->workstation_id);
                if (!is_null($workstation)) {
                    $workstation_name = $workstation[0]->workstation_name;
                } else {
                    $workstation_name = '--';
                }

                $jumlah_gaji = $this->Payroll_model->cek_jumlah_gaji($r->employee_id, $start_date, $end_date);
                if (!is_null($jumlah_gaji)) {
                    $gaji_karyawan = $jumlah_gaji[0]->jumlah;
                } else {
                    $gaji_karyawan = '';
                }

                $tbl1 = '
                                    <table border="1" cellpadding="1" cellspacing="0" width="180%" style="font-size:8px;" >

                                            <tr>
                                                <td width="45%;" >

                                                    <table border="0" cellpadding="1" cellspacing="0" width="100%" style="font-size:8px;" >

                                                        <tr >
                                                            <td width="25%;" colspan="3" > <strong>Nama</strong> </td>
                                                            <td width="75%;" >: ' . strtoupper($full_name) . '</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="25%;" colspan="3"> <strong>Divisi</strong> </td>
                                                            <td width="75%;" >: ' . strtoupper($workstation_name) . '</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="25%;" colspan="3"> <strong>Periode</strong> </td>
                                                            <td width="75%;" >: ' . $month_payment . '</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="25%;" colspan="3"> <strong>No.Rekening</strong> </td>
                                                            <td width="75%;" >: ' . $r->rekening_name . ' (' . $r->bank_name . ')</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="25%;" colspan="3"> <strong>No.Urut</strong> </td>
                                                            <td width="75%;" >: ' . $no . ' </td>
                                                        </tr>



                                                    </table>
                                                </td>
                                            </tr>

                                            <tr>
                                                <td width="45%;" valign="right">

                                                    <table border="1" cellpadding="1" cellspacing="0" width="100%" style="font-size:8px;" >

                                                        <tr>
                                                            <td width="65%;" colspan="2"> <strong>Gaji Pokok</strong> </td>
                                                            <td width="35%;" align="right" >' . number_format($r->basic_salary, 0, ',', '.') . ' &nbsp;&nbsp;&nbsp;</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="65%;" colspan="2"> <strong>Kehadiran</strong> </td>
                                                            <td width="35%;" align="right" > ' . number_format($r->jumlah_hadir, 1, ',', '.') . ' &nbsp;&nbsp;&nbsp;</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="65%;" colspan="2"> <strong>Lembur</strong> </td>
                                                            <td width="35%;" align="right"> ' . number_format($r->overtime_amount, 0, ',', '.') . ' &nbsp;&nbsp;&nbsp;</td>
                                                        </tr>

                                                        <tr>
                                                            <td align="middle" valign="middle" width="35%;" rowspan="2"> <strong>Revisi</strong> </td>
                                                            <td width="30%;" > <strong>Tambahan</strong> </td>
                                                            <td width="35%;" align="right"> ' . number_format($r->commissions_amount, 0, ',', '.') . ' &nbsp;&nbsp;&nbsp;</td>
                                                        </tr>

                                                        <tr>

                                                            <td width="30%;" > <strong>Potongan</strong> </td>
                                                            <td width="35%;" align="right"> ' . number_format($r->minus_amount, 0, ',', '.') . ' &nbsp;&nbsp;&nbsp;</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="65%;" colspan="2"> <strong>BPJS Kes</strong> </td>
                                                            <td width="35%;" align="right" > ' . number_format($r->bpjs_kes_amount, 0, ',', '.') . ' &nbsp;&nbsp;&nbsp;</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="65%;" colspan="2"> <strong>BPJS TK</strong> </td>
                                                            <td width="35%;" align="right"> ' . number_format($r->bpjs_tk_amount, 0, ',', '.') . ' &nbsp;&nbsp;&nbsp;</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="65%;" colspan="2" align="right"> Jumlah yang Diterima &nbsp;</td>
                                                            <td width="35%;" align="right"> ' . number_format($gaji_karyawan, 0, ',', '.') . ' &nbsp;&nbsp;&nbsp;</td>
                                                        </tr>

                                                    </table>
                                                </td>
                                            </tr>


                                    </table>';

                $pdf->writeHTML($tbl1, true, false, true, false, 'J');

                $no++;
            }
        }

        // $pdf->resetColumns();

        //// break..
        $pdf->Ln(2);

        // Close and output PDF document
        // This method has several options, check the source code documentation for more information.


        //Close and output PDF document
        ob_start();

        $pdf->Output('Slip_Gaji_Harian_Periode_' . $month_payment . '.pdf', 'I');
        ob_end_flush();
    }


    // ****************************************************************************
    // >>  13.8 BORONGAN
    // ****************************************************************************

    // ========================================================================
    // 13.8.1 KARYAWAN
    // ========================================================================

    public function karyawan_borongan()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']            = 'Karyawan Gaji Borongan ' . $this->Core_model->site_title();
        $data['icon']             = '<i class="fa fa-print"></i>';
        $data['desc']             = 'LAPORAN : Karyawan Gaji Borongan';
        $data['breadcrumbs']      = 'Karyawan Gaji Borongan';
        $data['path_url']         = 'reports_karyawan_borongan';

        $data['all_companies']    = $this->Company_model->get_company();;
        $data['all_departments']  = $this->Department_model->all_departments();
        $data['all_designations'] = $this->Designation_model->all_designations();

        $role_resources_ids       = $this->Core_model->user_role_resource();

        if (in_array('1381', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/karyawan_borongan", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function report_karyawan_borongan_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/karyawan_borongan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $company_id     = $this->uri->segment(4);
        $workstation_id = $this->uri->segment(5);
        $designation_id = $this->uri->segment(6);

        $employee = $this->Reports_model->get_karyawan_borongan_reports($company_id, $workstation_id, $designation_id);

        $data = array();
        $no = 1;
        foreach ($employee->result() as $r) {

            // user full name
            $full_name = $r->first_name . ' ' . $r->last_name;

            // get designation
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '<span class="badge bg-red"> ? </span>';
            }
            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '<span class="badge bg-red"> ? </span>';
            }

            // get workstation
            $workstation = $this->Core_model->read_designation_workstation_info($r->designation_id);
            if (!is_null($workstation)) {
                $workstation_name = $workstation[0]->workstation_name;
            } else {
                $workstation_name = '<span class="badge bg-red"> ? </span>';
            }


            if ($r->emp_status == '') {
                $emp_status = '<span class="badge bg-red"> ? </span>';
            } elseif ($r->emp_status == 'Tetap') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_tetap') . '</span>';
            } elseif ($r->emp_status == 'Kontrak') {
                $emp_status = '<span class="badge bg-yellow">' . $this->lang->line('xin_employee_status_kontrak') . '</span>';
            } elseif ($r->emp_status == 'Percobaan') {
                $emp_status = '<span class="badge bg-green">' . $this->lang->line('xin_employee_status_percobaan') . '</span>';
            }

            $cek_emp_status =  $this->Employees_model->read_employee_contract_information($r->user_id);
            if (!is_null($cek_emp_status)) {
                $emp_status_name = '<span class="badge bg-yellow">' . $cek_emp_status[0]->name_type . '</span>';
            } else {

                if ($r->emp_status == 'Tetap') {
                    $emp_status_name = '<span class="badge bg-green"> Tetap </span>';
                } else {
                    $emp_status_name = '<span class="badge bg-red"> ? </span>';
                }
            }

            // jenis gaji
            $wages_type = $this->Core_model->read_user_jenis_gaji($r->wages_type);
            // user full name
            if (!is_null($wages_type)) {
                $jenis_gaji       = $wages_type[0]->jenis_gaji_keterangan;
                $jenis_gaji_warna = $wages_type[0]->warna;
            } else {
                $jenis_gaji = '<span class="badge bg-red"> ? </span>';
                $jenis_gaji_warna = '';
            }

            $rolemp_status = '<span class="' . $jenis_gaji_warna . '">' . $jenis_gaji . '</sapan>';

            // grade
            $grade_type = $this->Core_model->read_user_jenis_grade($r->grade_type);
            // user full name
            if (!is_null($grade_type)) {
                $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                $jenis_grade_warna = $grade_type[0]->warna;
            } else {
                $jenis_grade = '<span class="badge bg-red"> ? </span>';
                $jenis_grade_warna = 'badge bg-red';
            }

            $grade_status = '<span class="' . $jenis_grade_warna . '">' . $jenis_grade . '</sapan>';

            $rekening = $this->Employees_model->get_employee_bank_account_last($r->user_id);
            if (!is_null($rekening)) {
                $rekening_name = $rekening[0]->account_number;
                $bank_name = $rekening[0]->bank_name;
            } else {
                $rekening_name = '<span class="badge bg-red"> ? </span>';
                $bank_name = '<span class="badge bg-red"> ? </span>';
            }

            if ($r->email != '') {
                $email = $r->email;
            } else {
                $email = '<span class="badge bg-red"> ? </span>';
            }

            $data[] = array(
                $no . ". ",
                date("d-m-Y", strtotime($r->date_of_joining)),
                $r->employee_id,
                $full_name,
                $workstation_name,
                $designation_name,
                $emp_status,
                $emp_status_name,
                $grade_status,
                $rekening_name,
                $bank_name,
                $email

            );

            $no++;
        }
        $output = array(
            "draw" => $draw,
            "recordsTotal" => $employee->num_rows(),
            "recordsFiltered" => $employee->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    // ========================================================================
    // 13.8.2 DETAIL GAJI BORONGAN - PER PERIODE
    // ========================================================================

    public function gaji_borongan_periode()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Detail Gaji Borongan Periode | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['breadcrumbs']   = 'Detail Gaji Borongan Periode';
        $data['desc']          = 'LAPORAN : Detail Gaji Borongan Periode (2 Mingguan) ';
        $data['path_url']      = 'report_gaji_borongan_periode';

        $data['all_companies']     = $this->Company_model->get_company();
        $data['all_bulan_gaji']    = $this->Core_model->all_bulan_gaji();

        $role_resources_ids    = $this->Core_model->user_role_resource();
        if (in_array('1382', $role_resources_ids)) {
            if (!empty($session)) {
                $data['subview'] = $this->load->view("admin/reports/gaji_borongan_periode", $data, TRUE);
                $this->load->view('admin/layout/layout_main', $data); //page load
            } else {
                redirect('admin/');
            }
        } else {
            redirect('admin/dashboard');
        }
    }

    public function gaji_borongan_periode_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_borongan_periode", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $company_id = $this->input->get("company_id");
        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }


        // $start_date = $this->input->get("start_date");
        // $end_date   = $this->input->get("end_date");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $payslip = $this->Payroll_model->get_comp_template_borongan_company_report($company_id, $start_date, $end_date);

        // echo "<pre>";
        // print_r( $start_date );
        // echo "</pre>";
        // die();

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($payslip->result() as $r) {

            // ====================================================================================================================
            // DATA KARYAWAN
            // ====================================================================================================================
            // $month_payment = date("F, Y", strtotime($r->start_date));
            // Karyawan ID
            $emp_id = $r->employee_id;

            $user_info = $this->Core_model->read_user_info($emp_id);
            $emp_nik   = $user_info[0]->employee_id;
            $full_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;

            // ====================================================================================================================
            // DATA KARYAWAN
            // ====================================================================================================================

            // grade
            $grade_type = $this->Core_model->read_user_jenis_grade($user_info[0]->grade_type);

            if (!is_null($grade_type)) {
                $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                $jenis_grade_warna = $grade_type[0]->warna;
            } else {
                $jenis_grade       = '<span class="badge bg-red"> ? </span>';
                $jenis_grade_warna = '';
            }

            $cek_karyawan_status = $user_info[0]->emp_status;

            if ($cek_karyawan_status != '') {
                $karyawan_status     = $cek_karyawan_status;
            } else {
                $karyawan_status     = '<span class="badge bg-red"> ? </span>';
            }

            $workstation = $this->Workstation_model->read_workstation_information($r->workstation_id);
            if (!is_null($workstation)) {
                $workstation_name = $workstation[0]->workstation_name;
            } else {
                $workstation_name = '<span class="badge bg-red"> ? </span>';
            }

            // Karyawan Posisi
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '<span class="badge bg-red"> ? </span>';
            }

            // Karyawan Masa kerja
            date_default_timezone_set("Asia/Jakarta");

            $doj = $r->doj;

            $tanggal1 = new DateTime($r->doj);
            $tanggal2 = new DateTime();

            if ($tanggal2->diff($tanggal1)->y == 0) {
                $selisih = $tanggal2->diff($tanggal1)->m . ' bln';
            } else {
                $selisih = $tanggal2->diff($tanggal1)->y . ' thn' . ' ' . $tanggal2->diff($tanggal1)->m . ' bln';
            }

            // Karyawan Status
            $emp_status =  $this->Employees_model->read_employee_contract_information2($r->employee_id);
            if (!is_null($emp_status)) {
                $emp_status_name = $emp_status[0]->name_type;
            } else {
                if ($cek_karyawan_status == 'Tetap') {
                    $emp_status_name = '-';
                } else {
                    $emp_status_name = '<span class="badge bg-red"> ? </span>';
                }
            }


            $data[] = array(
                $no,
                date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date)),
                $emp_nik,
                $full_name,
                $workstation_name,
                $designation_name,
                $doj,
                $selisih,
                $cek_karyawan_status,
                $emp_status_name,
                $jenis_grade,
                // 12
                $r->jumlah_hadir,
                $r->jumlah_gram,

                number_format($r->jumlah_biaya, 0, ',', '.'),
                number_format($r->jumlah_insentif, 0, ',', '.'),
                // 16
                number_format($r->commissions_amount, 0, ',', '.'),
                number_format($r->commissions_help_amount, 0, ',', '.'),

                number_format($r->bpjs_kes_amount, 0, ',', '.'),
                number_format($r->bpjs_tk_amount, 0, ',', '.'),

                number_format($r->minus_amount, 0, ',', '.'),
                // 18
                number_format($r->net_salary, 0, ',', '.'),
                $r->rekening_name,
                $r->bank_name,
                $r->email
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $payslip->num_rows(),
            "recordsFiltered" => $payslip->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function gaji_borongan_periode_jumlah()
    {
        $company_id = $this->input->get('company_id');

        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $grouping = $this->Payroll_model->get_company_payslip_periode_jumlah($company_id, $start_date, $end_date);
        if (!is_null($grouping)) {
            $jumlah_karyawan = $grouping[0]->jumlah;
        } else {
            $jumlah_karyawan = '';
        }

        // company
        $company = $this->Company_model->read_company_information($company_id);
        if (!is_null($company)) {
            $company_name = $company[0]->name;
        } else {
            $company_name = '--';
        }

        $sql = 'SELECT sum(net_salary) as jumlah_gaji, count(*) as jumlah_karyawan
                            FROM xin_salary_payslips_borongan
                            WHERE company_id = "' . $company_id . '" AND start_date = "' . $start_date . '" AND end_date = "' . $end_date . '"
                             ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $response['val'][] = array(
                    'start_date'     => date("d-m-Y", strtotime($start_date)),
                    'end_date'       => date("d-m-Y", strtotime($end_date)),

                    'company_name'    => $company_name,
                    'jumlah_karyawan' => $val->jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    public function export_borongan_periode()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_borongan_periode", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');

        $periode_id = $this->input->post("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }


        // $bulan_gaji = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji   = 'Periode ';

        $cek_tanggal_gaji   = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);

        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $workstation = $this->Payroll_model->get_employee_by_workstation_company_borongan_group($company_id, $start_date, $end_date);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        if (count($workstation) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:T1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:T2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:T3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "DETAIL BORONGAN PERIODE");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object

            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:T5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:T6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );


            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('B5:U5000')->getAlignment()->setWrapText(true);

            // Kanan
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("I7:I2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("J7:J2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("K7:K2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("L7:L2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("M7:M2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("N7:N2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("O7:O2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("P7:P2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("Q7:Q2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("R7:R2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));

            // $objPHPExcel->getActiveSheet()->getStyle('Q7:Q2560')->getNumberFormat()->setFormatCode( PHPExcel_Style_NumberFormat::FORMAT_TEXT );

            $objPHPExcel->getActiveSheet()->getStyle('S7:S2560')->getNumberFormat()->setFormatCode('0');

            $objPHPExcel->getActiveSheet()->getStyle('S7:S2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('T7:T2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('I5:I6');
            $objPHPExcel->getActiveSheet()->getStyle('I5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('J5:J6');
            $objPHPExcel->getActiveSheet()->getStyle('J5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('K5:K6');
            $objPHPExcel->getActiveSheet()->getStyle('K5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('L5:L6');
            $objPHPExcel->getActiveSheet()->getStyle('L5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('M5:M6');
            $objPHPExcel->getActiveSheet()->getStyle('M5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('N5:N6');
            $objPHPExcel->getActiveSheet()->getStyle('N5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('O5:O6');
            $objPHPExcel->getActiveSheet()->getStyle('O5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('P5:P6');
            $objPHPExcel->getActiveSheet()->getStyle('P5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('Q5:Q6');
            $objPHPExcel->getActiveSheet()->getStyle('Q5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('R5:R6');
            $objPHPExcel->getActiveSheet()->getStyle('R5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('S5:S6');
            $objPHPExcel->getActiveSheet()->getStyle('S5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('T5:T6');
            $objPHPExcel->getActiveSheet()->getStyle('T5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T");

            $val = array("No", "Nama", 'Jabatan', "Status", "Grade", "Tanggal Kerja", "Masa Kerja", "Jum Hadir", "Total Gram", "Total Biaya", "Total Tambahan", "Total Insentif", "Total Potong", "Total BPJS Kes", "Total BPJS TK", "Gaji Diterima", "No.Rekening", "Nama Bank", "Email");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );

            for ($a = 0; $a < 19; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // 1.No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(45); // 2.Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(35); // 3.Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(10); // 4.Status
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(10); // 5.Grade
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(12); // 6.Tanggal
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(12); // 7.Masa Kerja

                $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(15); // 8.Jumlah Hadir
                $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15); // 9.Jumlah Gram
                $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(15); // 10.Jumlah Biaya

                $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(18); // 12.Total Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(18); // 13.Total Diperbantukan
                $objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(18); // 14.Total Potong
                $objPHPExcel->getActiveSheet()->getColumnDimension('O')->setWidth(18); // 14.Total BPJS KES
                $objPHPExcel->getActiveSheet()->getColumnDimension('P')->setWidth(18); // 14.Total BPJS TK
                $objPHPExcel->getActiveSheet()->getColumnDimension('Q')->setWidth(18); // 15.Total Gaji

                $objPHPExcel->getActiveSheet()->getColumnDimension('R')->setWidth(25); // 16.No Rek
                $objPHPExcel->getActiveSheet()->getColumnDimension('S')->setWidth(25); // 17.Bank Rek
                $objPHPExcel->getActiveSheet()->getColumnDimension('T')->setWidth(35); // 18.Email

                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $dep = 6;
            $baris = $dep + 1;

            foreach ($workstation->result() as $d) {

                $grouping = $this->Employees_model->get_employee_by_workstation_company_borongan_detail($d->company_id, $d->workstation_id, $start_date, $end_date);
                if (!is_null($grouping)) {
                    $jumlah_karyawan = $grouping[0]->jumlah;
                } else {
                    $jumlah_karyawan = '0';
                }

                if ($jumlah_karyawan > 0) {

                    // Karyawan Posisi
                    $workstation_info = $this->Workstation_model->read_workstation_information($d->workstation_id);
                    if (!is_null($workstation)) {
                        $workstation_name = $workstation_info[0]->workstation_name;
                    } else {
                        $workstation_name = '';
                    }


                    // $objset->setCellValue("B".$baris, );
                    $objset->setCellValue("B" . ($baris + 1) . "", $workstation_name . ', Jumlah  : ' . $jumlah_karyawan . ' Karyawan');

                    $objset->getStyle("B" . ($baris + 1) . ":T" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'B8CCE4')
                                ),

                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                ),

                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                )
                            )
                        );

                    $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":T" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'B8CCE4')
                                ),
                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )
                            )
                        );

                    $objset->mergeCells("B" . ($baris + 1) . ":T" . ($baris + 1) . "")
                        ->getStyle("B" . ($baris + 1) . ":T" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->getStyle("I" . ($jumlah_karyawan + $baris + 2) . ":R" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getNumberFormat()
                        ->setFormatCode("#,##0")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                                ),

                            )
                        );

                    $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Total ');

                    $objset->setCellValue("I" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(I" . ($baris + 2) . ":I" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("J" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(J" . ($baris + 2) . ":J" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("K" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(K" . ($baris + 2) . ":K" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("L" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(L" . ($baris + 2) . ":L" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("M" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(M" . ($baris + 2) . ":M" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("N" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(N" . ($baris + 2) . ":N" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("O" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(O" . ($baris + 2) . ":O" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("P" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(P" . ($baris + 2) . ":P" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("Q" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(Q" . ($baris + 2) . ":Q" . ($jumlah_karyawan + $baris + 1) . ")");
                    $objset->setCellValue("R" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(R" . ($baris + 2) . ":R" . ($jumlah_karyawan + $baris + 1) . ")");

                    // $objset->setCellValue("B".($jumlah_karyawan+$baris+3)."", '');

                    $payslip = $this->Payroll_model->get_comp_template_borongan_workstation_detail($d->company_id, 3, $start_date, $end_date, $d->workstation_id);

                    $no = 1;
                    $baris =  $baris + 2;
                    foreach ($payslip->result() as $r) {

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        // Karyawan ID
                        $emp_id = $r->employee_id;

                        $user_info = $this->Core_model->read_user_info($emp_id);
                        $emp_nik   = $user_info[0]->employee_id;
                        $full_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;
                        $email     = $user_info[0]->email;

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        $rekening_name = $r->rekening_name;

                        $bank_name = $r->bank_name;

                        $cek_karyawan_status = $user_info[0]->emp_status;

                        if ($cek_karyawan_status != '') {
                            $karyawan_status     = $cek_karyawan_status;
                        } else {
                            $karyawan_status     = '';
                        }

                        // Karyawan Posisi
                        $designation = $this->Designation_model->read_designation_information($r->designation_id);
                        if (!is_null($designation)) {
                            $designation_name = $designation[0]->designation_name;
                        } else {
                            $designation_name = '';
                        }

                        $jabatan = $designation_name;

                        // Karyawan Masa kerja
                        date_default_timezone_set("Asia/Jakarta");

                        $doj = $r->doj;

                        $tanggal1 = new DateTime($r->doj);
                        $tanggal2 = new DateTime();

                        if ($tanggal2->diff($tanggal1)->y == 0) {
                            $selisih = $tanggal2->diff($tanggal1)->m . ' bln';
                        } else {
                            $selisih = $tanggal2->diff($tanggal1)->y . ' thn' . ' ' . $tanggal2->diff($tanggal1)->m . ' bln';
                        }

                        $cek_karyawan_status = $user_info[0]->emp_status;

                        // Karyawan Status
                        $emp_status =  $this->Employees_model->read_employee_contract_information2($r->employee_id);
                        if (!is_null($emp_status)) {
                            $emp_status_name = $emp_status[0]->name_type;
                        } else {
                            if ($cek_karyawan_status == 'Tetap') {
                                $emp_status_name = 'Tetap';
                            } else {
                                $emp_status_name = '';
                            }
                        }

                        // grade
                        $grade_type = $this->Core_model->read_user_jenis_grade($user_info[0]->grade_type);

                        if (!is_null($grade_type)) {
                            $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                            $jenis_grade_warna = $grade_type[0]->warna;
                        } else {
                            $jenis_grade       = '';
                            $jenis_grade_warna = '';
                        }


                        //pemanggilan sesuaikan dengan nama kolom tabel
                        $objset->setCellValue("B" . $baris, $no);                         // 2.No
                        $objset->setCellValue("C" . $baris, $full_name);                 // 3.Nama Karyawan
                        $objset->setCellValue("D" . $baris, $jabatan);                        // 4.Jabatan
                        $objset->setCellValue("E" . $baris, $emp_status_name);                 // 5.Status
                        $objset->setCellValue("F" . $baris, $jenis_grade);                     // 6.Grade
                        $objset->setCellValue("G" . $baris, $doj);                             // 7.Tanggal Mulai Kerja
                        $objset->setCellValue("H" . $baris, $selisih);                         // 8.Masa Kerja

                        $objset->setCellValue("I" . $baris, $r->jumlah_hadir);                 // 9.Jumlah Hadir
                        $objset->setCellValue("J" . $baris, $r->jumlah_gram);                 // 10.Jumlah Gram
                        $objset->setCellValue("K" . $baris, $r->jumlah_biaya);                 // 11.Jumlah Biaya

                        $objset->setCellValue("L" . $baris, $r->commissions_amount);         // 13.Total Insentif
                        $objset->setCellValue("M" . $baris, $r->jumlah_insentif);     // 14.Total Diberbantukan
                        $objset->setCellValue("N" . $baris, $r->minus_amount);                 // 15.Total Potong
                        $objset->setCellValue("O" . $baris, $r->bpjs_kes_amount);             // 16.Total BPJS KES
                        $objset->setCellValue("P" . $baris, $r->bpjs_tk_amount);             // 17.Total BPJS TK
                        $objset->setCellValue("Q" . $baris, $r->net_salary);                // 18.Total Gaji

                        $objset->setCellValue("R" . $baris, "'" . $rekening_name);            // 19.Rekening No
                        $objset->setCellValue("S" . $baris, $bank_name);                // 20.Bank Name
                        $objset->setCellValue("T" . $baris, $email);                    // 21.Email


                        $no++;
                        $baris++;
                    }

                    $dep++;
                }
            }

            $total_emp = $this->Employees_model->get_employee_by_company_borongan($company_id, $start_date, $end_date);

            if (!is_null($total_emp)) {
                $total_karyawan = $total_emp[0]->jumlah;
            } else {
                $total_karyawan = '';
            }

            $objset->setCellValue("B" . ($baris + 1) . "", 'Grand Total ' . $total_karyawan . ' Karyawan');

            $objset->getStyle("B" . ($baris + 1) . ":T" . ($baris + 1) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'B8CCE4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($baris + 1) . ":H" . ($baris + 1) . "")
                ->getStyle("B" . ($baris + 1) . ":H" . ($baris + 1) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->getStyle("I" . ($baris + 1) . ":R" . ($baris + 1) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );

            $grand_total = $this->Payroll_model->get_comp_template_borongan_lihat($d->company_id, 3, $start_date, $end_date);

            foreach ($grand_total->result() as $g) {
                $objset->setCellValue("I" . ($baris + 1) . "", $g->jumlah_hadir);
                $objset->setCellValue("J" . ($baris + 1) . "", $g->jumlah_gram);
                $objset->setCellValue("K" . ($baris + 1) . "", $g->jumlah_biaya);
                $objset->setCellValue("L" . ($baris + 1) . "", $g->total_insentif);
                $objset->setCellValue("M" . ($baris + 1) . "", $g->total_diperbantukan);
                $objset->setCellValue("N" . ($baris + 1) . "", $g->total_potong);
                $objset->setCellValue("O" . ($baris + 1) . "", $g->total_bpjs_kes_amount);
                $objset->setCellValue("P" . ($baris + 1) . "", $g->total_bpjs_tk_amount);
                $objset->setCellValue("Q" . ($baris + 1) . "", $g->net_salary);
            }

            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Detail Borongan Periode');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Detail Borongan Periode ' . $company_name . ' - ' . $cek_tanggal_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ========================================================================
    // 13.8.3 REKAP GAJI BORONGAN - PERIODE
    // ========================================================================

    public function gaji_borongan_periode_rekap()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Rekap Gaji Borongan Periode | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['desc']          = 'LAPORAN : Rekap Gaji Borongan - Periode';
        $data['breadcrumbs']   = 'Rekap Gaji Borongan Periode';
        $data['path_url']      = 'report_gaji_borongan_periode_rekap';

        $data['all_companies'] = $this->Company_model->get_company();
        $data['all_bulan_gaji']    = $this->Core_model->all_bulan_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1383', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/gaji_borongan_periode_rekap", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function gaji_borongan_periode_rekap_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_borongan_periode_rekap", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $company_id = $this->input->get("company_id");
        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_payslip_borongan($company_id, $start_date, $end_date);

        // echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {

            // get addd by > template
            $user = $this->Core_model->read_user_info($r->employee_id);
            // user full name
            $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;

            $month_payment = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

            $employee_name = strtoupper($full_name);

            // get workstation
            $workstation = $this->Core_model->read_workstation_info($r->workstation_id);
            if (!is_null($workstation)) {
                $workstation_name = $workstation[0]->workstation_name;
            } else {
                $workstation_name = '--';
            }

            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '--';
            }

            // designation
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '--';
            }

            $data[] = array(
                $no,
                // $month_payment,
                date("d-m-Y", strtotime($r->start_date)) . ' s/d ' . date("d-m-Y", strtotime($r->end_date)),
                $employee_name,
                strtoupper($department_name),
                strtoupper($workstation_name),
                strtoupper($designation_name),
                number_format($r->net_salary, 0, ',', '.'),
                $r->rekening_name,
                $r->bank_name,

            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function gaji_borongan_rekap_jumlah()
    {
        $company_id = $this->input->get('company_id');

        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $sql = 'SELECT count(*) as jumlah_periode,  sum(jumlah) as jumlah_karyawan,  sum(net_salary) as jumlah_gaji
                            FROM view_salary_borongan_jumlah
                            WHERE company_id = "' . $company_id . '" AND start_date >= "' . $start_date . '" AND end_date <= "' . $end_date . '" ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $response['val'][] = array(
                    'start_date'     => date("d-m-Y", strtotime($start_date)),
                    'end_date'       => date("d-m-Y", strtotime($end_date)),

                    'jumlah_periode' => $val->jumlah_periode,
                    'jumlah_karyawan' => $val->jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    public function export_gaji_borongan_periode_rekap()
    {
        $data['title'] = $this->Core_model->site_title();
        $session       = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_borongan_periode_rekap", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');

        $periode_id = $this->input->post("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }


        // $bulan_gaji = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji   = 'Periode ';

        $cek_tanggal_gaji   = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);
        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);


        $workstation_list      = $this->Payroll_model->get_company_payslip_workstation_borongan($company_id, $start_date, $end_date);

        if (count($workstation_list) > 0) {


            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:K1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:K2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:K3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "REKAP GAJI BORONGAN PERIODE");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object

            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:K5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:K6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            // $objPHPExcel->getActiveSheet()->getStyle('I7:I2560')->getNumberFormat()->setFormatCode('0');

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            $objPHPExcel->getActiveSheet()->getStyle('B5:K5000')->getAlignment()->setWrapText(true);

            // Kanan
            $objPHPExcel->getActiveSheet()->getStyle("H7:H2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);


            $objPHPExcel->getActiveSheet()->getStyle('I7:I2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);



            // $objPHPExcel->getActiveSheet()->getStyle('I7:I2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('J7:J2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('K7:K2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);


            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('I5:I6');
            $objPHPExcel->getActiveSheet()->getStyle('I5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            $objPHPExcel->getActiveSheet()->mergeCells('J5:J6');
            $objPHPExcel->getActiveSheet()->getStyle('J5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('K5:K6');
            $objPHPExcel->getActiveSheet()->getStyle('K5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H", "I", "J", "K");

            $val = array("No", "NIP", 'Nama', "Departemen", "Workstation", "Posisi", "Total Gaji", "No Rekening", "Bank", "Email");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );

            for ($a = 0; $a < 10; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // 1.No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(15); // 2.NIP
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(49); // 3.Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(30); // 4.Departemen
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(30); // 5.Workstation
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(30); // 6.Posisi
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(15); // 7.Total Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(25); // 8.No. Rekening
                $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15); // 9.Bank
                $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(50); // 10.Email


                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }

            $dep = 6;
            $baris = $dep + 1;

            foreach ($workstation_list->result() as $d) {

                $group_workstation = $this->Employees_model->get_employee_by_workstation_company_borongan($d->company_id, $d->workstation_id, $start_date, $end_date);

                if (!is_null($group_workstation)) {
                    $jumlah_karyawan = $group_workstation[0]->jumlah_works;
                } else {
                    $jumlah_karyawan = '0';
                }

                // Karyawan Posisi
                $workstation_info = $this->Workstation_model->read_workstation_information($d->workstation_id);
                if (!is_null($workstation_info)) {
                    $workstation_name = $workstation_info[0]->workstation_name;
                } else {
                    $workstation_name = '';
                }

                // $objset->setCellValue("B".$baris, );
                $objset->setCellValue("B" . ($baris + 1) . "", 'Workstation : ' . $workstation_name . ', Jumlah  : ' . $jumlah_karyawan . ' Karyawan');

                $objset->getStyle("B" . ($baris + 1) . ":K" . ($baris + 1) . "")
                    ->applyFromArray(
                        array(
                            'fill' => array(
                                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                'color' => array('rgb' => 'B8CCE4')
                            ),
                            'borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )
                        )
                    );

                $objset->mergeCells("B" . ($baris + 1) . ":K" . ($baris + 1) . "")
                    ->getStyle("B" . ($baris + 1) . ":K" . ($baris + 1) . "")
                    ->applyFromArray(
                        array(

                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )

                        )
                    );

                if ($jumlah_karyawan > 0) {



                    $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Total ');

                    $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":K" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'FCD5B4')
                                ),
                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )
                            )
                        );


                    $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":G" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":G" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->getStyle("H" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getNumberFormat()
                        ->setFormatCode("#,##0")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                                ),

                            )
                        );



                    $objset->setCellValue("H" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(H" . ($baris + 2) . ":H" . ($jumlah_karyawan + $baris + 1) . ")");

                    // $objset->setCellValue("B".($jumlah_karyawan+$baris+3)."", '');

                    $payslip = $this->Payroll_model->get_comp_template_borongan_workstation_lihat($d->company_id, $start_date, $end_date, $d->workstation_id);

                    $no    = 1;

                    $baris =  $baris + 2;

                    foreach ($payslip->result() as $r) {

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        // Karyawan ID
                        $emp_id = $r->employee_id;

                        $user_info     = $this->Core_model->read_user_info($emp_id);
                        $employee_id   = $user_info[0]->employee_id;
                        $employee_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;


                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
                        if (!is_null($rekening)) {
                            $rekening_name = $rekening[0]->account_number;
                            $bank_name     = $rekening[0]->bank_name;
                        } else {
                            $rekening_name = '';
                            $bank_name = '--';
                        }
                        if ($bank_name == 'Bank BRI') {
                            $objPHPExcel->getActiveSheet()->getStyle("I" . $baris)->getNumberFormat()->setFormatCode('000000000000000');
                        } else {
                            $objPHPExcel->getActiveSheet()->getStyle("I" . $baris)->getNumberFormat()->setFormatCode('0000000000');
                        }

                        // $objPHPExcel ->getActiveSheet() ->getCellByColumnAndRow("I", $baris) ->setValueExplicit($value, PHPExcel_Cell_DataType::TYPE_STRING);

                        // Karyawan Departemen
                        $department = $this->Department_model->read_department_information($r->department_id);
                        if (!is_null($department)) {
                            $department_name = $department[0]->department_name;
                        } else {
                            $department_name = '';
                        }

                        // Karyawan Posisi
                        $designation = $this->Designation_model->read_designation_information($r->designation_id);
                        if (!is_null($designation)) {
                            $designation_name = $designation[0]->designation_name;
                        } else {
                            $designation_name = '';
                        }

                        // 		// get workstation
                        $workstation = $this->Core_model->read_workstation_info($d->workstation_id);
                        if (!is_null($workstation)) {
                            $workstation_name = $workstation[0]->workstation_name;
                        } else {
                            $workstation_name = '--';
                        }

                        //pemanggilan sesuaikan dengan nama kolom tabel
                        // $objset->setCellValue("A" . $baris, $no); 				  							// 0.
                        $objset->setCellValue("B" . $baris, $no);                                                 // 1.No
                        $objset->setCellValue("C" . $baris, $employee_id);                                         // 2.NIP
                        $objset->setCellValue("D" . $baris, $employee_name);                                     // 3.Nama Karyawan
                        $objset->setCellValue("E" . $baris, strtoupper($department_name));                         // 4.Departemen
                        $objset->setCellValue("F" . $baris, strtoupper($workstation_name));                     // 5.Workstation
                        $objset->setCellValue("G" . $baris, strtoupper($designation_name));                     // 6.Posisi
                        $objset->setCellValue("H" . $baris, round($r->net_salary, 0));                             // 7.Total Gaji
                        $objset->setCellValue("I" . $baris, "'" . $r->rekening_name);                                 // 8.No.Rekening
                        $objset->setCellValue("J" . $baris, $r->bank_name);                                     // 9.Bank
                        $objset->setCellValue("K" . $baris, $r->email);                                                 // 10.Email


                        $no++;
                        $baris++;
                    }

                    $dep++;
                }
            }

            $total_emp = $this->Employees_model->get_employee_by_company_borongan_workstation($company_id, $start_date, $end_date);

            if (!is_null($total_emp)) {

                $total_karyawan = $total_emp[0]->jumlah_karyawan;
            } else {

                $total_karyawan = '0';
            }

            $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 1) . "", 'Grand Total ' . $total_karyawan . ' Karyawan');

            $objset->getStyle("B" . ($jumlah_karyawan + $baris + 1) . ":K" . ($jumlah_karyawan + $baris + 1) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'B8CCE4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 1) . ":G" . ($jumlah_karyawan + $baris + 1) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris + 1) . ":G" . ($jumlah_karyawan + $baris + 1) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );


            $objset->getStyle("H" . ($jumlah_karyawan + $baris + 1) . ":H" . ($jumlah_karyawan + $baris + 1) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );

            $grand_total = $this->Payroll_model->get_comp_template_borongan_lihat_workstation($company_id, $start_date, $end_date);

            foreach ($grand_total->result() as $gt) {

                $objset->setCellValue("H" . ($jumlah_karyawan + $baris + 1) . "", $gt->besar_gaji);
            }

            $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 3) . "", "*. Silahkan hapus tanda petik (') di kolom No Rekening.");

            $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 3) . ":G" . ($jumlah_karyawan + $baris + 3) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris + 3) . ":G" . ($jumlah_karyawan + $baris + 3) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Rekap Gaji Borongan Periode');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Rekap Gaji Borongan Periode ' . $company_name . ' - ' . $cek_tanggal_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ========================================================================
    // 13.8.4 REKAP GAJI BORONGAN - BULANAN
    // ========================================================================

    public function gaji_borongan_bulanan()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']           = 'Rekap Gaji Borongan Bulanan | ' . $this->Core_model->site_title();
        $data['icon']            = '<i class="fa fa-print"></i>';
        $data['desc']            = 'LAPORAN : Rekap Gaji Borongan Bulanan';
        $data['breadcrumbs']     = 'Rekap Gaji Borongan Bulanan';
        $data['path_url']        = 'report_gaji_borongan_bulanan';

        $data['all_companies']   = $this->Company_model->get_company();
        $data['all_bulan_gaji']  = $this->Core_model->all_bulan_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1384', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/gaji_borongan_bulanan", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function gaji_borongan_bulanan_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_borongan_bulanan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        $company_id = $this->input->get("company_id");
        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        // $history = $this->Payroll_model->cek_jumlah_gaji($this->input->get("company_id"),$start_date,$end_date);

        $history = $this->Payroll_model->get_company_payslip_perbulan_borongan($company_id, $start_date, $end_date);

        // echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {

            // get addd by > template
            $user = $this->Core_model->read_user_info($r->employee_id);
            // user full name
            $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;


            $employee_id = strtoupper($user[0]->employee_id);

            $employee_name = strtoupper($full_name);

            $jumlah_gaji = $this->Payroll_model->cek_jumlah_gaji_borongan($r->employee_id, $start_date, $end_date);
            if (!is_null($jumlah_gaji)) {
                $gaji_karyawan = $jumlah_gaji[0]->jumlah;
            } else {
                $gaji_karyawan = '';
            }


            if ($r->employee_id == '') {
                $ol = '<span class="blink blink-one"> 0  </span>';
            } else {
                $ol = '<ol style="margin-bottom: 0px !important;">';
                $employee = $this->Payroll_model->read_employee_kerja_borongan($r->employee_id, $start_date, $end_date);
                foreach ($employee->result() as $e) {
                    if (!is_null($employee)) {
                        $designation = $this->Designation_model->read_designation_information($e->designation_id);
                        if (!is_null($designation)) {
                            $designation_name = $designation[0]->designation_name;
                        } else {
                            $designation_name = '--';
                        }
                        $department = $this->Department_model->read_department_information($e->department_id);
                        if (!is_null($department)) {
                            $department_name = $department[0]->department_name;
                        } else {
                            $department_name = '--';
                        }
                        $ol .= '<li>' . date("d-m-Y", strtotime($e->start_date)) . ' s/d ' . date("d-m-Y", strtotime($e->end_date)) . ' (' . number_format($e->net_salary, 0, ',', '.') . ' - ' . $designation_name . ' - ' . $department_name . ') </li>';
                    } else {
                        $ol .= '--';
                    }
                }
                $ol .= '</ol>';
            }

            $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
            if (!is_null($rekening)) {
                $rekening_name = $rekening[0]->account_number;
                $bank_name = $rekening[0]->bank_name;
            } else {
                $rekening_name = '';
                $bank_name = '--';
            }

            $data[] = array(
                $no,
                $employee_id,
                $employee_name,
                number_format($gaji_karyawan, 0, ',', '.'),
                $rekening_name,
                $bank_name,
                $ol

            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function gaji_borongan_bulanan_jumlah()
    {
        $company_id = $this->input->get('company_id');

        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $grouping = $this->Payroll_model->get_company_payslip_perbulan_jumlah_borongan($company_id, $start_date, $end_date);
        if (!is_null($grouping)) {
            $jumlah_karyawan = $grouping[0]->jumlah;
        } else {
            $jumlah_karyawan = '';
        }

        // company
        $company = $this->Company_model->read_company_information($company_id);
        if (!is_null($company)) {
            $company_name = $company[0]->name;
        } else {
            $company_name = '--';
        }

        $sql = 'SELECT sum(net_salary) as jumlah_gaji
                            FROM xin_salary_payslips_borongan
                            WHERE company_id = "' . $company_id . '" AND start_date >= "' . $start_date . '" AND end_date <= "' . $end_date . '"
                             ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $response['val'][] = array(
                    'start_date'     => date("d-m-Y", strtotime($start_date)),
                    'end_date'       => date("d-m-Y", strtotime($end_date)),

                    'company_name'    => $company_name,
                    'jumlah_karyawan' => $jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    public function export_borongan_bulanan()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_borongan_bulanan", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');
        $periode_id = $this->input->post("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }


        $cek_bulan_gaji   = 'Periode ';

        $cek_tanggal_gaji   = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);
        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $employee_list = $this->Payroll_model->get_company_payslip_perbulan_borongan($company_id, $start_date, $end_date);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        // echo "<pre>";
        // print_r($employee_list);
        // echo "</pre>";
        // die();

        if (count($employee_list) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:H1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:H2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:H3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "REKAP GAJI BORONGAN BULANAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object

            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:H5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:H6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getNumberFormat()->setFormatCode('0');

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('B5:H5000')->getAlignment()->setWrapText(true);

            $objPHPExcel->getActiveSheet()->getStyle("E7:E2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));

            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            // $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setWrapText(true);
            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H");

            $val = array("No", "NIP", 'Nama', "Total Gaji", "No Rekening", "Bank", "Keterangan Periode (2 mingguan)");

            $style = array(
                'alignment' => array(
                    'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
                )
            );

            for ($a = 0; $a < 7; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // 1.No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(15); // 2.NIP
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(35); // 3.Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15); // 4.Total Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(25); // 5.No. Rekening
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(15); // 6.Bank
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(80); // 7.Keterangan


                $style = array(
                    'alignment' => array(
                        'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $no     = 1;
            $baris = $no + 6;
            foreach ($employee_list->result() as $r) {

                // get addd by > template
                $user = $this->Core_model->read_user_info($r->employee_id);
                // user full name
                $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;

                $month_payment = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

                $employee_id = strtoupper($user[0]->employee_id);

                $employee_name = strtoupper($full_name);

                $jumlah_gaji = $this->Payroll_model->cek_jumlah_gaji_borongan($r->employee_id, $start_date, $end_date);
                if (!is_null($jumlah_gaji)) {
                    $gaji_karyawan = $jumlah_gaji[0]->jumlah;
                } else {
                    $gaji_karyawan = '';
                }

                if ($r->employee_id == '') {
                    $ol = '';
                } else {
                    $ol = "\n";
                    $employee = $this->Payroll_model->read_employee_kerja_borongan($r->employee_id, $start_date, $end_date);
                    foreach ($employee->result() as $e) {
                        if (!is_null($employee)) {
                            $designation = $this->Designation_model->read_designation_information($e->designation_id);
                            if (!is_null($designation)) {
                                $designation_name = $designation[0]->designation_name;
                            } else {
                                $designation_name = '--';
                            }
                            $department = $this->Department_model->read_department_information($e->department_id);
                            if (!is_null($department)) {
                                $department_name = $department[0]->department_name;
                            } else {
                                $department_name = '--';
                            }
                            $ol .= date("d-m-Y", strtotime($e->start_date)) . ' s/d ' . date("d-m-Y", strtotime($e->end_date)) . ' (' . number_format($e->net_salary, 0, ',', '.') . ' - ' . $designation_name . ' - ' . $department_name . ') ' . '' . "\n";
                        } else {
                            $ol .= '--';
                        }
                    }
                    $ol .= '';
                }

                $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
                if (!is_null($rekening)) {
                    $rekening_name = $rekening[0]->account_number;
                    $bank_name = $rekening[0]->bank_name;
                } else {
                    $rekening_name = '';
                    $bank_name = '--';
                }

                //pemanggilan sesuaikan dengan nama kolom tabel
                // $objset->setCellValue("B" . $baris, $no); 				  	// 0.//
                $objset->setCellValue("B" . $baris, $no);                         // 1.No
                $objset->setCellValue("C" . $baris, $employee_id);                 // 2.NIP
                $objset->setCellValue("D" . $baris, $employee_name);             // 3.Nama Karyawan

                $objset->setCellValue("E" . $baris, round($gaji_karyawan, 0));     // 4.Total Gaji
                $objset->setCellValue("F" . $baris, $rekening_name);         // 5.No.Rekening
                $objset->setCellValue("G" . $baris, $bank_name);             // 6.Bank
                $objset->setCellValue("H" . $baris, $ol);                         // 7.Keterangan

                $no++;
                $baris++;
            }

            $jumlah_karyawan = count($employee_list->result());

            $objset->setCellValue("B" . ($jumlah_karyawan + 8) . "", 'Total ');

            $objset->getStyle("B" . ($jumlah_karyawan + 8) . ":H" . ($jumlah_karyawan + 8) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'FCD5B4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($jumlah_karyawan + 8) . ":D" . ($jumlah_karyawan + 8) . "")
                ->getStyle("B" . ($jumlah_karyawan + 8) . ":D" . ($jumlah_karyawan + 8) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->setCellValue("E" . ($jumlah_karyawan + 8) . "", "=SUM(E" . (7) . ":E" . ($jumlah_karyawan + 8 - 2) . ")");

            $objset->getStyle("E" . ($jumlah_karyawan + 8) . ":E" . ($jumlah_karyawan + 8 - 2) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );



            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Rekap Gaji Borongan Bulanan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Rekap Gaji Borongan Bulanan ' . $company_name . ' - ' . $cek_tanggal_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ========================================================================
    // 13.8.5 RESUME GAJI BORONGAN
    // ========================================================================

    public function gaji_borongan_resume()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Resume Gaji Borongan | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['desc']          = 'LAPORAN : Resume Gaji Borongan Bulanan';
        $data['breadcrumbs']   = 'Resume Gaji Borongan';
        $data['path_url']      = 'report_gaji_borongan_resume';

        // $data['all_companies'] = $this->Company_model->get_company();
        $data['all_bulan_gaji']    = $this->Core_model->all_bulan_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1385', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/gaji_borongan_resume", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    public function gaji_borongan_resume_bulanan_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_borongan_resume", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("month_year");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Timesheet_model->get_bulan_periode_resume($this->input->get("month_year"));

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {

            $bulan_gaji         = $this->Payroll_model->check_bulan_gaji($r->month_payroll);
            $cek_bulan_gaji     = $bulan_gaji[0]->desc;

            $daftar_periode_borongan = '';

            $sql_periode_borongan = " SELECT *
                                    FROM
                                         view_gaji_borongan
                                    WHERE
                                        1 = 1
                                    AND month_payroll  = '" . $r->month_payroll . "'

                                    ORDER BY start_date ASC";

            // echo "<pre>";
            // print_r( $sql_periode_borongan );
            // echo "</pre>";
            // die;

            $query_periode_borongan = $this->db->query($sql_periode_borongan);

            if ($query_periode_borongan->num_rows() > 0) {
                $daftar_periode_borongan = '<table class="datatables-demo table table-striped table-bordered" id="xin_table">
                                        <thead>
                                          <tr>
                                            <th class="text-center" width="50px">No.</th>
                                            <th class="text-center" > Tanggal Mulai </th>
                                            <th class="text-center" > Tanggal Sampai </th>
                                            <th class="text-center" > Durasi </th>
                                            <th class="text-center" > Karyawan</th>
                                            <th class="text-center" > Jumlah Gaji </th>
                                            <th class="text-center" > Status </th>
                                          </tr>
                                        </thead>
                                        <tbody>';
                $mo = 1;
                $Total_gaji = 0;
                $Total_karyawan = 0;
                foreach ($query_periode_borongan->result() as $row_periode_borongan) :


                    $d_start_date    = new DateTime($row_periode_borongan->start_date);
                    $d_end_date      = new DateTime($row_periode_borongan->end_date);
                    $interval_date   = $d_start_date->diff($d_end_date)->d + 1;

                    $Pembayaran_gaji   = number_format($row_periode_borongan->jumlah_gaji, 0, ',', '.');

                    $jum_karyawan      = number_format($row_periode_borongan->jumlah_karyawan, 0, ',', '.');

                    $daftar_periode_borongan = $daftar_periode_borongan . '
                                                    <tr >
                                                        <td width="2%" align="center">' . $mo . '.</td>

                                                        <td width="10%" align="center">
                                                         ' . date("d-m-Y", strtotime($row_periode_borongan->start_date)) . '
                                                        </td>

                                                        <td width="10%" align="center">
                                                          ' . date("d-m-Y", strtotime($row_periode_borongan->end_date)) . '
                                                        </td>

                                                        <td width="10%" align="center">
                                                         ' . $interval_date . ' hari
                                                        </td>

                                                        <td width="10%" align="center">
                                                         ' . $jum_karyawan . '
                                                        </td>

                                                        <td width="15%" align="right">
                                                         ' . $Pembayaran_gaji . '
                                                        </td>

                                                        <td  align="left">
                                                        &nbsp; <span class="label label-success">' . $this->lang->line('xin_payroll_paid') . '</span>
                                                        </td>

                                                    </tr>';
                    $mo++;

                    $Total_karyawan     += $row_periode_borongan->jumlah_karyawan;

                    $Total_gaji     += $row_periode_borongan->jumlah_gaji;



                endforeach;



                $daftar_periode_borongan = $daftar_periode_borongan . '
                                                    <tr style="background-color: #f5f7fa !important;">

                                                        <td colspan ="4" width="2%" align="right">
                                                            <b>Grand Total &nbsp;</b>
                                                        </td>

                                                        <td width="10%" align="center">
                                                          <span class="blink blink-one">' . number_format($Total_karyawan, 0, ',', '.') . '</span>
                                                        </td>

                                                        <td width="10%" align="right">
                                                          <span class="blink blink-one">' . number_format($Total_gaji, 0, ',', '.') . '</span>
                                                        </td>

                                                        <td  align="left">

                                                        </td>

                                                    </tr>';

                $daftar_periode_borongan = $daftar_periode_borongan . '
                                        </tbody>
                                        </table>';
            } else {
                $daftar_periode_borongan = '<div class="warning-msg" style="padding:5px;">
                                            <i class ="fa fa-question-circle"></i> Tidak Ada Data
                                         </div>';
            }

            $data[] = array(
                $no . ". ",

                $cek_bulan_gaji,
                $daftar_periode_borongan
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function gaji_borongan_resume_gaji_bulanan_list_detail()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_borongan_resume", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("tahun_gaji");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_payslip_history_year($this->input->get("company_id"), $this->input->get("tahun_gaji"));

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {
            $data[] = array(
                $no,

                date("F", strtotime($r->salary_month)),
                $r->jumlah,
                $this->Core_model->currency_sign($r->ga_pok),
                $this->Core_model->currency_sign($r->lembur),
                $this->Core_model->currency_sign($r->tj_jabatan),
                $this->Core_model->currency_sign($r->tj_produktifitas),
                $this->Core_model->currency_sign($r->tj_transportasi),
                $this->Core_model->currency_sign($r->tj_komunikasi),
                $this->Core_model->currency_sign($r->insentif),

                $this->Core_model->currency_sign($r->pph),
                $this->Core_model->currency_sign($r->pinjaman),
                $this->Core_model->currency_sign($r->bpjs_kes),
                $this->Core_model->currency_sign($r->bpjs_tk),
                $r->jum_alpa,
                $this->Core_model->currency_sign($r->potongan_alpa),
                $r->jum_izin,
                $this->Core_model->currency_sign($r->potongan_izin),

                $this->Core_model->currency_sign($r->net_salary),
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function export_gaji_borongan_resume_bulanan()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_borongan_resume", $data);
        } else {
            redirect('admin/');
        }

        $month_year   = $this->input->post('month_year');

        $bulan_gaji         = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji     = $bulan_gaji[0]->desc;
        $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji[0]->end_date));


        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);
        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $company_list = $this->Payroll_model->get_company_payslip_history_year_month($month_year);

        if (count($company_list) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:G1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:G2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:G3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", '');

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "RESUME PENGAJUAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object

            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:G5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:G6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle('I7:I2560')->getNumberFormat()->setFormatCode('0');

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            // $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            $objPHPExcel->getActiveSheet()->getStyle('B5:G5000')->getAlignment()->setWrapText(true);

            // Kanan
            $objPHPExcel->getActiveSheet()->getStyle("F7:F2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));


            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G");

            $val = array("No", "Nama Perusahaan", 'Bulan Gaji', "Jumlah Karyawan", "Total Gaji", "Keterangan");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );

            for ($a = 0; $a < 6; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // 1.No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(35); // 2.Nama Perusahan
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(15); // 3.Buln Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15); // 4.Jumlah Karyawan
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20); // 5.Total Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(50); // 6.Keterangan


                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }

            $no     = 1;
            $baris = $no + 6;
            foreach ($company_list->result() as $r) {

                $company = $this->Core_model->read_company_info($r->company_id);
                if (!is_null($company)) {
                    $comp_name = $company[0]->name;
                } else {
                    $comp_name = '';
                }



                //pemanggilan sesuaikan dengan nama kolom tabel
                // $objset->setCellValue("B" . $baris, $no); 				// 0.
                $objset->setCellValue("B" . $baris, $no);                     // 1.No
                $objset->setCellValue("C" . $baris, $comp_name);             // 2.Nama Perusahaan
                $objset->setCellValue("D" . $baris, $cek_bulan_gaji);         // 3.Bulan Gaji
                $objset->setCellValue("E" . $baris, $r->jumlah);             // 4.Jumlah Karyawan
                $objset->setCellValue("F" . $baris, $r->net_salary);         // 7.Total Gaji
                $objset->setCellValue("G" . $baris, '');                     // 8.Keterangan

                $no++;
                $baris++;
            }

            $jumlah_pengajuan = count($company_list->result());

            $objset->setCellValue("B" . ($jumlah_pengajuan + 8) . "", 'Grand Total ');

            $objset->getStyle("B" . ($jumlah_pengajuan + 8) . ":G" . ($jumlah_pengajuan + 8) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'B8CCE4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($jumlah_pengajuan + 8) . ":E" . ($jumlah_pengajuan + 8) . "")
                ->getStyle("B" . ($jumlah_pengajuan + 8) . ":E" . ($jumlah_pengajuan + 8) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->setCellValue("F" . ($jumlah_pengajuan + 8) . "", "=SUM(F" . (7) . ":F" . ($jumlah_pengajuan + 8 - 2) . ")");

            $objset->getStyle("F" . ($jumlah_pengajuan + 8) . ":F" . ($jumlah_pengajuan + 8 - 2) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );



            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Resume Pengajuan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Resume Pengajuan Gaji Bulanan ' . $company_name . ' - ' . $cek_tanggal_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    public function gaji_borongan_resume_bulanan_jumlah()
    {
        $bulan_gaji = $this->input->get('month_year');


        $sql = 'SELECT sum(jumlah_gaji) as jumlah FROM view_gaji_borongan WHERE month_payroll = "' . $bulan_gaji . '" ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $bulan_gaji_cek     = $this->Payroll_model->check_bulan_gaji($bulan_gaji);
                $cek_bulan_gaji     = $bulan_gaji_cek[0]->desc;
                $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji_cek[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji_cek[0]->end_date));

                $response['val'][] = array(
                    'bulan_gaji'      => $cek_bulan_gaji,
                    'jumlah_karyawan' => 0,
                    'jumlah_gaji'      => number_format($val->jumlah, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    // ========================================================================
    // 13.8.6 SLIP GAJI BORONGAN
    // ========================================================================

    public function gaji_borongan_slip()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Slip Gaji Borongan | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['desc']          = 'LAPORAN : Slip Gaji Borongan';
        $data['breadcrumbs']   = 'Slip Gaji Borongan';
        $data['path_url']      = 'report_gaji_borongan_slip';

        $data['all_companies'] = $this->Company_model->get_company();
        $data['all_bulan_gaji']    = $this->Core_model->all_bulan_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1386', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/gaji_borongan_slip", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function gaji_borongan_slip_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/gaji_borongan_slip", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $company_id = $this->input->get("company_id");
        $workstation_id = $this->input->get("workstation_id");
        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }


        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        // $history = $this->Payroll_model->cek_jumlah_gaji($this->input->get("company_id"),$start_date,$end_date);

        $history = $this->Payroll_model->get_company_payslip_perbulan_borongan($company_id,$workstation_id, $start_date, $end_date);

        // echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {

            // get addd by > template
            $user = $this->Core_model->read_user_info($r->employee_id);
            // user full name
            $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;


            $employee_id = strtoupper($user[0]->employee_id);

            $employee_name = strtoupper($full_name);

            $jumlah_gaji = $this->Payroll_model->cek_jumlah_gaji_borongan($r->employee_id, $start_date, $end_date);
            // var_dump($jumlah_gaji);return;
            if (!is_null($jumlah_gaji)) {
                $gaji_karyawan = $jumlah_gaji[0]->jumlah;
            } else {
                $gaji_karyawan = '';
            }


            if ($r->employee_id == '') {
                $ol = '<span class="blink blink-one"> 0  </span>';
            } else {
                $ol = '<ol style="margin-bottom: 0px !important;">';
                $employee = $this->Payroll_model->read_employee_kerja_borongan($r->employee_id, $start_date, $end_date);
                foreach ($employee->result() as $e) {
                    if (!is_null($employee)) {
                        $designation = $this->Designation_model->read_designation_information($e->designation_id);
                        if (!is_null($designation)) {
                            $designation_name = $designation[0]->designation_name;
                        } else {
                            $designation_name = '--';
                        }
                        $department = $this->Department_model->read_department_information($e->department_id);
                        if (!is_null($department)) {
                            $department_name = $department[0]->department_name;
                        } else {
                            $department_name = '--';
                        }
                        $ol .= '<li>' . date("d-m-Y", strtotime($e->start_date)) . ' s/d ' . date("d-m-Y", strtotime($e->end_date)) . ' (' . number_format($e->net_salary, 0, ',', '.') . ' - ' . $designation_name . ' - ' . $department_name . ') </li>';
                    } else {
                        $ol .= '--';
                    }
                }
                $ol .= '</ol>';
            }

            $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
            if (!is_null($rekening)) {
                $rekening_name = $rekening[0]->account_number;
                $bank_name = $rekening[0]->bank_name;
            } else {
                $rekening_name = '';
                $bank_name = '--';
            }

            $data[] = array(
                $no,
                $employee_id,
                $employee_name,
                number_format($gaji_karyawan, 0, ',', '.'),
                $rekening_name,
                $bank_name,
                $ol

            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function gaji_borongan_slip_jumlah()
    {
        $company_id = $this->input->get('company_id');

        $periode_id = $this->input->get("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {

            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $grouping = $this->Payroll_model->get_company_payslip_perbulan_jumlah_borongan($company_id, $start_date, $end_date);
        if (!is_null($grouping)) {
            $jumlah_karyawan = $grouping[0]->jumlah;
        } else {
            $jumlah_karyawan = '';
        }

        // company
        $company = $this->Company_model->read_company_information($company_id);
        if (!is_null($company)) {
            $company_name = $company[0]->name;
        } else {
            $company_name = '--';
        }

        $sql = 'SELECT sum(net_salary) as jumlah_gaji
                            FROM xin_salary_payslips_borongan
                            WHERE company_id = "' . $company_id . '" AND start_date >= "' . $start_date . '" AND end_date <= "' . $end_date . '"
                             ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $response['val'][] = array(
                    'start_date'     => date("d-m-Y", strtotime($start_date)),
                    'end_date'       => date("d-m-Y", strtotime($end_date)),

                    'company_name'    => $company_name,
                    'jumlah_karyawan' => $jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    public function cetak_borongan_bulanan_slip()
    {
        $system = $this->Core_model->read_setting_info(1);
        // create new PDF document
        $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

        // $key = $this->uri->segment(5);

        $company_id = $this->input->post('company_id');
        $workstation_id = $this->input->post('workstation_id');
        $periode_id = $this->input->post("periode_id");

        $tanggal = $this->Timesheet_model->read_periode_bulan($periode_id);
        if (!is_null($tanggal)) {
            $start_date    = $tanggal[0]->start_date;
            $end_date      = $tanggal[0]->end_date;
        } else {
            $start_date     = '';
            $end_date       = '';
        }

        $b_start_date = new DateTime($start_date);
        $b_end_date   = new DateTime($end_date);
        $b_end_date   = $b_end_date->modify('+1 day');

        $interval_re = new DateInterval('P1D');
        $date_range = new DatePeriod($b_start_date, $interval_re, $b_end_date);

        $month_payment = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        $employee_list = $this->Payroll_model->get_company_payslip_perbulan_cetak_borongan($company_id,$workstation_id, $start_date, $end_date);
        // echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();
        $pdf = new Pdf('P', 'mm', 'F4', true, 'UTF-8', false);

        // set document information
        $pdf->SetCreator('hris');
        $pdf->SetAuthor('Nizar Basyrewan');
        $pdf->SetTitle($this->lang->line('xin_print_payslip_borongan') . ', Periode ' . $month_payment);
        $pdf->SetSubject($this->lang->line('xin_payslip'));
        $pdf->SetKeywords($this->lang->line('xin_payslip'));

        $pdf->setFooterData(array(0, 64, 0), array(0, 64, 128));

        // set header and footer fonts
        $pdf->setHeaderFont(array('arial', '', 8));
        $pdf->setFooterFont(array('helvetica', '', 8));

        // set default monospaced font
        $pdf->SetDefaultMonospacedFont('courier');

        // set margins
        $pdf->SetMargins(5, 7, 5);
        $pdf->SetHeaderMargin(5);
        $pdf->SetPrintHeader(false);
        $pdf->SetFooterMargin(5);

        // set auto page breaks
        $pdf->SetAutoPageBreak(TRUE, 8);

        // set image scale factor
        $pdf->setImageScale(1.25);

        // set font
        $pdf->SetFont('helvetica', 'B', 8);

        // set header and footer fonts
        $pdf->setHeaderFont(array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
        $pdf->setFooterFont(array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

        // set default monospaced font
        $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

        // set image scale factor
        $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

        // ---------------------------------------------------------

        // set default font subsetting mode
        $pdf->setFontSubsetting(true);

        // Set font
        // dejavusans is a UTF-8 Unicode font, if you only need to
        // print standard ASCII chars, you can use core fonts like
        // helvetica or times to reduce file size.
        $pdf->SetFont('dejavusans', '', 8, '', true);

        // Add a page
        // This method has several options, check the source code documentation for more information.
        $pdf->AddPage('P', 'F4');
        // -----------------------------------------------------------------------------

        $columns = 2;

        // disable existing columns
        $pdf->resetColumns();

        // determine column widths
        $column_width = round(12071 / $columns);

        // set columns
        $pdf->setEqualColumns($columns, $column_width);
        // $pdf->setEqualColumns(2,185);  // KEY PART -  number of cols and width
        // $pdf->selectColumn();

        $pdf->Ln(7);

      
        
        if (count($employee_list) > 0) {

            foreach ($employee_list->result() as $r) {

                // get addd by > template
                // $user = $this->Core_model->read_user_info($r->employee_id);
                // user full name
                $full_name = $r->first_name . ' ' . $r->last_name;

                // get workstation
                // $workstation = $this->Core_model->read_workstation_info($r->workstation_id);
                if (!is_null($r->workstation_name)) {
                    $workstation_name = $r->workstation_name;
                } else {
                    $workstation_name = '--';
                }

                $jumlah_gaji = $this->Payroll_model->cek_jumlah_gaji_borongan($r->user_id, $start_date, $end_date);
                // echo $r->user_id;
                // var_dump($jumlah_gaji);return;
                if (!is_null($jumlah_gaji)) {
                    $gaji_karyawan = $jumlah_gaji[0]->jumlah;
                } else {
                    $gaji_karyawan = '';
                }

                $tbl1 = '
                                    <table border="1" cellpadding="1" cellspacing="0" width="180%" style="font-size:8px;" nobr="true">

                                            <tr>
                                                <td width="45%;" >

                                                    <table border="0" cellpadding="1" cellspacing="0" width="100%" style="font-size:8px;" >

                                                        <tr >
                                                            <td width="25%;" colspan="4" > <strong>Nama</strong> </td>
                                                            <td width="75%;" >: ' . strtoupper($full_name) . '</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="25%;" colspan="4"> <strong>Divisi</strong> </td>
                                                            <td width="75%;" >: ' . strtoupper($workstation_name) . '</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="25%;" colspan="4"> <strong>Periode</strong> </td>
                                                            <td width="75%;" >: ' . $month_payment . '</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="25%;" colspan="4"> <strong>No.Rekening</strong> </td>
                                                            <td width="75%;" >: ' . $r->rekening_name . ' (' . $r->bank_name . ')</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="100%;" colspan="5">  </td>

                                                        </tr>

                                                    </table>
                                                </td>
                                            </tr>

                                            <tr>
                                                <td width="45%;" valign="right">

                                                    <table border="1" cellpadding="1" cellspacing="0" width="100%" style="font-size:8px;" >

                                                        <tr>
                                                            <td width="30%;" align ="center" > <strong>Tanggal</strong> </td>
                                                            <td width="20%;" align ="center" > <strong>Jumlah gram</strong> </td>
                                                            <td width="25%;" align ="center" > <strong>Jumlah</strong> </td>
                                                            <td width="25%;" align ="center" > <strong>Insentif</strong> </td>

                                                        </tr>';

//

                $sql_check_produktifitas = "SELECT employee_id,gram_tanggal,SUM(gram_nilai) AS jum_gram_nilai, SUM(gram_biaya) AS jum_gram_biaya,SUM(insentif) AS jum_insentif
                FROM xin_workstation_gram_terima
                WHERE employee_id ='" . $r->employee_id . "' AND gram_tanggal >= '" . $start_date . "'  AND gram_tanggal <='" . $end_date . "' GROUP BY employee_id,gram_tanggal ";

                $arrayProduktifitas = $this->db->query($sql_check_produktifitas)->result_array();
                // var_dump($arrayProduktifitas);return;
                
                $sql_check_diperbantukan = "SELECT employee_id,commission_date,SUM(commission_amount) as commission_amount
                 FROM xin_salary_commissions WHERE employee_id ='" . $r->employee_id . "' AND commission_date >= '" . $start_date . "' AND commission_date <= '" . $end_date . "' AND flag = '1' GROUP BY   employee_id,commission_date";
                // print($sql_check_diperbantukan);
                $arrayCommisionHelp = $this->db->query($sql_check_diperbantukan)->result_array();
                $count = 1;
                foreach ($date_range as $date) {

                    $attendance_date =  $date->format("Y-m-d");
                    $tday            = $this->Timesheet_model->conHariNama(date("D", strtotime($attendance_date)));
                    
                    // =========================================================================================================
                    // TAMPILKAN
                    // =========================================================================================================
                    $gram_nilai = '0';
                    $gram_biaya = '0';
                    $jum_insentif = '0';
                    $commissions_help_amount = '0';
                    $check_produktifitas = array_search($attendance_date, array_column($arrayProduktifitas, 'gram_tanggal'));
                    // if($count ==2){
                    //     echo 123;
                    //     var_dump($arrayProduktifitas[$check_produktifitas]['jum_gram_biaya']);
                    //     if (!is_bool($check_produktifitas)) {
                    //         echo $arrayProduktifitas[$check_produktifitas]['jum_gram_biaya'];
                    //     }
                    //     var_dump($check_produktifitas);return;
                    // }
                    $count++;
                    $check_commision = array_search($attendance_date, array_column($arrayCommisionHelp, 'commission_date'));
                    if (!is_bool($check_produktifitas)) {
                    // if ($check_produktifitas) {
                        # code...
                        $gram_nilai       =  $arrayProduktifitas[$check_produktifitas]['jum_gram_nilai'];
                        $gram_biaya       =  $arrayProduktifitas[$check_produktifitas]['jum_gram_biaya'];
                        $jum_insentif      =  $arrayProduktifitas[$check_produktifitas]['jum_insentif'];
                    }
                    if ($check_commision) {
                        # code...
                        $commissions_help_amount       =  $arrayProduktifitas[$check_commision]['commission_amount']; 
                    }

                    if ($commissions_help_amount == '0') {

                        $jumlah = number_format($gram_biaya, 0, ',', '.');
                        $jumlah_insentif = number_format($jum_insentif, 0, ',', '.');
                    } else {

                        $jumlah = number_format($commissions_help_amount, 0, ',', '.') . ' *';
                    }

                    $tbl1 .= '

                                                                <tr>
                                                                    <td width="30%;" align ="center" > ' . $tday . ' ' . date("d-m-Y", strtotime($attendance_date)) . ' </td>
                                                                    <td width="20%;" align ="center" > ' . number_format($gram_nilai, 0, ',', '.') . ' </td>
                                                                    <td width="25%;" align ="right" > ' . $jumlah . ' &nbsp;&nbsp;&nbsp;</td>
                                                                    <td width="25%;" align ="right" > ' . $jumlah_insentif . ' &nbsp;&nbsp;&nbsp;</td>

                                                                </tr>';
                }


                // <tr>
                // 	<td width="65%;" colspan="2"> <strong>Kehadiran</strong> </td>
                // 	<td width="35%;" align="right" >'.number_format($r->jumlah_hadir, 0, ',', '.').' &nbsp;&nbsp;&nbsp;</td>
                // </tr>

                // <tr>
                // 	<td width="65%;" colspan="2"> <strong>Produktifitas</strong> </td>
                // 	<td width="35%;" align="right" > '.number_format($r->jumlah_gram, 0, ',', '.').' &nbsp;&nbsp;&nbsp;</td>
                // </tr>
                $tbl1 .= '


                                                        <tr>
                                                            <td align="middle" valign="middle" width="35%;" rowspan="2"> <strong>Revisi</strong> </td>
                                                            <td width="30%;" > <strong>Tambahan</strong> </td>
                                                            <td width="35%;" align="right"> ' . number_format($r->commissions_amount, 0, ',', '.') . ' &nbsp;&nbsp;&nbsp;</td>
                                                        </tr>

                                                        <tr>

                                                            <td width="30%;" > <strong>Potongan</strong> </td>
                                                            <td width="35%;" align="right"> ' . number_format($r->minus_amount, 0, ',', '.') . ' &nbsp;&nbsp;&nbsp;</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="65%;" colspan="2"> <strong>BPJS Kes</strong> </td>
                                                            <td width="35%;" align="right" > ' . number_format($r->bpjs_kes_amount, 0, ',', '.') . ' &nbsp;&nbsp;&nbsp;</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="65%;" colspan="2"> <strong>BPJS TK</strong> </td>
                                                            <td width="35%;" align="right"> ' . number_format($r->bpjs_tk_amount, 0, ',', '.') . ' &nbsp;&nbsp;&nbsp;</td>
                                                        </tr>

                                                        <tr>
                                                            <td width="65%;" colspan="2"  align="right"> Jumlah yang Diterima &nbsp;</td>
                                                            <td width="35%;" align="right"> ' . number_format($gaji_karyawan, 0, ',', '.') . ' &nbsp;&nbsp;&nbsp;</td>
                                                        </tr>

                                                    </table>
                                                </td>
                                            </tr>


                                    </table>';

                $pdf->writeHTML($tbl1, true, false, true, false, 'J');
                // break;
            }
        }

        // $pdf->resetColumns();

        //// break..
        $pdf->Ln(3);

        // Close and output PDF document
        // This method has several options, check the source code documentation for more information.


        //Close and output PDF document
        ob_start();

        $pdf->Output('Slip_Gaji_Harian_Periode_' . $month_payment . '.pdf', 'I');
        ob_end_flush();
    }

    // ================================================================================
    // 07. MODUL FINANCE
    // ================================================================================

    // ****************************************************************************
    // >>  12.6 BULANAN
    // ****************************************************************************

    // ========================================================================
    // 12.6.3 REKAP
    // ========================================================================

    public function finance_rekap_bulanan()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Finance - Rekap Gaji Bulanan | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['desc']          = 'LAPORAN : Finance - Rekap Gaji Bulanan';
        $data['breadcrumbs']   = 'Finance - Rekap Gaji Bulanan';
        $data['path_url']      = 'reports_finance_rekap_bulanan';

        $data['all_companies'] = $this->Company_model->get_company();
        $data['all_bulan_gaji']    = $this->Core_model->all_bulan_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1363', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/finance_rekap_bulanan", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function finance_rekap_bulanan_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/finance_rekap_bulanan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("month_year");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_payslip_history_month($this->input->get("company_id"), $this->input->get("month_year"));

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {
            $user = $this->Core_model->read_user_info($r->employee_id);
            if (!is_null($user)) {

                $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;
                $emp_link = $user[0]->employee_id;

                $bulan_gaji_cek     = $this->Payroll_model->check_bulan_gaji($r->salary_month);
                $month_payment     = $bulan_gaji_cek[0]->desc;


                $p_amount = $r->net_salary;

                // get date > created at > and format
                $created_at = $this->Core_model->set_date_format($r->created_at);
                // get designation
                $designation = $this->Designation_model->read_designation_information($user[0]->designation_id);
                if (!is_null($designation)) {
                    $designation_name = $designation[0]->designation_name;
                } else {
                    $designation_name = '--';
                }

                // department
                $department = $this->Department_model->read_department_information($user[0]->department_id);
                if (!is_null($department)) {
                    $department_name = $department[0]->department_name;
                } else {
                    $department_name = '--';
                }

                $department_designation = $designation_name . ' (' . $department_name . ')';

                // get company
                $company = $this->Core_model->read_company_info($user[0]->company_id);
                if (!is_null($company)) {
                    $comp_name = $company[0]->name;
                } else {
                    $comp_name = '--';
                }
                // bank account
                $bank_account = $this->Employees_model->get_employee_bank_account_last($user[0]->user_id);
                if (!is_null($bank_account)) {
                    $account_number = $bank_account[0]->account_number;
                    $bank_name = $bank_account[0]->bank_code . '-' . $bank_account[0]->bank_name;
                } else {
                    $account_number = '--';
                    $bank_name = '--';
                }


                $ifull_name = nl2br($full_name . "\r\n <small class='text-muted'><i>" . $this->lang->line('xin_employees_id') . ': ' . $emp_link . "<i></i></i></small>\r\n <small class='text-muted'><i>" . $department_designation . '<i></i></i></small>');


                $data[] = array(
                    $no,
                    $month_payment,
                    $full_name,
                    $comp_name,
                    $department_name,
                    $designation_name,
                    number_format($p_amount, 0, ',', '.'),
                    $account_number,
                    $bank_name
                );
                $no++;
            }
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function finance_rekap_bulanan_jumlah()
    {
        $bulan_gaji = $this->input->get('month_year');
        $comp_gaji    = $this->input->get("company_id");

        $sql = 'SELECT sum(jumlah) as jumlah_karyawan, sum(net_salary) as jumlah_gaji
                            FROM view_salary_month_jumlah WHERE company_id = "' . $comp_gaji . '" AND salary_month = "' . $bulan_gaji . '" ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $bulan_gaji_cek     = $this->Payroll_model->check_bulan_gaji($bulan_gaji);
                $cek_bulan_gaji     = $bulan_gaji_cek[0]->desc;
                $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji_cek[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji_cek[0]->end_date));

                $response['val'][] = array(
                    'bulan_gaji'      => $cek_bulan_gaji,
                    'jumlah_karyawan' => $val->jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    public function finance_export_bulanan_rekap()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/finance_rekap_bulanan", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');
        $month_year   = $this->input->post('month_year');


        $bulan_gaji = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji   = $bulan_gaji[0]->desc;
        $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji[0]->end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);

        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $departemen = $this->Payroll_model->get_comp_template_dept_bulanan_lihat($company_id, $month_year);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        if (count($departemen) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:G1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:G2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:G3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );



            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "REKAP GAJI BULANAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object
            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:G5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:G6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            // $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('B5:G5000')->getAlignment()->setWrapText(true);

            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getNumberFormat()->setFormatCode('0');
            // Kanan

            $objPHPExcel->getActiveSheet()->getStyle("E7:E2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            // $objPHPExcel->setActiveSheetIndex(0)->getStyle("F7:F2560")->getNumberFormat()->setFormatCode()->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT)));
            // $objPHPExcel->getActiveSheet()->getStyle("F7:F2560")->getNumberFormat()->setFormatCode()->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER)));

            // $objPHPExcel->getActiveSheet()->getStyle("F7:F2560")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("A", "B", "C", "D", "E", "F", "G");

            $val = array("", "No", "Nama", 'Jabatan', "Total Gaji", "No Rekening", "Bank");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );


            for ($a = 0; $a < 7; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(45); // Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(35); // Jabatan

                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20); // Total Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20); // No.Rekening
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20); // No.Rekening

                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $dep = 6;
            $baris = $dep + 1;



            // $da = $baris+1;
            //$mo = $no+$baris;
            foreach ($departemen->result() as $d) {

                $grouping = $this->Employees_model->get_employee_by_department_company_bulanan($d->company_id, $d->department_id, $month_year);
                if (!is_null($grouping)) {
                    $jumlah_karyawan = $grouping[0]->jumlah;
                } else {
                    $jumlah_karyawan = '';
                }

                if ($jumlah_karyawan > 0) {

                    // Karyawan Departemen
                    $department = $this->Department_model->read_department_information($d->department_id);
                    if (!is_null($department)) {
                        $department_name = $department[0]->department_name;
                    } else {
                        $department_name = '';
                    }

                    // $objset->setCellValue("B".$baris, );
                    $objset->setCellValue("B" . ($baris + 1) . "", $department_name . ', Jumlah  : ' . $jumlah_karyawan . ' Karyawan');

                    $objset->getStyle("B" . ($baris + 1) . ":G" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'B8CCE4')
                                ),

                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                ),

                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                )
                            )
                        );

                    $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":G" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'B8CCE4')
                                ),
                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )
                            )
                        );


                    $objset->mergeCells("B" . ($baris + 1) . ":D" . ($baris + 1) . "")
                        ->getStyle("B" . ($baris + 1) . ":D" . ($baris + 1) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                                ),
                                "font" => array(
                                    "size" => 11,
                                    "bold" => true,
                                    "color" => array("rgb" => "000000")
                                )

                            )
                        );

                    $objset->getStyle("E" . ($jumlah_karyawan + $baris + 2) . ":E" . ($jumlah_karyawan + $baris + 2) . "")
                        ->getNumberFormat()
                        ->setFormatCode("#,##0")
                        ->applyFromArray(
                            array(

                                'alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                                ),

                            )
                        );

                    $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Total ');

                    $objset->setCellValue("E" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(E" . ($baris + 2) . ":E" . ($jumlah_karyawan + $baris + 1) . ")");


                    // $objset->setCellValue("B".($jumlah_karyawan+$baris+3)."", '');

                    $payslip = $this->Payroll_model->get_comp_template_bulanan_dep_lihat($d->company_id, 1, $month_year, $d->department_id);

                    $no = 1;
                    $baris =  $baris + 2;
                    foreach ($payslip->result() as $r) {

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        // Karyawan ID
                        $emp_id = $r->employee_id;

                        $user_info = $this->Core_model->read_user_info($emp_id);
                        $emp_nik   = $user_info[0]->employee_id;
                        $full_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;

                        // ====================================================================================================================
                        // DATA KARYAWAN
                        // ====================================================================================================================

                        $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
                        if (!is_null($rekening)) {
                            $rekening_name = $rekening[0]->account_number;
                            $bank_name = $rekening[0]->bank_name;
                        } else {
                            $rekening_name = '';
                            $bank_name = '';
                        }

                        // Karyawan Posisi
                        $designation = $this->Designation_model->read_designation_information($r->designation_id);
                        if (!is_null($designation)) {
                            $designation_name = $designation[0]->designation_name;
                        } else {
                            $designation_name = '';
                        }

                        $jabatan = $designation_name;


                        //pemanggilan sesuaikan dengan nama kolom tabel

                        $objset->setCellValue("B" . $baris, $no);                  // No
                        $objset->setCellValue("C" . $baris, $full_name);          // Nama Karyawan
                        $objset->setCellValue("D" . $baris, $jabatan);              // Jabatan
                        $objset->setCellValue("E" . $baris, $r->net_salary);     // Total Gaji
                        $objset->setCellValue("F" . $baris, $r->rekening_name);  // No.Rekening
                        $objset->setCellValue("G" . $baris, $bank_name);         // Bank

                        $no++;
                        $baris++;
                    }

                    $dep++;
                }
            }

            $total_emp = $this->Employees_model->get_employee_by_company_bulanan($d->company_id, $month_year);
            if (!is_null($total_emp)) {
                $total_karyawan = $total_emp[0]->jumlah;
            } else {
                $total_karyawan = '';
            }

            $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 1) . "", $company_name);
            $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Jumlah Karyawan Bulan ' . $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ') : ');


            $objset->getStyle("B" . ($jumlah_karyawan + $baris + 1) . ":G" . ($jumlah_karyawan + $baris + 1) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'E26B0A')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 12,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":G" . ($jumlah_karyawan + $baris + 2) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'F7F1A5')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 1) . ":D" . ($jumlah_karyawan + $baris + 1) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris + 1) . ":D" . ($jumlah_karyawan + $baris + 1) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":D" . ($jumlah_karyawan + $baris + 2) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->getStyle("E" . ($jumlah_karyawan + $baris + 1) . ":E" . ($jumlah_karyawan + $baris + 1) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );

            $grand_total = $this->Payroll_model->get_comp_template_bulanan_lihat($d->company_id, 1, $month_year);

            foreach ($grand_total->result() as $g) {

                $objset->setCellValue("E" . ($jumlah_karyawan + $baris + 1) . "", $g->net_salary);
                $objset->setCellValue("E" . ($jumlah_karyawan + $baris + 2) . "", $total_karyawan);
            }
            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Rekap Gaji Bulanan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Rekap Gaji Bulanan ' . $company_name . ' - ' . $cek_bulan_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }
    // public function finance_export_rekap_bulanan()
    // {
    // 	$data['title'] = $this->Core_model->site_title();
    // 	$session = $this->session->userdata('username');

    // 	if(!empty($session)){
    // 		$this->load->view("admin/reports/finance_rekap_bulanan", $data);
    // 	} else {
    // 		redirect('admin/');
    // 	}

    // 	$company_id   = $this->input->post('company');
    // 	$month_year   = $this->input->post('month_year');


    // 	$bulan_gaji = $this->Payroll_model->check_bulan_gaji($month_year);
    // 	$cek_bulan_gaji   = $bulan_gaji[0]->desc;
    // 	$cek_tanggal_gaji   = date("d-m-Y",strtotime($bulan_gaji[0]->start_date)).' s/d '.date("d-m-Y",strtotime($bulan_gaji[0]->end_date));

    // 	$company = $this->Core_model->read_company_info($company_id);
    // 	$company_name = $company[0]->name;

    // 	// echo "<pre>";
    // 	// print_r($company);
    // 	// print_r($month_year);

    // 	// echo "</pre>";
    // 	// die;

    // 	$role_resources_ids = $this->Core_model->user_role_resource();
    // 	$user_info          = $this->Core_model->read_user_info($session['user_id']);

    // 	$departemen = $this->Payroll_model->get_comp_template_dept_bulanan_lihat($company_id,$month_year);

    // 	// $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

    // 	if (count($departemen) > 0) {

    // 		$objPHPExcel = new PHPExcel();

    //            // Set properties

    // 		$objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
    // 					 ->setLastModifiedBy("Nizar Basyrewan")
    // 					 ->setTitle("Office 2007 XLSX Test Document")
    // 					 ->setSubject("Office 2007 XLSX Test Document")
    // 					 ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
    // 					 ->setKeywords("office 2007 openxml php")
    // 					 ->setCategory("Test result file");

    // 		$objPHPExcel->setActiveSheetIndex(0)
    // 		            ->mergeCells("B1:G1")
    // 		            ->getStyle("B1:B1")
    // 		            ->applyFromArray(
    // 			              array(
    // 			              	'alignment' => array(
    // 								'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
    // 							),
    // 			              	"font" => array(
    // 			              		"size" => 16,
    // 			              		"bold" => true,
    // 			              		"color" => array("rgb" => "363636")
    // 			              	)
    // 			              )
    // 			          );

    // 		$objPHPExcel->setActiveSheetIndex(0)
    // 		            ->mergeCells("B2:G2")
    // 		            ->getStyle("B2:B2")
    // 		            ->applyFromArray(
    // 			              array(
    // 			              	'alignment' => array(
    // 								'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
    // 							),
    // 			              	"font" => array(
    // 			              		"size" => 14,
    // 			              		"bold" => true,
    // 			              		"color" => array("rgb" => "363636")
    // 			              	)
    // 			              )
    // 			          );

    // 		$objPHPExcel->setActiveSheetIndex(0)
    // 		            ->mergeCells("B3:G3")
    // 		            ->getStyle("B3:B3")
    // 		            ->applyFromArray(
    // 			              array(
    // 			              	'alignment' => array(
    // 								'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
    // 							),
    // 			              	"font" => array(
    // 			              		"size" => 11,
    // 			              		"bold" => true,
    // 			              		"color" => array("rgb" => "363636")
    // 			              	)
    // 			              )
    // 			          );



    // 		$objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

    // 		$objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "REKAP GAJI BULANAN");

    // 		$objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji.' ('.$cek_tanggal_gaji.')');

    // 		$objPHPExcel->getActiveSheet()->freezePane('E7');

    // 		$objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object
    // 		$objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

    // 		$objPHPExcel->getActiveSheet()->getStyle("B5:G5")->applyFromArray(
    // 			array(
    // 				'fill' => array(
    // 					'type' => PHPExcel_Style_Fill::FILL_SOLID,
    // 					'color' => array('rgb' => 'CCC0DA')
    // 				),
    // 				'font' => array(
    // 					'color' => array('rgb' => '363636')
    // 				),
    // 				'borders' => array(
    // 			          'allborders' => array(
    // 			              'style' => PHPExcel_Style_Border::BORDER_THIN
    // 			          )
    // 			    )
    // 			)
    // 		);

    // 		$objPHPExcel->getActiveSheet()->getStyle("B6:G6")->applyFromArray(
    // 			array(
    // 				'fill' => array(
    // 					'type' => PHPExcel_Style_Fill::FILL_SOLID,
    // 					'color' => array('rgb' => 'CCC0DA')
    // 				),
    // 				'font' => array(
    // 					'color' => array('rgb' => '363636')
    // 				),
    // 				'borders' => array(
    // 			          'allborders' => array(
    // 			              'style' => PHPExcel_Style_Border::BORDER_THIN
    // 			        )
    // 			    )
    // 			)
    // 		);

    // 		// setting kolom rata
    // 		$objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
    // 		$objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    // 		$objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    // 		// $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
    // 		$objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

    // 		$objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

    // 		$objPHPExcel->getActiveSheet()->getStyle('B5:G5000')->getAlignment()->setWrapText(true);

    // 		$objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getNumberFormat()->setFormatCode('0');
    // 		// Kanan

    // 		$objPHPExcel->getActiveSheet()->getStyle("E7:E2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
    // 		// $objPHPExcel->setActiveSheetIndex(0)->getStyle("F7:F2560")->getNumberFormat()->setFormatCode()->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT)));
    // 		// $objPHPExcel->getActiveSheet()->getStyle("F7:F2560")->getNumberFormat()->setFormatCode()->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER)));

    // 		// $objPHPExcel->getActiveSheet()->getStyle("F7:F2560")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

    // 		// Merge
    // 		$objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
    // 		$objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

    // 		$objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
    // 		$objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

    // 		$objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
    // 		$objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

    // 		$objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
    // 		$objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

    // 		$objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
    // 		$objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


    // 		$objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
    // 		$objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


    //            //table header
    // 		$cols = array("A","B", "C", "D", "E", "F", "G");

    // 		$val = array("", "No", "Nama", 'Jabatan', "Total Gaji", "No Rekening", "Bank");

    // 		$style = array(
    // 			'alignment' => array(
    // 				'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
    // 			)
    // 		);


    // 		for ($a = 0; $a < 7; $a++) {

    // 			$objset->setCellValue($cols[$a].'5', $val[$a]);

    //                // Setting lebar cell
    //                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
    // 			$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // No
    // 			$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(45); // Nama
    // 			$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(35); // Jabatan

    // 			$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20); // Total Gaji
    // 			$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20); // No.Rekening
    // 			$objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20); // No.Rekening

    // 			$style = array(
    // 				'alignment' => array(
    // 					'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
    // 				)
    // 			);


    // 			$objPHPExcel->getActiveSheet()->getStyle($cols[$a].'5')->applyFromArray($style);

    // 		}


    // 		$dep = 6;
    // 		$baris = $dep+1;



    // 		// $da = $baris+1;
    // 		//$mo = $no+$baris;
    // 		foreach($departemen->result() as $d) {

    // 			$grouping = $this->Employees_model->get_employee_by_department_company_bulanan($d->company_id,$d->department_id,$month_year);
    //          		if(!is_null($grouping)){
    // 				$jumlah_karyawan = $grouping[0]->jumlah;
    // 			} else {
    // 				$jumlah_karyawan = '';
    // 			}

    // 			if ($jumlah_karyawan > 0 ){

    // 				// Karyawan Departemen
    // 				$department = $this->Department_model->read_department_information($d->department_id);
    // 				if(!is_null($department)){
    // 					$department_name = $department[0]->department_name;
    // 				} else {
    // 					$department_name = '';
    // 				}

    // 				// $objset->setCellValue("B".$baris, );
    // 				$objset->setCellValue("B".($baris+1)."", $department_name.', Jumlah  : '.$jumlah_karyawan.' Karyawan');

    // 				$objset ->getStyle("B".($baris+1).":G".($baris+1)."")
    // 			            ->applyFromArray(
    // 				              array(
    // 				              	'fill' => array(
    // 									'type' => PHPExcel_Style_Fill::FILL_SOLID,
    // 									'color' => array('rgb' => 'B8CCE4')
    // 								),

    // 				              	"font" => array(
    // 				              		"size" => 11,
    // 				              		"bold" => true,
    // 				              		"color" => array("rgb" => "000000")
    // 				              	),

    // 				              	'borders' => array(
    // 							          'allborders' => array(
    // 							              'style' => PHPExcel_Style_Border::BORDER_THIN
    // 							          )
    // 							    )
    // 				              )
    // 				          );

    // 			    $objset ->getStyle("B".($jumlah_karyawan+$baris+2).":G".($jumlah_karyawan+$baris+2)."")
    // 			            ->applyFromArray(
    // 				              array(
    // 				              	'fill' => array(
    // 									'type' => PHPExcel_Style_Fill::FILL_SOLID,
    // 									'color' => array('rgb' => 'B8CCE4')
    // 								),
    // 								'borders' => array(
    // 							          'allborders' => array(
    // 							              'style' => PHPExcel_Style_Border::BORDER_THIN
    // 							        )
    // 							    ),
    // 				              	"font" => array(
    // 				              		"size" => 11,
    // 				              		"bold" => true,
    // 				              		"color" => array("rgb" => "000000")
    // 				              	)
    // 				              )
    // 				          );


    // 				$objset ->mergeCells("B".($baris+1).":D".($baris+1)."")
    // 						->getStyle("B".($baris+1).":D".($baris+1)."")
    // 				        ->applyFromArray(
    // 				              array(

    // 				              	'alignment' => array(
    // 									'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
    // 								),
    // 								"font" => array(
    // 				              		"size" => 11,
    // 				              		"bold" => true,
    // 				              		"color" => array("rgb" => "000000")
    // 				              	)

    // 				              )
    // 				          );

    // 				$objset ->mergeCells("B".($jumlah_karyawan+$baris+2).":D".($jumlah_karyawan+$baris+2)."")
    // 						->getStyle("B".($jumlah_karyawan+$baris+2).":D".($jumlah_karyawan+$baris+2)."")
    // 				        ->applyFromArray(
    // 				              array(

    // 				              	'alignment' => array(
    // 									'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
    // 								),
    // 								"font" => array(
    // 				              		"size" => 11,
    // 				              		"bold" => true,
    // 				              		"color" => array("rgb" => "000000")
    // 				              	)

    // 				              )
    // 				          );

    // 				$objset ->getStyle("E".($jumlah_karyawan+$baris+2).":E".($jumlah_karyawan+$baris+2)."")
    // 				    ->getNumberFormat()
    // 				    ->setFormatCode("#,##0")
    // 		            ->applyFromArray(
    // 			              array(

    // 			              	'alignment' => array(
    // 								'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
    // 							),

    // 			              )
    // 			          );

    // 				$objset->setCellValue("B".($jumlah_karyawan+$baris+2)."", 'Total ');

    // 	            $objset->setCellValue("E".($jumlah_karyawan+$baris+2)."", "=SUM(E".($baris+2).":E".($jumlah_karyawan+$baris+1).")");


    // 				// $objset->setCellValue("B".($jumlah_karyawan+$baris+3)."", '');

    // 		        $payslip = $this->Payroll_model->get_comp_template_bulanan_dep_lihat($d->company_id,1,$month_year,$d->department_id);

    // 		        $no = 1;
    // 		        $baris =  $baris+2;
    // 		        foreach($payslip->result() as $r) {

    // 		                // ====================================================================================================================
    // 						// DATA KARYAWAN
    // 						// ====================================================================================================================

    // 							// Karyawan ID
    // 							$emp_id = $r->employee_id;

    // 							$user_info = $this->Core_model->read_user_info( $emp_id );
    // 							$emp_nik   = $user_info[0]->employee_id;
    // 							$full_name = $user_info[0]->first_name.' '.$user_info[0]->last_name;

    // 						// ====================================================================================================================
    // 						// DATA KARYAWAN
    // 						// ====================================================================================================================

    // 							$rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
    // 			          		if(!is_null($rekening)){
    // 								$rekening_name = $rekening[0]->account_number;
    // 								$bank_name = $rekening[0]->bank_name;
    // 							} else {
    // 								$rekening_name = '';
    // 								$bank_name = '';
    // 							}

    // 							// Karyawan Posisi
    // 							$designation = $this->Designation_model->read_designation_information($r->designation_id);
    // 							if(!is_null($designation)){
    // 								$designation_name = $designation[0]->designation_name;
    // 							} else {
    // 								$designation_name = '';
    // 							}

    // 							$jabatan = $designation_name;


    // 		                //pemanggilan sesuaikan dengan nama kolom tabel

    // 						$objset->setCellValue("B" . $baris, $no); 				 // No
    // 						$objset->setCellValue("C" . $baris, $full_name); 		 // Nama Karyawan
    // 						$objset->setCellValue("D" . $baris, $jabatan); 			 // Jabatan
    // 						$objset->setCellValue("E" . $baris, $r->net_salary);     // Total Gaji
    // 		                $objset->setCellValue("F" . $baris, $r->rekening_name);  // No.Rekening
    // 		                $objset->setCellValue("G" . $baris, $bank_name);         // Bank

    // 						$no++;
    // 						$baris++;
    // 				}

    // 				$dep++;
    // 			}
    // 		}

    // 		$total_emp = $this->Employees_model->get_employee_by_company_bulanan($d->company_id,$month_year);
    //         		if(!is_null($total_emp)){
    // 			$total_karyawan = $total_emp[0]->jumlah;
    // 		} else {
    // 			$total_karyawan = '';
    // 		}

    // 		$objset->setCellValue("B".($jumlah_karyawan+$baris+1)."", $company_name);
    // 		$objset->setCellValue("B".($jumlah_karyawan+$baris+2)."", 'Jumlah Karyawan Bulan '.$cek_bulan_gaji.' ('.$cek_tanggal_gaji.') : ');


    // 		$objset->getStyle("B".($jumlah_karyawan+$baris+1).":G".($jumlah_karyawan+$baris+1)."")
    // 		            ->applyFromArray(
    // 			              array(
    // 			              	'fill' => array(
    // 								'type' => PHPExcel_Style_Fill::FILL_SOLID,
    // 								'color' => array('rgb' => 'E26B0A')
    // 							),
    // 							'borders' => array(
    // 						          'allborders' => array(
    // 						              'style' => PHPExcel_Style_Border::BORDER_THIN
    // 						        )
    // 						    ),
    // 			              	"font" => array(
    // 			              		"size" => 12,
    // 			              		"bold" => true,
    // 			              		"color" => array("rgb" => "000000")
    // 			              	)
    // 			              )
    // 			          );

    // 		$objset->getStyle("B".($jumlah_karyawan+$baris+2).":G".($jumlah_karyawan+$baris+2)."")
    // 		            ->applyFromArray(
    // 			              array(
    // 			              	'fill' => array(
    // 								'type' => PHPExcel_Style_Fill::FILL_SOLID,
    // 								'color' => array('rgb' => 'F7F1A5')
    // 							),
    // 							'borders' => array(
    // 						          'allborders' => array(
    // 						              'style' => PHPExcel_Style_Border::BORDER_THIN
    // 						        )
    // 						    ),
    // 			              	"font" => array(
    // 			              		"size" => 11,
    // 			              		"bold" => true,
    // 			              		"color" => array("rgb" => "000000")
    // 			              	)
    // 			              )
    // 			          );

    // 		$objset->mergeCells("B".($jumlah_karyawan+$baris+1).":D".($jumlah_karyawan+$baris+1)."")
    // 					->getStyle("B".($jumlah_karyawan+$baris+1).":D".($jumlah_karyawan+$baris+1)."")
    // 			        ->applyFromArray(
    // 			              array(

    // 			              	'alignment' => array(
    // 								'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
    // 							),
    // 			              )
    // 			          );

    // 		$objset->mergeCells("B".($jumlah_karyawan+$baris+2).":D".($jumlah_karyawan+$baris+2)."")
    // 					->getStyle("B".($jumlah_karyawan+$baris+2).":D".($jumlah_karyawan+$baris+2)."")
    // 			        ->applyFromArray(
    // 			              array(

    // 			              	'alignment' => array(
    // 								'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
    // 							),
    // 			              )
    // 			          );

    // 		$objset ->getStyle("E".($jumlah_karyawan+$baris+1).":E".($jumlah_karyawan+$baris+1)."")
    // 			    ->getNumberFormat()
    // 			    ->setFormatCode("#,##0")
    // 	            ->applyFromArray(
    // 		              array(

    // 		              	'alignment' => array(
    // 							'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
    // 						),
    // 		              )
    // 		          );

    // 		$grand_total = $this->Payroll_model->get_comp_template_bulanan_lihat($d->company_id,1,$month_year);

    // 		foreach($grand_total->result() as $g) {

    // 			$objset->setCellValue("E".($jumlah_karyawan+$baris+1)."", $g->net_salary);
    // 			$objset->setCellValue("E".($jumlah_karyawan+$baris+2)."", $total_karyawan);
    // 		}
    // 		// Rename worksheet
    // 		$objPHPExcel->getActiveSheet()->setTitle('Rekap Gaji Bulanan');

    // 		$objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

    // 		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
    // 		$objPHPExcel->setActiveSheetIndex(0);

    // 		// $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
    // 		$objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
    // 		$filename = 'Rekap Gaji Bulanan '.$company_name.' - '.$cek_bulan_gaji;

    // 		 //sesuaikan headernya
    // 		ob_end_clean();

    // 		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    // 		header("Content-Disposition: attachment; filename=".$filename.".xlsx");

    // 	    header("Cache-Control: no-store, no-cache, must-revalidate");
    //    		header("Cache-Control: post-check=0, pre-check=0", false);

    // 	    // Date in the past
    // 	    header('Last-Modified: '.gmdate('D, d M Y H:i:s').' GMT');

    // 	    // HTTP/1.1
    // 	    header("Pragma: no-cache");

    // 		$objWriter->save('php://output');
    // 		exit;
    // 	} else {
    // 		redirect('Excel');
    // 	}
    // }

    // ----------------------
    public function finance_rekap_bulanan_departemen_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/finance_rekap_bulanan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("month_year");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_payslip_history_month_departemen($this->input->get("company_id"), $this->input->get("month_year"));

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {

            $bulan_gaji_cek     = $this->Payroll_model->check_bulan_gaji($r->salary_month);
            $month_payment     = $bulan_gaji_cek[0]->desc;


            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '--';
            }

            $k_amount = $r->jumlah_karyawan;

            $p_amount = $r->jumlah_gaji;

            $data[] = array(
                $no,
                $month_payment,
                $department_name,
                number_format($k_amount, 0, ',', '.'),
                number_format($p_amount, 0, ',', '.'),
                '&nbsp; <span class="label label-success">' . $this->lang->line('xin_payroll_paid') . '</span>'
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function finance_rekap_bulanan_departemen_jumlah()
    {
        $bulan_gaji = $this->input->get('month_year');
        $comp_gaji    = $this->input->get("company_id");

        $sql = 'SELECT sum(jumlah) as jumlah_karyawan, sum(net_salary) as jumlah_gaji
                            FROM view_salary_month_jumlah WHERE company_id = "' . $comp_gaji . '" AND salary_month = "' . $bulan_gaji . '" ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $bulan_gaji_cek     = $this->Payroll_model->check_bulan_gaji($bulan_gaji);
                $cek_bulan_gaji     = $bulan_gaji_cek[0]->desc;
                $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji_cek[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji_cek[0]->end_date));

                $response['val'][] = array(
                    'bulan_gaji'      => $cek_bulan_gaji,
                    'jumlah_karyawan' => $val->jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    // ========================================================================
    // 12.6.4 RESUME TAHUNAN
    // ========================================================================

    public function finance_resume_tahunan_bulanan()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']           = 'Finance - Resume Tahunan | ' . $this->Core_model->site_title();
        $data['icon']            = '<i class="fa fa-print"></i>';
        $data['desc']            = 'LAPORAN : Finance - Resume Tahunan';
        $data['breadcrumbs']     = 'Finance - Resume Tahunan';
        $data['path_url']        = 'reports_finance_resume_tahunan';

        $data['all_companies']   = $this->Company_model->get_company();
        $data['all_tahun_gaji']  = $this->Core_model->all_tahun_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1364', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/finance_resume_tahunan_bulanan", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function finance_resume_tahunan_bulanan_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/finance_resume_tahunan_bulanan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("tahun_gaji");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_payslip_history_year($this->input->get("company_id"), $this->input->get("tahun_gaji"));

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {
            $data[] = array(
                $no,
                date("F", strtotime($r->salary_month)),
                $r->jumlah,
                number_format($r->net_salary, 0, ',', '.'),
                '&nbsp; <span class="label label-success">' . $this->lang->line('xin_payroll_paid') . '</span>'
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function finance_export_resume_tahunan_bulanan()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/finance_resume_tahunan_bulanan", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');
        $month_year   = $this->input->post('month_year');


        $bulan_gaji         = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji     = $bulan_gaji[0]->desc;
        $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji[0]->end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);
        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $departemen = $this->Payroll_model->get_comp_template_dept_bulanan_resume($company_id);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        if (count($departemen) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:Y1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:Y2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:Y3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );



            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "REKAP GAJI BULANAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object
            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object



            $objPHPExcel->getActiveSheet()->getStyle("B5:Y5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );




            $objPHPExcel->getActiveSheet()->getStyle("B6:Y6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('B5:W5000')->getAlignment()->setWrapText(true);

            // Kanan

            $objPHPExcel->setActiveSheetIndex(0)->getStyle("I7:I2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("J7:J2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("K7:K2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("L7:L2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("M7:M2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("N7:N2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("O7:O2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("P7:P2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("Q7:Q2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("R7:R2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("S7:S2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("T7:T2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("U7:U2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("V7:V2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("W7:W2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));
            $objPHPExcel->setActiveSheetIndex(0)->getStyle("X7:X2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));

            $objPHPExcel->getActiveSheet()->getStyle('Y7:Y2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('I5:I6');
            $objPHPExcel->getActiveSheet()->getStyle('I5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            $objPHPExcel->getActiveSheet()->mergeCells('J5:O5');

            $objPHPExcel->getActiveSheet()->mergeCells('P5:W5');

            $objPHPExcel->getActiveSheet()->mergeCells('X5:X6');
            $objPHPExcel->getActiveSheet()->getStyle('X5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('Y5:Y6');
            $objPHPExcel->getActiveSheet()->getStyle('Y5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y");

            $val = array("No", "Nama", 'Jabatan', "Status", "Grade", "Tanggal Kerja", "Masa Kerja", "Gaji Pokok", "Penambah", "K", "L", "M", "N", "O", "Pengurang", "Q", "R", "S", "T", "U", "V", "W", "Total Gaji", "No Rekening");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );



            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("J6", "Lembur");
            $objPHPExcel->getActiveSheet()->getStyle('J6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("K6", "Tj.Jabatan");
            $objPHPExcel->getActiveSheet()->getStyle('K6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("L6", "Tj.Produktifitas");
            $objPHPExcel->getActiveSheet()->getStyle('L6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("M6", "Tj.Transportasi");
            $objPHPExcel->getActiveSheet()->getStyle('M6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("N6", "Tj.Komunikasi");
            $objPHPExcel->getActiveSheet()->getStyle('N6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("O6", "Insentif");
            $objPHPExcel->getActiveSheet()->getStyle('O6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("P6", "Pajak (PPh)");
            $objPHPExcel->getActiveSheet()->getStyle('P6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("Q6", "Pinjaman");
            $objPHPExcel->getActiveSheet()->getStyle('Q6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("R6", "BPJS Kes");
            $objPHPExcel->getActiveSheet()->getStyle('R6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("S6", "BPJS TK");
            $objPHPExcel->getActiveSheet()->getStyle('S6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("T6", "Jumlah Alpa");
            $objPHPExcel->getActiveSheet()->getStyle('T6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("U6", "Potongan Alpa");
            $objPHPExcel->getActiveSheet()->getStyle('U6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("V6", "Jumlah Izin");
            $objPHPExcel->getActiveSheet()->getStyle('V6')->applyFromArray($style);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("W6", "Potongan Izin");
            $objPHPExcel->getActiveSheet()->getStyle('W6')->applyFromArray($style);


            for ($a = 0; $a < 24; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(45); // Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(35); // Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(10); // Status
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(10); // Grade
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(12); // Tanggal
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(12); // Masa Kerja
                $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(15); // Gaji Pokok
                $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15); // Lembur
                $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(15); // Tj.Jabatan
                $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(15); // Tj.Produktifitas
                $objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(15); // Tj.Transportasi
                $objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(15); // Tj.Komunikasi
                $objPHPExcel->getActiveSheet()->getColumnDimension('O')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('P')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('Q')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('R')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('S')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('T')->setWidth(15); // Insentif
                $objPHPExcel->getActiveSheet()->getColumnDimension('U')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('V')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('W')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('X')->setWidth(15); // Insentif

                $objPHPExcel->getActiveSheet()->getColumnDimension('Y')->setWidth(15); // Insentif


                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $dep = 6;
            $baris = $dep + 1;



            // $da = $baris+1;
            //$mo = $no+$baris;
            foreach ($departemen->result() as $d) {

                $grouping = $this->Employees_model->get_employee_by_department_company($d->company_id, $d->department_id);
                if (!is_null($grouping)) {
                    $jumlah_karyawan = $grouping[0]->jumlah;
                } else {
                    $jumlah_karyawan = '';
                }

                // $objset->setCellValue("B".$baris, );
                $objset->setCellValue("B" . ($baris + 1) . "", $d->department_name . ', Jumlah  : ' . $jumlah_karyawan . ' Karyawan');

                $objset->getStyle("B" . ($baris + 1) . ":Y" . ($baris + 1) . "")
                    ->applyFromArray(
                        array(
                            'fill' => array(
                                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                'color' => array('rgb' => 'B8CCE4')
                            ),

                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            ),

                            'borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            )
                        )
                    );

                $objset->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":Y" . ($jumlah_karyawan + $baris + 2) . "")
                    ->applyFromArray(
                        array(
                            'fill' => array(
                                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                'color' => array('rgb' => 'B8CCE4')
                            ),
                            'borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )
                        )
                    );


                $objset->mergeCells("B" . ($baris + 1) . ":Y" . ($baris + 1) . "")
                    ->getStyle("B" . ($baris + 1) . ":Y" . ($baris + 1) . "")
                    ->applyFromArray(
                        array(

                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )

                        )
                    );

                $objset->mergeCells("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                    ->getStyle("B" . ($jumlah_karyawan + $baris + 2) . ":H" . ($jumlah_karyawan + $baris + 2) . "")
                    ->applyFromArray(
                        array(

                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                            ),
                            "font" => array(
                                "size" => 11,
                                "bold" => true,
                                "color" => array("rgb" => "000000")
                            )

                        )
                    );

                $objset->getStyle("I" . ($jumlah_karyawan + $baris + 2) . ":X" . ($jumlah_karyawan + $baris + 2) . "")
                    ->getNumberFormat()
                    ->setFormatCode("#,##0")
                    ->applyFromArray(
                        array(

                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                            ),

                        )
                    );

                $objset->setCellValue("B" . ($jumlah_karyawan + $baris + 2) . "", 'Total ');

                $objset->setCellValue("I" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(I" . ($baris + 2) . ":I" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("J" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(J" . ($baris + 2) . ":J" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("K" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(K" . ($baris + 2) . ":K" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("L" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(L" . ($baris + 2) . ":L" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("M" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(M" . ($baris + 2) . ":M" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("N" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(N" . ($baris + 2) . ":N" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("O" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(O" . ($baris + 2) . ":O" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("P" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(P" . ($baris + 2) . ":P" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("Q" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(Q" . ($baris + 2) . ":Q" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("R" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(R" . ($baris + 2) . ":R" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("S" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(S" . ($baris + 2) . ":S" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("T" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(T" . ($baris + 2) . ":T" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("U" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(U" . ($baris + 2) . ":U" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("V" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(V" . ($baris + 2) . ":V" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("W" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(W" . ($baris + 2) . ":W" . ($jumlah_karyawan + $baris + 1) . ")");
                $objset->setCellValue("X" . ($jumlah_karyawan + $baris + 2) . "", "=SUM(X" . ($baris + 2) . ":X" . ($jumlah_karyawan + $baris + 1) . ")");

                // $objset->setCellValue("B".($jumlah_karyawan+$baris+3)."", '');

                $payslip = $this->Payroll_model->get_comp_template_bulanan_dep_lihat($d->company_id, 1, $month_year, $d->department_id);

                $no = 1;
                $baris =  $baris + 2;
                foreach ($payslip->result() as $r) {

                    // ====================================================================================================================
                    // DATA KARYAWAN
                    // ====================================================================================================================

                    // Karyawan ID
                    $emp_id = $r->employee_id;

                    $user_info = $this->Core_model->read_user_info($emp_id);
                    $emp_nik   = $user_info[0]->employee_id;
                    $full_name = $user_info[0]->first_name . ' ' . $user_info[0]->last_name;

                    // ====================================================================================================================
                    // DATA KARYAWAN
                    // ====================================================================================================================
                    // $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
                    //       		if(!is_null($rekening)){
                    // 	$rekening_name = $rekening[0]->account_number;
                    // } else {
                    // 	$rekening_name = '';
                    // }

                    $rekening_name = $r->rekening_name;

                    $cek_karyawan_status = $user_info[0]->emp_status;

                    if ($cek_karyawan_status != '') {
                        $karyawan_status     = $cek_karyawan_status;
                    } else {
                        $karyawan_status     = '';
                    }

                    // Karyawan Departemen
                    $department = $this->Department_model->read_department_information($r->department_id);
                    if (!is_null($department)) {
                        $department_name = $department[0]->department_name;
                    } else {
                        $department_name = '';
                    }

                    // Karyawan Posisi
                    $designation = $this->Designation_model->read_designation_information($r->designation_id);
                    if (!is_null($designation)) {
                        $designation_name = $designation[0]->designation_name;
                    } else {
                        $designation_name = '';
                    }

                    $jabatan = $designation_name;

                    // Karyawan Masa kerja
                    date_default_timezone_set("Asia/Jakarta");

                    $doj = $r->doj;

                    $tanggal1 = new DateTime($r->doj);
                    $tanggal2 = new DateTime();

                    if ($tanggal2->diff($tanggal1)->y == 0) {
                        $selisih = $tanggal2->diff($tanggal1)->m . ' bln';
                    } else {
                        $selisih = $tanggal2->diff($tanggal1)->y . ' thn' . ' ' . $tanggal2->diff($tanggal1)->m . ' bln';
                    }

                    // Karyawan Status
                    $emp_status =  $this->Employees_model->read_employee_contract_information2($r->employee_id);
                    if (!is_null($emp_status)) {
                        $emp_status_name = $emp_status[0]->name_type;
                    } else {
                        $emp_status_name = '';
                    }

                    // grade
                    $grade_type = $this->Core_model->read_user_jenis_grade($user_info[0]->grade_type);

                    if (!is_null($grade_type)) {
                        $jenis_grade       = $grade_type[0]->jenis_grade_keterangan;
                        $jenis_grade_warna = $grade_type[0]->warna;
                    } else {
                        $jenis_grade       = '';
                        $jenis_grade_warna = '';
                    }


                    //pemanggilan sesuaikan dengan nama kolom tabel
                    $objset->setCellValue("B" . $baris, $no);                                                                         // No
                    $objset->setCellValue("C" . $baris, $full_name);                                                                 // Nama Karyawan
                    $objset->setCellValue("D" . $baris, $jabatan);                                                         // Jabatan
                    $objset->setCellValue("E" . $baris, $emp_status_name);                                                             // Status
                    $objset->setCellValue("F" . $baris, $jenis_grade);                                                                 // Grade
                    $objset->setCellValue("G" . $baris, $doj);                                                                         // Tanggal Mulai Kerja
                    $objset->setCellValue("H" . $baris, $selisih);                                                                     // Masa Kerja
                    $objset->setCellValue("I" . $baris, $r->basic_salary);                         // Gaji Pokok
                    $objset->setCellValue("J" . $baris, $r->overtime_amount);                                                                                 // Gaji Pokok
                    $objset->setCellValue("K" . $baris, $r->jumlah_tunj_jabatan);                                                                                 // Gaji Poko
                    $objset->setCellValue("L" . $baris, $r->jumlah_tunj_produktifitas);                                                                                 // Gaji Poko
                    $objset->setCellValue("M" . $baris, $r->jumlah_tunj_transportasi);                                                                                 // Gaji Poko
                    $objset->setCellValue("N" . $baris, $r->jumlah_tunj_komunikasi);
                    $objset->setCellValue("O" . $baris, $r->commissions_amount);
                    $objset->setCellValue("P" . $baris, $r->other_payments_amount);
                    $objset->setCellValue("Q" . $baris, $r->loan_de_amount);
                    $objset->setCellValue("R" . $baris, $r->bpjs_kes_amount);                                                                                 // Gaji Poko
                    $objset->setCellValue("S" . $baris, $r->bpjs_tk_amount);
                    $objset->setCellValue("T" . $baris, $r->jumlah_alpa);
                    $objset->setCellValue("U" . $baris, $r->potongan_alpa);
                    $objset->setCellValue("V" . $baris, $r->jumlah_izin);
                    $objset->setCellValue("W" . $baris, $r->potongan_izin);
                    $objset->setCellValue("X" . $baris, $r->net_salary);

                    $objset->setCellValue("Y" . $baris, $r->rekening_name);

                    $no++;
                    $baris++;
                }

                $dep++;
            }

            $total_emp = $this->Employees_model->get_employee_by_company($d->company_id);
            if (!is_null($grouping)) {
                $total_karyawan = $total_emp[0]->jumlah;
            } else {
                $total_karyawan = '';
            }

            $objset->setCellValue("B" . ($jumlah_karyawan + $baris) . "", 'Grand Total ' . $total_karyawan . ' Karyawan');

            $objset->getStyle("B" . ($jumlah_karyawan + $baris) . ":Y" . ($jumlah_karyawan + $baris) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'B8CCE4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );


            $objset->mergeCells("B" . ($jumlah_karyawan + $baris) . ":H" . ($jumlah_karyawan + $baris) . "")
                ->getStyle("B" . ($jumlah_karyawan + $baris) . ":H" . ($jumlah_karyawan + $baris) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->getStyle("I" . ($jumlah_karyawan + $baris) . ":X" . ($jumlah_karyawan + $baris) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );

            $grand_total = $this->Payroll_model->get_comp_template_bulanan_lihat($d->company_id, 1, $month_year);

            foreach ($grand_total->result() as $g) {
                $objset->setCellValue("I" . ($jumlah_karyawan + $baris) . "", $g->ga_pok);
                $objset->setCellValue("J" . ($jumlah_karyawan + $baris) . "", $g->lembur);
                $objset->setCellValue("K" . ($jumlah_karyawan + $baris) . "", $g->tj_jabatan);
                $objset->setCellValue("L" . ($jumlah_karyawan + $baris) . "", $g->tj_produktifitas);
                $objset->setCellValue("M" . ($jumlah_karyawan + $baris) . "", $g->tj_transportasi);
                $objset->setCellValue("N" . ($jumlah_karyawan + $baris) . "", $g->tj_komunikasi);
                $objset->setCellValue("O" . ($jumlah_karyawan + $baris) . "", $g->insentif);
                $objset->setCellValue("P" . ($jumlah_karyawan + $baris) . "", $g->pph);
                $objset->setCellValue("Q" . ($jumlah_karyawan + $baris) . "", $g->pinjaman);
                $objset->setCellValue("R" . ($jumlah_karyawan + $baris) . "", $g->bpjs_kes);
                $objset->setCellValue("S" . ($jumlah_karyawan + $baris) . "", $g->bpjs_tk);
                $objset->setCellValue("T" . ($jumlah_karyawan + $baris) . "", $g->jum_alpa);
                $objset->setCellValue("U" . ($jumlah_karyawan + $baris) . "", $g->potongan_alpa);
                $objset->setCellValue("V" . ($jumlah_karyawan + $baris) . "", $g->jum_izin);
                $objset->setCellValue("W" . ($jumlah_karyawan + $baris) . "", $g->potongan_izin);
                $objset->setCellValue("X" . ($jumlah_karyawan + $baris) . "", $g->net_salary);
            }
            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Daftar Gaji Bulanan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Gaji Bulanan ' . $company_name . ' - ' . $cek_bulan_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ========================================================================
    // 12.6.4 RESUME PENGAJUAN
    // ========================================================================

    public function finance_resume_pengajuan_bulanan()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Finance - Resume Pengajuan | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['desc']          = 'LAPORAN : Resume Pengajua Gaji Bulanan';
        $data['breadcrumbs']   = 'Finance - Resume Pengajuan';
        $data['path_url']      = 'reports_finance_resume_pengajuan';

        // $data['all_companies'] = $this->Company_model->get_company();
        $data['all_bulan_gaji']    = $this->Core_model->all_bulan_gaji();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1365', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/finance_resume_pengajuan_bulanan", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function finance_resume_pengajuan_bulanan_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/finance_resume_pengajuan_bulanan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $p_date = $this->input->get("month_year");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $history = $this->Payroll_model->get_company_payslip_history_year_month($this->input->get("month_year"));

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {
            $company = $this->Core_model->read_company_info($r->company_id);
            if (!is_null($company)) {
                $comp_name = $company[0]->name;
            } else {
                $comp_name = '<span class="badge bg-red"> ? </span>';
            }

            $bulan_gaji         = $this->Payroll_model->check_bulan_gaji($r->salary_month);
            $cek_bulan_gaji     = $bulan_gaji[0]->desc;

            $perjanjian = '';

            $sql_perjanjian = " SELECT *
                                    FROM
                                         view_salary_month_pembayaran
                                    WHERE
                                        1 = 1
                                    AND company_id  = '" . $r->company_id . "'
                                    AND salary_month  = '" . $r->salary_month . "'
                                    AND wages_type  = '1'
                                    ORDER BY payment_type DESC";

            // echo "<pre>";
            // print_r( $sql_perjanjian );
            // echo "</pre>";
            // die;

            $query_perjanjian = $this->db->query($sql_perjanjian);

            if ($query_perjanjian->num_rows() > 0) {


                $daftar_perjanjian = '<table class="datatables-demo table table-striped table-bordered" id="xin_table">
                                        <thead>
                                          <tr>
                                            <th class="text-center" width="50px">No.</th>
                                            <th class="text-center" > Jenis Pengggajian </th>
                                            <th class="text-center" > Jumlah Karyawan </th>
                                            <th class="text-center" > Jumlah Gaji </th>
                                            <th class="text-center" > Status </th>
                                          </tr>
                                        </thead>
                                        <tbody>';
                $mo = 1;
                foreach ($query_perjanjian->result() as $row_perjanjian) :


                    $pebayaran = $this->Core_model->read_pembayaran_info($row_perjanjian->payment_type);
                    if (!is_null($pebayaran)) {
                        $Pembayaran_nama = $pebayaran[0]->jenis_gaji_keterangan;
                    } else {
                        $Pembayaran_nama = '<span class="badge bg-red"> ? </span>';
                    }
                    $Pembayaran_jumlah        = $row_perjanjian->jumlah;
                    $Pembayaran_gaji          = number_format($row_perjanjian->net_salary, 0, ',', '.');



                    $daftar_perjanjian = $daftar_perjanjian . '
                                                    <tr >
                                                        <td width="2%" align="center">' . $mo . '.</td>

                                                        <td align="left">
                                                         ' . $Pembayaran_nama . '
                                                        </td>

                                                        <td width="20%" align="center">
                                                         ' . $Pembayaran_jumlah . '
                                                        </td>

                                                        <td width="20%" align="right">
                                                         ' . $Pembayaran_gaji . '
                                                        </td>

                                                        <td width="20%" align="left">
                                                        &nbsp; <span class="label label-success">' . $this->lang->line('xin_payroll_paid') . '</span>
                                                        </td>

                                                    </tr>';
                    $mo++;
                endforeach;

                $daftar_perjanjian = $daftar_perjanjian . '
                                                    <tr >
                                                        <td width="2%" colspan ="2" align="center"> Grand Total</td>



                                                        <td width="20%" align="center">
                                                         ' . $r->jumlah . '
                                                        </td>

                                                        <td width="20%" align="right">
                                                         ' . number_format($r->net_salary, 0, ',', '.') . '
                                                        </td>

                                                        <td width="20%" align="left">

                                                        </td>

                                                    </tr>';


                $daftar_perjanjian = $daftar_perjanjian . '
                                        </tbody>
                                        </table>';
            } else {

                $daftar_perjanjian = '<div class="warning-msg" style="padding:5px;">
                                            <i class ="fa fa-question-circle"></i> Tidak Ada Data
                                         </div>';
            }

            $data[] = array(
                $no,
                $comp_name,
                $cek_bulan_gaji,
                $r->jumlah,
                number_format($r->net_salary, 0, ',', '.'),
                $daftar_perjanjian
            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function finance_resume_pengajuan_bulanan_jumlah()
    {
        $bulan_gaji = $this->input->get('month_year');


        $sql = 'SELECT sum(jumlah) as jumlah_karyawan, sum(net_salary) as jumlah_gaji FROM view_salary_month_jumlah WHERE salary_month = "' . $bulan_gaji . '" ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $bulan_gaji_cek     = $this->Payroll_model->check_bulan_gaji($bulan_gaji);
                $cek_bulan_gaji     = $bulan_gaji_cek[0]->desc;
                $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji_cek[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji_cek[0]->end_date));

                if ($val->jumlah_karyawan == '') {
                    $jumlah_karyawan = '0';
                } else {
                    $jumlah_karyawan = $val->jumlah_karyawan;
                }
                $response['val'][] = array(
                    'bulan_gaji'      => $cek_bulan_gaji,
                    'jumlah_karyawan' => $jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    public function finance_export_resume_pengajuan_bulanan()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/finance_resume_pengajuan_bulanan", $data);
        } else {
            redirect('admin/');
        }

        $month_year   = $this->input->post('month_year');

        $bulan_gaji         = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji     = $bulan_gaji[0]->desc;
        $cek_tanggal_gaji   = date("d-m-Y", strtotime($bulan_gaji[0]->start_date)) . ' s/d ' . date("d-m-Y", strtotime($bulan_gaji[0]->end_date));


        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);
        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $company_list = $this->Payroll_model->get_company_payslip_history_year_month($month_year);

        if (count($company_list) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:G1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:G2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:G3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", '');

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "RESUME PENGAJUAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object

            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:G5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:G6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle('I7:I2560')->getNumberFormat()->setFormatCode('0');

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            // $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            $objPHPExcel->getActiveSheet()->getStyle('B5:G5000')->getAlignment()->setWrapText(true);

            // Kanan
            $objPHPExcel->getActiveSheet()->getStyle("F7:F2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));


            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G");

            $val = array("No", "Nama Perusahaan", 'Bulan Gaji', "Jumlah Karyawan", "Total Gaji", "Keterangan");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );

            for ($a = 0; $a < 6; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // 1.No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(35); // 2.Nama Perusahan
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(15); // 3.Buln Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15); // 4.Jumlah Karyawan
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20); // 5.Total Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(50); // 6.Keterangan


                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $no     = 1;
            $baris = $no + 6;
            foreach ($company_list->result() as $r) {

                $company = $this->Core_model->read_company_info($r->company_id);
                if (!is_null($company)) {
                    $comp_name = $company[0]->name;
                } else {
                    $comp_name = '';
                }



                //pemanggilan sesuaikan dengan nama kolom tabel
                // $objset->setCellValue("B" . $baris, $no); 				// 0.
                $objset->setCellValue("B" . $baris, $no);                     // 1.No
                $objset->setCellValue("C" . $baris, $comp_name);             // 2.Nama Perusahaan
                $objset->setCellValue("D" . $baris, $cek_bulan_gaji);         // 3.Bulan Gaji
                $objset->setCellValue("E" . $baris, $r->jumlah);             // 4.Jumlah Karyawan
                $objset->setCellValue("F" . $baris, $r->net_salary);         // 7.Total Gaji
                $objset->setCellValue("G" . $baris, '');                     // 8.Keterangan

                $no++;
                $baris++;
            }

            $jumlah_pengajuan = count($company_list->result());

            $objset->setCellValue("B" . ($jumlah_pengajuan + 8) . "", 'Grand Total ');

            $objset->getStyle("B" . ($jumlah_pengajuan + 8) . ":G" . ($jumlah_pengajuan + 8) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'B8CCE4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($jumlah_pengajuan + 8) . ":E" . ($jumlah_pengajuan + 8) . "")
                ->getStyle("B" . ($jumlah_pengajuan + 8) . ":E" . ($jumlah_pengajuan + 8) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->setCellValue("F" . ($jumlah_pengajuan + 8) . "", "=SUM(F" . (7) . ":F" . ($jumlah_pengajuan + 8 - 2) . ")");

            $objset->getStyle("F" . ($jumlah_pengajuan + 8) . ":F" . ($jumlah_pengajuan + 8 - 2) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );



            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Resume Pengajuan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Resume Pengajuan Gaji Bulanan ' . $company_name . ' - ' . $cek_tanggal_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ****************************************************************************
    // >>  12.7 HARIAN
    // ****************************************************************************

    // ========================================================================
    // 12.7.3 REKAP GAJI HARIAN - PER REKAP
    // ========================================================================

    public function finance_gaji_harian_periode_rekap()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Finance - Rekap Gaji Harian Periode | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['desc']          = 'LAPORAN : Finance - Rekap Gaji Harian - Periode';
        $data['breadcrumbs']   = 'Finance - Rekap Gaji Harian Periode';
        $data['path_url']      = 'reports_finance_gaji_harian_periode_rekap';

        $data['all_companies'] = $this->Company_model->get_company();


        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1373', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/finance_gaji_harian_periode_rekap", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function finance_gaji_harian_periode_rekap_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/finance_gaji_harian_periode_rekap", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $start_date = $this->input->get("start_date");
        $end_date   = $this->input->get("end_date");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        // $history = $this->Payroll_model->cek_jumlah_gaji($this->input->get("company_id"),$start_date,$end_date);

        $history = $this->Payroll_model->get_company_payslip($this->input->get("company_id"), $start_date, $end_date);

        // echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {

            // get addd by > template
            $user = $this->Core_model->read_user_info($r->employee_id);
            // user full name
            $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;

            $month_payment = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

            $employee_name = strtoupper($full_name);

            // get workstation
            $workstation = $this->Core_model->read_workstation_info($r->workstation_id);
            if (!is_null($workstation)) {
                $workstation_name = $workstation[0]->workstation_name;
            } else {
                $workstation_name = '--';
            }

            // department
            $department = $this->Department_model->read_department_information($r->department_id);
            if (!is_null($department)) {
                $department_name = $department[0]->department_name;
            } else {
                $department_name = '--';
            }

            // designation
            $designation = $this->Designation_model->read_designation_information($r->designation_id);
            if (!is_null($designation)) {
                $designation_name = $designation[0]->designation_name;
            } else {
                $designation_name = '--';
            }

            $data[] = array(
                $no,
                // $month_payment,
                date("d-m-Y", strtotime($r->start_date)) . ' s/d ' . date("d-m-Y", strtotime($r->end_date)),
                $employee_name,
                strtoupper($department_name),
                strtoupper($workstation_name),
                strtoupper($designation_name),
                number_format($r->net_salary, 0, ',', '.'),
                $r->rekening_name,
                $r->bank_name,

            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function finance_gaji_harian_periode_rekap_jumlah()
    {

        $company_id = $this->input->get('company_id');

        $start_date = $this->input->get('start_date');

        $end_date   = $this->input->get('end_date');

        $sql = 'SELECT count(*) as jumlah_periode,  sum(jumlah) as jumlah_karyawan,  sum(net_salary) as jumlah_gaji FROM view_salary_harian_jumlah
                           WHERE company_id = "' . $company_id . '" AND start_date >= "' . $start_date . '" AND end_date <= "' . $end_date . '" ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $response['val'][] = array(
                    'jumlah_periode' => $val->jumlah_periode,
                    'jumlah_karyawan' => $val->jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    public function finance_export_gaji_harian_periode_rekap()
    {
        $data['title'] = $this->Core_model->site_title();
        $session       = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/finance_gaji_harian_periode_rekap", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');

        $start_date   = $this->input->post('start_date');
        $end_date     = $this->input->post('end_date');


        // $bulan_gaji = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji   = 'Periode ';

        $cek_tanggal_gaji   = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);
        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $employee_list      = $this->Payroll_model->get_company_payslip($company_id, $start_date, $end_date);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);



        if (count($employee_list) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:K1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:K2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:K3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "REKAP GAJI HARIAN PERIODE");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object

            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:K5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:K6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle('I7:I2560')->getNumberFormat()->setFormatCode('0');

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            $objPHPExcel->getActiveSheet()->getStyle('B5:K5000')->getAlignment()->setWrapText(true);

            // Kanan
            $objPHPExcel->getActiveSheet()->getStyle("H7:H2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));


            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $objPHPExcel->getActiveSheet()->getStyle('I7:I2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('J7:J2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('K7:K2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);


            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('I5:I6');
            $objPHPExcel->getActiveSheet()->getStyle('I5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('J5:J6');
            $objPHPExcel->getActiveSheet()->getStyle('J5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('K5:K6');
            $objPHPExcel->getActiveSheet()->getStyle('K5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H", "I", "J", "K");

            $val = array("No", "NIP", 'Nama', "Departemen", "Workstation", "Posisi", "Total Gaji", "No Rekening", "Bank", "Email");

            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                )
            );

            for ($a = 0; $a < 10; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // 1.No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(15); // 2.NIP
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(35); // 3.Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(30); // 4.Departemen
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(30); // 5.Workstation
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(30); // 6.Posisi
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(15); // 7.Total Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(25); // 8.No. Rekening
                $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15); // 9.Bank
                $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(50); // 10.Keterangan


                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $no     = 1;
            $baris = $no + 6;
            foreach ($employee_list->result() as $r) {

                // get addd by > template
                $user = $this->Core_model->read_user_info($r->employee_id);
                // user full name
                $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;

                $month_payment = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

                $employee_id = strtoupper($user[0]->employee_id);

                $employee_name = strtoupper($full_name);

                // get workstation
                $workstation = $this->Core_model->read_workstation_info($r->workstation_id);
                if (!is_null($workstation)) {
                    $workstation_name = $workstation[0]->workstation_name;
                } else {
                    $workstation_name = '--';
                }

                // department
                $department = $this->Department_model->read_department_information($r->department_id);
                if (!is_null($department)) {
                    $department_name = $department[0]->department_name;
                } else {
                    $department_name = '--';
                }

                // designation
                $designation = $this->Designation_model->read_designation_information($r->designation_id);
                if (!is_null($designation)) {
                    $designation_name = $designation[0]->designation_name;
                } else {
                    $designation_name = '--';
                }


                //pemanggilan sesuaikan dengan nama kolom tabel
                // $objset->setCellValue("B" . $baris, $no); 				  							// 0.//
                $objset->setCellValue("B" . $baris, $no);                                                 // 1.No
                $objset->setCellValue("C" . $baris, $employee_id);                                         // 2.NIP
                $objset->setCellValue("D" . $baris, $employee_name);                                     // 3.Nama Karyawan
                $objset->setCellValue("E" . $baris, strtoupper($department_name));                                         // 4.Perusahaan
                $objset->setCellValue("F" . $baris, strtoupper($workstation_name));                         // 5.Departemen
                $objset->setCellValue("G" . $baris, strtoupper($designation_name));                     // 6.Posisi
                $objset->setCellValue("H" . $baris, round($r->net_salary, 0));     // 7.Total Gaji
                $objset->setCellValue("I" . $baris, "'" . $r->rekening_name);                                     // 8.No.Rekening
                $objset->setCellValue("J" . $baris, $r->bank_name);                                         // 9.Bank
                $objset->setCellValue("K" . $baris, $r->email);                                                 // 10.Keterangan

                $no++;
                $baris++;
            }

            $jumlah_karyawan = count($employee_list->result());

            $objset->setCellValue("B" . ($jumlah_karyawan + 8) . "", 'Total ');

            $objset->getStyle("B" . ($jumlah_karyawan + 8) . ":K" . ($jumlah_karyawan + 8) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'FCD5B4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($jumlah_karyawan + 8) . ":G" . ($jumlah_karyawan + 8) . "")
                ->getStyle("B" . ($jumlah_karyawan + 8) . ":G" . ($jumlah_karyawan + 8) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->setCellValue("H" . ($jumlah_karyawan + 8) . "", "=SUM(H" . (7) . ":H" . ($jumlah_karyawan + 8 - 2) . ")");

            $objset->getStyle("H" . ($jumlah_karyawan + 8) . ":H" . ($jumlah_karyawan + 8 - 2) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );


            $objset->setCellValue("B" . ($jumlah_karyawan + 10) . "", "*. Silahkan hapus tanda petik (') di kolom No Rekening.");


            $objset->mergeCells("B" . ($jumlah_karyawan + 10) . ":G" . ($jumlah_karyawan + 10) . "")
                ->getStyle("B" . ($jumlah_karyawan + 10) . ":G" . ($jumlah_karyawan + 10) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Rekap Gaji Harian Periode');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Finance - Rekap Gaji Harian Periode ' . $company_name . ' - ' . $cek_tanggal_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }

    // ========================================================================
    // 12.7.4 REKAP GAJI HARIAN - PER BULANAN
    // ========================================================================

    public function finance_gaji_harian_bulanan()
    {
        $session = $this->session->userdata('username');
        if (empty($session)) {
            redirect('admin/');
        }
        $data['title']         = 'Finance - Rekap Gaji Harian Bulanan | ' . $this->Core_model->site_title();
        $data['icon']          = '<i class="fa fa-print"></i>';
        $data['desc']          = 'LAPORAN : Finance - Rekap Gaji Harian Bulanan';
        $data['breadcrumbs']   = 'Finance - Rekap Gaji Harian Bulanan';
        $data['path_url']      = 'reports_finance_gaji_harian_bulanan';

        $data['all_companies'] = $this->Company_model->get_company();

        $role_resources_ids = $this->Core_model->user_role_resource();
        if (in_array('1373', $role_resources_ids)) {
            $data['subview'] = $this->load->view("admin/reports/finance_gaji_harian_bulanan", $data, TRUE);
            $this->load->view('admin/layout/layout_main', $data); //page load
        } else {
            redirect('admin/dashboard');
        }
    }

    // hourly_list > templates
    public function finance_gaji_harian_bulanan_list()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/finance_gaji_harian_bulanan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw   = intval($this->input->get("draw"));
        $start  = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));

        // date and employee id/company id
        $start_date = $this->input->get("start_date");
        $end_date   = $this->input->get("end_date");

        $role_resources_ids = $this->Core_model->user_role_resource();

        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        // $history = $this->Payroll_model->cek_jumlah_gaji($this->input->get("company_id"),$start_date,$end_date);

        $history = $this->Payroll_model->get_company_payslip_perbulan($this->input->get("company_id"), $start_date, $end_date);

        // echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();

        $system = $this->Core_model->read_setting_info(1);
        $data   = array();
        $no     = 1;

        foreach ($history->result() as $r) {

            // get addd by > template
            $user = $this->Core_model->read_user_info($r->employee_id);
            // user full name
            $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;


            $employee_id = strtoupper($user[0]->employee_id);

            $employee_name = strtoupper($full_name);

            $jumlah_gaji = $this->Payroll_model->cek_jumlah_gaji($r->employee_id, $start_date, $end_date);
            if (!is_null($jumlah_gaji)) {
                $gaji_karyawan = $jumlah_gaji[0]->jumlah;
            } else {
                $gaji_karyawan = '';
            }


            if ($r->employee_id == '') {
                $ol = '<span class="blink blink-one"> 0  </span>';
            } else {
                $ol = '<ol style="margin-bottom: 0px !important;">';
                $employee = $this->Payroll_model->read_employee_kerja($r->employee_id, $start_date, $end_date);
                foreach ($employee->result() as $e) {
                    if (!is_null($employee)) {
                        $designation = $this->Designation_model->read_designation_information($e->designation_id);
                        if (!is_null($designation)) {
                            $designation_name = $designation[0]->designation_name;
                        } else {
                            $designation_name = '--';
                        }
                        $department = $this->Department_model->read_department_information($e->department_id);
                        if (!is_null($department)) {
                            $department_name = $department[0]->department_name;
                        } else {
                            $department_name = '--';
                        }
                        $ol .= '<li>' . date("d-m-Y", strtotime($e->start_date)) . ' s/d ' . date("d-m-Y", strtotime($e->end_date)) . ' (' . number_format($e->net_salary, 0, ',', '.') . ' - ' . $designation_name . ' - ' . $department_name . ') </li>';
                    } else {
                        $ol .= '--';
                    }
                }
                $ol .= '</ol>';
            }

            $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
            if (!is_null($rekening)) {
                $rekening_name = $rekening[0]->account_number;
                $bank_name = $rekening[0]->bank_name;
            } else {
                $rekening_name = '';
                $bank_name = '--';
            }

            $data[] = array(
                $no,
                $employee_id,
                $employee_name,
                number_format($gaji_karyawan, 0, ',', '.'),
                $rekening_name,
                $bank_name,
                $ol

            );
            $no++;
        }

        $output = array(
            "draw" => $draw,
            "recordsTotal" => $history->num_rows(),
            "recordsFiltered" => $history->num_rows(),
            "data" => $data
        );
        $this->output->set_output(json_encode($output));
    }

    public function finance_gaji_harian_bulanan_jumlah()
    {
        $company_id = $this->input->get('company_id');

        $start_date = $this->input->get('start_date');

        $end_date   = $this->input->get('end_date');

        $grouping = $this->Payroll_model->get_company_payslip_perbulan_jumlah($company_id, $start_date, $end_date);
        if (!is_null($grouping)) {
            $jumlah_karyawan = $grouping[0]->jumlah;
        } else {
            $jumlah_karyawan = '';
        }

        // company
        $company = $this->Company_model->read_company_information($company_id);
        if (!is_null($company)) {
            $company_name = $company[0]->name;
        } else {
            $company_name = '--';
        }

        $sql = 'SELECT sum(net_salary) as jumlah_gaji
                            FROM xin_salary_payslips_harian
                            WHERE company_id = "' . $company_id . '" AND start_date >= "' . $start_date . '" AND end_date <= "' . $end_date . '"
                             ';

        // echo "<pre>";
        // print_r($sql);
        // echo "</pre>";
        // die();

        $query = $this->db->query($sql);


        $response['val'] = array();
        if ($query <> false) {
            foreach ($query->result() as $val) {

                $response['val'][] = array(
                    'company_name'    => $company_name,
                    'jumlah_karyawan' => $jumlah_karyawan,
                    'jumlah_gaji'      => number_format($val->jumlah_gaji, 0, ',', '.')

                );
            }
            $response['status'] = '200';
        }


        echo json_encode($response);
    }

    public function finance_export_gaji_harian_bulanan()
    {
        $data['title'] = $this->Core_model->site_title();
        $session = $this->session->userdata('username');

        if (!empty($session)) {
            $this->load->view("admin/reports/finance_gaji_harian_bulanan", $data);
        } else {
            redirect('admin/');
        }

        $company_id   = $this->input->post('company');
        $start_date   = $this->input->post('start_date');
        $end_date     = $this->input->post('end_date');


        // $bulan_gaji = $this->Payroll_model->check_bulan_gaji($month_year);
        $cek_bulan_gaji   = 'Periode ';

        $cek_tanggal_gaji   = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        // echo "<pre>";
        // print_r($company);
        // print_r($month_year);
        // echo "</pre>";
        // die;

        $role_resources_ids = $this->Core_model->user_role_resource();
        $user_info          = $this->Core_model->read_user_info($session['user_id']);

        $employee_list = $this->Payroll_model->get_company_payslip_perbulan($company_id, $start_date, $end_date);

        // $ambildata = $this->mod->get_attendance_to_excel($tgl1, $tgl2, $location_id, $status_id, $user_id);

        // echo "<pre>";
        // print_r($employee_list);
        // echo "</pre>";
        // die();

        if (count($employee_list) > 0) {

            $objPHPExcel = new PHPExcel();

            // Set properties

            $objPHPExcel->getProperties()->setCreator("Nizar Basyrewan")
                ->setLastModifiedBy("Nizar Basyrewan")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B1:H1")
                ->getStyle("B1:B1")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 16,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B2:H2")
                ->getStyle("B2:B2")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 14,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells("B3:H3")
                ->getStyle("B3:B3")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "363636")
                        )
                    )
                );

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B1", $company_name);

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B2", "REKAP GAJI HARIAN - PER BULAN");

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue("B3", $cek_bulan_gaji . ' (' . $cek_tanggal_gaji . ')');

            $objPHPExcel->getActiveSheet()->freezePane('E7');

            $objset = $objPHPExcel->setActiveSheetIndex(0); //inisiasi set object

            $objget = $objPHPExcel->getActiveSheet();  //inisiasi get object

            $objPHPExcel->getActiveSheet()->getStyle("B5:H5")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle("B6:H6")->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'CCC0DA')
                    ),
                    'font' => array(
                        'color' => array('rgb' => '363636')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )
                )
            );

            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getNumberFormat()->setFormatCode('0');

            // setting kolom rata
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('B7:B2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('C7:C2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('D7:D2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('E7:E2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('F7:F2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $objPHPExcel->getActiveSheet()->getStyle('G7:G2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $objPHPExcel->getActiveSheet()->getStyle('B5:H5000')->getAlignment()->setWrapText(true);

            $objPHPExcel->getActiveSheet()->getStyle("E7:E2560")->getNumberFormat()->setFormatCode("#,##0")->applyFromArray(array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)));

            $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

            // $objPHPExcel->getActiveSheet()->getStyle('H7:H2560')->getAlignment()->setWrapText(true);
            // Merge
            $objPHPExcel->getActiveSheet()->mergeCells('B5:B6');
            $objPHPExcel->getActiveSheet()->getStyle('B5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('C5:C6');
            $objPHPExcel->getActiveSheet()->getStyle('C5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('D5:D6');
            $objPHPExcel->getActiveSheet()->getStyle('D5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('E5:E6');
            $objPHPExcel->getActiveSheet()->getStyle('E5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('F5:F6');
            $objPHPExcel->getActiveSheet()->getStyle('F5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('G5:G6');
            $objPHPExcel->getActiveSheet()->getStyle('G5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $objPHPExcel->getActiveSheet()->mergeCells('H5:H6');
            $objPHPExcel->getActiveSheet()->getStyle('H5')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            //table header
            $cols = array("B", "C", "D", "E", "F", "G", "H");

            $val = array("No", "NIP", 'Nama', "Total Gaji", "No Rekening", "Bank", "Keterangan");

            $style = array(
                'alignment' => array(
                    'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
                )
            );

            for ($a = 0; $a < 7; $a++) {

                $objset->setCellValue($cols[$a] . '5', $val[$a]);

                // Setting lebar cell
                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);  //
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);  // 1.No
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(15); // 2.NIP
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(35); // 3.Nama
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15); // 4.Total Gaji
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(25); // 5.No. Rekening
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(15); // 6.Bank
                $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(80); // 7.Keterangan


                $style = array(
                    'alignment' => array(
                        'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
                    )
                );


                $objPHPExcel->getActiveSheet()->getStyle($cols[$a] . '5')->applyFromArray($style);
            }


            $no     = 1;
            $baris = $no + 6;
            foreach ($employee_list->result() as $r) {

                // get addd by > template
                $user = $this->Core_model->read_user_info($r->employee_id);
                // user full name
                $full_name = $user[0]->first_name . ' ' . $user[0]->last_name;

                $month_payment = date("d-m-Y", strtotime($start_date)) . ' s/d ' . date("d-m-Y", strtotime($end_date));

                $employee_id = strtoupper($user[0]->employee_id);

                $employee_name = strtoupper($full_name);

                $jumlah_gaji = $this->Payroll_model->cek_jumlah_gaji($r->employee_id, $start_date, $end_date);
                if (!is_null($jumlah_gaji)) {
                    $gaji_karyawan = $jumlah_gaji[0]->jumlah;
                } else {
                    $gaji_karyawan = '';
                }

                if ($r->employee_id == '') {
                    $ol = '';
                } else {
                    $ol = "\n";
                    $employee = $this->Payroll_model->read_employee_kerja($r->employee_id, $start_date, $end_date);
                    foreach ($employee->result() as $e) {
                        if (!is_null($employee)) {
                            $designation = $this->Designation_model->read_designation_information($e->designation_id);
                            if (!is_null($designation)) {
                                $designation_name = $designation[0]->designation_name;
                            } else {
                                $designation_name = '--';
                            }
                            $department = $this->Department_model->read_department_information($e->department_id);
                            if (!is_null($department)) {
                                $department_name = $department[0]->department_name;
                            } else {
                                $department_name = '--';
                            }
                            $ol .= date("d-m-Y", strtotime($e->start_date)) . ' s/d ' . date("d-m-Y", strtotime($e->end_date)) . ' (' . number_format($e->net_salary, 0, ',', '.') . ' - ' . $designation_name . ' - ' . $department_name . ') ' . '' . "\n";
                        } else {
                            $ol .= '--';
                        }
                    }
                    $ol .= '';
                }

                $rekening = $this->Employees_model->get_employee_bank_account_last($r->employee_id);
                if (!is_null($rekening)) {
                    $rekening_name = $rekening[0]->account_number;
                    $bank_name = $rekening[0]->bank_name;
                } else {
                    $rekening_name = '';
                    $bank_name = '--';
                }

                //pemanggilan sesuaikan dengan nama kolom tabel
                // $objset->setCellValue("B" . $baris, $no); 				  	// 0.//
                $objset->setCellValue("B" . $baris, $no);                         // 1.No
                $objset->setCellValue("C" . $baris, $employee_id);                 // 2.NIP
                $objset->setCellValue("D" . $baris, $employee_name);             // 3.Nama Karyawan

                $objset->setCellValue("E" . $baris, round($gaji_karyawan, 0));     // 4.Total Gaji
                $objset->setCellValue("F" . $baris, "'" . $rekening_name);         // 5.No.Rekening
                $objset->setCellValue("G" . $baris, $bank_name);             // 6.Bank
                $objset->setCellValue("H" . $baris, $ol);                         // 7.Keterangan

                $no++;
                $baris++;
            }

            $jumlah_karyawan = count($employee_list->result());

            $objset->setCellValue("B" . ($jumlah_karyawan + 8) . "", 'Total ');

            $objset->getStyle("B" . ($jumlah_karyawan + 8) . ":H" . ($jumlah_karyawan + 8) . "")
                ->applyFromArray(
                    array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'FCD5B4')
                        ),
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                        "font" => array(
                            "size" => 11,
                            "bold" => true,
                            "color" => array("rgb" => "000000")
                        )
                    )
                );

            $objset->mergeCells("B" . ($jumlah_karyawan + 8) . ":D" . ($jumlah_karyawan + 8) . "")
                ->getStyle("B" . ($jumlah_karyawan + 8) . ":D" . ($jumlah_karyawan + 8) . "")
                ->applyFromArray(
                    array(

                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                    )
                );

            $objset->setCellValue("E" . ($jumlah_karyawan + 8) . "", "=SUM(E" . (7) . ":E" . ($jumlah_karyawan + 8 - 2) . ")");

            $objset->getStyle("E" . ($jumlah_karyawan + 8) . ":E" . ($jumlah_karyawan + 8 - 2) . "")
                ->getNumberFormat()
                ->setFormatCode("#,##0")
                ->applyFromArray(
                    array(
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                        ),
                    )
                );



            // Rename worksheet
            $objPHPExcel->getActiveSheet()->setTitle('Rekap Gaji Harian - Per Bulan');

            $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
            $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $filename = 'Rekap Gaji Harian - Per Bulan ' . $company_name . ' - ' . $cek_tanggal_gaji;

            //sesuaikan headernya
            ob_end_clean();

            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");

            header("Cache-Control: no-store, no-cache, must-revalidate");
            header("Cache-Control: post-check=0, pre-check=0", false);

            // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');

            // HTTP/1.1
            header("Pragma: no-cache");

            $objWriter->save('php://output');
            exit;
        } else {
            redirect('Excel');
        }
    }


    // ================================================================================
    // TAMPILKAN
    // ================================================================================
    // get company > employees
    public function get_periode_harian()
    {

        $data['title'] = $this->Core_model->site_title();
        $id = $this->uri->segment(4);

        $data = array(
            'month_year' => $id
        );
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/get_periode_harian", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));
    }

    public function get_periode_borongan()
    {

        $data['title'] = $this->Core_model->site_title();
        $id = $this->uri->segment(4);

        $data = array(
            'month_year' => $id
        );
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/get_periode_borongan", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));
    }



    // get company > departments
    public function get_departments()
    {

        $data['title'] = $this->Core_model->site_title();
        $id = $this->uri->segment(4);

        $data = array(
            'company_id' => $id
        );
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/report_get_departments", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));
    }

    // get departmens > designations
    public function designation()
    {

        $data['title'] = $this->Core_model->site_title();
        $id = $this->uri->segment(4);

        $data = array(
            'department_id' => $id,
            'all_designations' => $this->Designation_model->all_designations(),
        );
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/report_get_designations", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));
    }


    public function get_workstations_designations()
    {

        $data['title'] = $this->Core_model->site_title();
        $id = $this->uri->segment(4);

        $data = array(
            'company_id' => $id,
            'all_designations' => $this->Designation_model->all_designations(),
        );
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/report_get_workstations_designations", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));
    }

    public function get_designations_workstations()
    {

        $data['title'] = $this->Core_model->site_title();
        $id = $this->uri->segment(4);

        $data = array(
            'workstation_id' => $id,
            'all_designations' => $this->Designation_model->all_designations(),
        );
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/report_get_designations_workstations", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));
    }

    // get company > employees
    public function get_employees()
    {

        $data['title'] = $this->Core_model->site_title();
        $id = $this->uri->segment(4);

        $data = array(
            'company_id' => $id
        );
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/get_employees", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));
    }

    // get company > employees
    public function get_employees_att()
    {

        $data['title'] = $this->Core_model->site_title();
        $id = $this->uri->segment(4);

        $data = array(
            'company_id' => $id
        );
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/get_employees_att", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));
    }

    // get company > employees
    public function get_employees_att_shift()
    {

        $data['title'] = $this->Core_model->site_title();
        $id = $this->uri->segment(4);

        $data = array(
            'company_id' => $id
        );
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/get_employees_att_shift", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));
    }

    public function get_workstations()
    {

        $data['title'] = $this->Core_model->site_title();
        $id = $this->uri->segment(4);

        $data = array(
            'company_id' => $id
        );
        $session = $this->session->userdata('username');
        if (!empty($session)) {
            $this->load->view("admin/reports/get_workstations", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw = intval($this->input->get("draw"));
        $start = intval($this->input->get("start"));
        $length = intval($this->input->get("length"));
    }

      // daily attendance > timesheet
      public function employees_timelate()
      {
          $session = $this->session->userdata('username');
          if (empty($session)) {
              redirect('admin/');
          }
          $data['title']       = 'Laporan Karyawan Terlambat | ' . $this->Core_model->site_title();
          $data['icon']        = '<i class="fa fa-hand-o-up"></i>';
          $data['desc']        = '<span><b>INFORMASI : </b> Data Keterlambatan Setiap Hari ini dilakukan setelah Proses Penarikan absensi! </span>';
          $data['breadcrumbs'] = 'Data Keterlambatan (Per Hari / Tanggal)';
          $data['path_url']    = 'employees_timelate';
  
          $data['get_all_companies']    = $this->Company_model->get_company();
          $data['all_department']    = $this->Company_model->get_department();
          $data['all_office_shifts'] = $this->Location_model->all_payroll_jenis();
  
          $role_resources_ids        = $this->Core_model->user_role_resource();
  
          if (in_array('0911', $role_resources_ids)) {
              if (!empty($session)) {
                  $data['subview'] = $this->load->view("admin/reports/employee_timelate", $data, TRUE);
                  $this->load->view('admin/layout/layout_main', $data); //page load
              } else {
                  redirect('admin/dashboard/');
              }
          } else {
              redirect('admin/dashboard');
          }
      }
  
      // daily attendance list > timesheet
      public function employees_timelate_list()
      {
        //   return 123;
          $data['title'] = $this->Core_model->site_title();
          $session       = $this->session->userdata('username');
          $user_info     = $this->Core_model->read_user_info($session['user_id']);
        //   var_dump($session);return;
        // return;
          if (!empty($session)) {
              $this->load->view("admin/reports/employee_timelate", $data);
          } else {
              redirect('admin/');
          }
          // Datatables Variables
          $draw               = intval($this->input->get("draw"));
          $start              = intval($this->input->get("start"));
          $length             = intval($this->input->get("length"));
          $role_resources_ids = $this->Core_model->user_role_resource();
  
          $attendance_date    = $this->input->get("attendance_date");
          $departement_id         = $this->input->get("department_id");
          $company_id         = $this->input->get("company_id");
  
  
         // /$check_hari_libur_kantor = $this->check_hari_libur_kantor('2212',$attendance_date);
                                // var_dump($check_hari_libur_kantor['status']);return;
          $employee = $this->Employees_model->get_employee_by_department($departement_id);
        //      echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();
          $emp_ids = array();
          if(!empty($employee)){

              foreach($employee as $key=>$value){
                $emp_ids[] = $value->user_id;
              }
          }
        //   var_dump($emp_ids);return;
          $system   = $this->Core_model->read_setting_info(1);
          $emp_ids= !is_array($emp_ids) ? [$emp_ids] : $emp_ids;
          $query = $this->db
              ->select('*')
              ->where_in('employee_id', $emp_ids)
              ->where('attendance_date =', $attendance_date)
              ->where('company_id =', $company_id)
              ->where('time_late != 0');
          
  
          $query1 = $query->get('xin_attendance_time')->result();
        //      echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();
          $data = array();
  
          $no = 1;
          $dataInsert = [];
          if (!empty($query1)) {
              foreach ($query1 as $r) {
                  
                  // user full name
                  $user_info      = $this->Employees_model->get_employees_by_user_id($r->employee_id);
                  // var_dump($user_info);return;
                  if (!empty($user_info)) {
                      $user_id        = $user_info->user_id;
                      $company_name        = $user_info->company_name;
                      $full_name      = $user_info->first_name . ' ' . $user_info->last_name;
                      $designation_name  = $user_info->designation_name;
                      $department_id  = $user_info->department_id;
                      $designation_id = $user_info->designation_id;
                      $workstation_id = $user_info->workstation_id;
                      $workstation_name = $user_info->workstation_name;
                      $start_join = $user_info->date_of_joining;
                  } else {
                      $user_id        = '';
                      $emp_nik        = '';
                      $designation_name  = '';
                      $company_name        = '';
                      $full_name      = '';
                      $department_id  = '';
                      $designation_id = '';
                      $designation_id = '';
                      $workstation_id = '';
                      $workstation_name = '';
                  }
          
                  $attendance_status = $r->attendance_status;
                  $attendance_keterangan = $r->attendance_keterangan;
                  $time_late = $r->time_late;
                  $early_leaving = $r->early_leaving;
                  $overtime = $r->overtime;
                  $total_work = $r->total_work;
                  $attendance_jadwal = $r->attendance_jadwal;
                  $jam_masuk = $r->clock_in;
                  $jam_pulang = $r->clock_out;
      
                  $d_date = $this->Core_model->set_date_format($attendance_date);
      
                  $data[] = array(
                      $no,
                      strtoupper($full_name),
                      date("d-m-Y", strtotime($r->date_of_joining)),
                      substr(strtoupper($designation_name), 0, 30),
                      $workstation_name,
                      $attendance_jadwal,
                      $d_date,
                      $attendance_status,
                      $jam_masuk,
                      $jam_pulang,
                      $time_late,
                    //   $early_leaving,
                    //   $overtime,
                    //   $total_work,
                      $attendance_keterangan
                  );
                  $no++;
                  // break;
                  // }
              }
              
              # code...
          }else{
  
          }
  
          $output = array(
              "draw" => $draw,
              "recordsTotal" => count($query1),
              "recordsFiltered" => count($query1),
              "data" => $data
          );
          echo json_encode($output);
          exit();
      }
      public function export_employees_timelate_list()
      {
        $data['title'] = $this->Core_model->site_title();
        $session       = $this->session->userdata('username');
        $user_info     = $this->Core_model->read_user_info($session['user_id']);
        //     var_dump($session);return;
        //   return;
        if (!empty($session)) {
            $this->load->view("admin/reports/employee_timelate", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw               = intval($this->input->get("draw"));
        $start              = intval($this->input->get("start"));
        $length             = intval($this->input->get("length"));
        $role_resources_ids = $this->Core_model->user_role_resource();

        $attendance_date    = $this->input->post("attendance_date");
        $departement_id         = $this->input->post("department_id");
        $company_id         = $this->input->post("company_id");
        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

       // /$check_hari_libur_kantor = $this->check_hari_libur_kantor('2212',$attendance_date);
                              // var_dump($check_hari_libur_kantor['status']);return;
        $employee = $this->Employees_model->get_employee_by_department($departement_id);
        //        echo "<pre>";
        //   print_r($this->db->last_query());
        //   echo "</pre>";
        //   die();
        $emp_ids = array();
        if(!empty($employee)){

            foreach($employee as $key=>$value){
              $emp_ids[] = $value->user_id;
            }
        }
        //   var_dump($emp_ids);return;
        $system   = $this->Core_model->read_setting_info(1);
        $emp_ids= !is_array($emp_ids) ? [$emp_ids] : $emp_ids;
        $query = $this->db
            ->select('*')
            ->where_in('employee_id', $emp_ids)
            ->where('attendance_date =', $attendance_date)
            ->where('company_id =', $company_id)
            ->where('time_late != 0');
        

        $query1 = $query->get('xin_attendance_time')->result();
        //     echo "<pre>";
        //   print_r($this->db->last_query());
        //   echo "</pre>";
        //   die();
        $data = array();

        $no = 1;
  
        if (!empty($query1)) {
           
  
              $objPHPExcel = new PHPExcel();
  
              $objPHPExcel->setActiveSheetIndex(0);
              // set Header
            //   $objPHPExcel->getActiveSheet()->SetCellValue('A1', 'First Name');
              $objPHPExcel->getActiveSheet()->SetCellValue('B1', 'NO');
              $objPHPExcel->getActiveSheet()->SetCellValue('C1', 'Nama karyawan');
              $objPHPExcel->getActiveSheet()->SetCellValue('D1', 'Tanggal Join');
              $objPHPExcel->getActiveSheet()->SetCellValue('E1', 'Departemen');       
              $objPHPExcel->getActiveSheet()->SetCellValue('F1', 'Workstation');       
              $objPHPExcel->getActiveSheet()->SetCellValue('G1', 'Posisi');       
              $objPHPExcel->getActiveSheet()->SetCellValue('H1', 'Jam Kerja');       
              $objPHPExcel->getActiveSheet()->SetCellValue('I1', 'Jam Masuk');       
              $objPHPExcel->getActiveSheet()->SetCellValue('J1', 'Jam Keluar');       
              $objPHPExcel->getActiveSheet()->SetCellValue('K1', 'Total terlambat (Menit)');       
              $objPHPExcel->getActiveSheet()->SetCellValue('L1', 'Keterangan');       
              // set Row
              $rowCount = 2;
              
              $no = 1;
              $dep = 1;
              $baris = $dep + 1;
            foreach ($query1 as $r) {
                
                // user full name
                $user_info      = $this->Employees_model->get_employees_by_user_id($r->employee_id);
                // var_dump($user_info);return;
                if (!empty($user_info)) {
                    $user_id        = $user_info->user_id;
                    $company_name        = $user_info->company_name;
                    $full_name      = $user_info->first_name . ' ' . $user_info->last_name;
                    $designation_name  = $user_info->designation_name;
                    $department_id  = $user_info->department_id;
                    $department_name  = $user_info->department_name;
                    $designation_id = $user_info->designation_id;
                    $workstation_id = $user_info->workstation_id;
                    $workstation_name = $user_info->workstation_name;
                    $start_join = $user_info->date_of_joining;
                } else {
                    $user_id        = '';
                    $emp_nik        = '';
                    $designation_name  = '';
                    $company_name        = '';
                    $full_name      = '';
                    $department_id  = '';
                    $department_name  = '';
                    $designation_id = '';
                    $designation_id = '';
                    $workstation_id = '';
                    $workstation_name = '';
                }
        
                $attendance_status = $r->attendance_status;
                $attendance_keterangan = $r->attendance_keterangan;
                $time_late = $r->time_late;
                $early_leaving = $r->early_leaving;
                $overtime = $r->overtime;
                $total_work = $r->total_work;
                $attendance_jadwal = $r->attendance_jadwal;
                $jam_masuk = $r->clock_in;
                $jam_pulang = $r->clock_out;
    
                $d_date = $this->Core_model->set_date_format($attendance_date);
                $objset->setCellValue("B" . $baris, $no);                         // 2.No
                $objset->setCellValue("C" . $baris, $full_name);                 // 3.Nama Karyawan
                $objset->setCellValue("D" . $baris, $start_join);                     // 4.Tgl Join
                $objset->setCellValue("E" . $baris, $department_name);             // 5.Departement
                $objset->setCellValue("F" . $baris, $workstation_name);                 // 6.workstation
                $objset->setCellValue("G" . $baris, $designation_name);                         // 7.posisi
                $objset->setCellValue("H" . $baris, $attendance_jadwal);                     // 8.jadwal jam kerja

                $objset->setCellValue("I" . $baris, $jam_masuk);             // 9.Gaji Pokok
                $objset->setCellValue("J" . $baris, $jam_pulang);             // 10.Jumlah Hadir
                $objset->setCellValue("K" . $baris, $time_late);             // 11.Total Gaji
                $objset->setCellValue("L" . $baris, $attendance_keterangan);         // 12.Jumlah Jam Lembur


                $no++;
                $baris++;
                $dep++;
    
            }
  
              // Rename worksheet
              $objPHPExcel->getActiveSheet()->setTitle('Karyawan Terlambat');
  
              $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);
  
              // Set active sheet index to the first sheet, so Excel opens this as the first sheet
              $objPHPExcel->setActiveSheetIndex(0);
  
              // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
              $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
              $filename = 'Karyawan Terlambat ' . $company_name . ' - ' . $attendance_date;
  
              //sesuaikan headernya
              ob_end_clean();
  
              header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
              header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");
  
              header("Cache-Control: no-store, no-cache, must-revalidate");
              header("Cache-Control: post-check=0, pre-check=0", false);
  
              // Date in the past
              header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');
  
              // HTTP/1.1
              header("Pragma: no-cache");
  
              $objWriter->save('php://output');
            //   $status = 1;
            //   echo $status;
              exit;
          } else {
              
            //   $status = 0;
            //   echo $status;
            echo 'Tidak ada data';
              exit;
          }
      }
      // daily attendance > timesheet
      public function employees_timelate_rekap()
      {
          $session = $this->session->userdata('username');
          if (empty($session)) {
              redirect('admin/');
          }
          $data['title']       = 'Laporan Rekap Karyawan Terlambat | ' . $this->Core_model->site_title();
          $data['icon']        = '<i class="fa fa-hand-o-up"></i>';
          $data['desc']        = '<span><b>INFORMASI : </b> Data Rekap Keterlambatan ini dilakukan setelah Proses Penarikan absensi! </span>';
          $data['breadcrumbs'] = 'Data Rekap Keterlambatan (Per Periode)';
          $data['path_url']    = 'employees_timelate';
  
          $data['get_all_companies']    = $this->Company_model->get_company();
          $data['all_department']    = $this->Company_model->get_department();
          $data['all_office_shifts'] = $this->Location_model->all_payroll_jenis();
  
          $role_resources_ids        = $this->Core_model->user_role_resource();
  
          if (in_array('0911', $role_resources_ids)) {
              if (!empty($session)) {
                  $data['subview'] = $this->load->view("admin/reports/employee_timelate_rekap", $data, TRUE);
                  $this->load->view('admin/layout/layout_main', $data); //page load
              } else {
                  redirect('admin/dashboard/');
              }
          } else {
              redirect('admin/dashboard');
          }
      }
  
      // daily attendance list > timesheet
      public function employees_timelate_rekap_list()
      {
        //   return 123;
          $data['title'] = $this->Core_model->site_title();
          $session       = $this->session->userdata('username');
          $user_info     = $this->Core_model->read_user_info($session['user_id']);
        //   var_dump($session);return;
        // return;
          if (!empty($session)) {
              $this->load->view("admin/reports/employee_timelate", $data);
          } else {
              redirect('admin/');
          }
          // Datatables Variables
          $draw               = intval($this->input->get("draw"));
          $start              = intval($this->input->get("start"));
          $length             = intval($this->input->get("length"));
          $role_resources_ids = $this->Core_model->user_role_resource();
  
          $start_date    = $this->input->get("start_date");
          $end_date    = $this->input->get("end_date");
          $departement_id         = $this->input->get("department_id");
          $company_id         = $this->input->get("company_id");
  
  
         // /$check_hari_libur_kantor = $this->check_hari_libur_kantor('2212',$attendance_date);
                                // var_dump($check_hari_libur_kantor['status']);return;
          $employee = $this->Employees_model->get_employee_by_department($departement_id);
        //      echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();
      
          $emp_ids = array();
          if(!empty($employee)){

              foreach($employee as $key=>$value){
                $emp_ids[] = $value->user_id;
              }
          }
        //   var_dump($emp_ids);return;
          $system   = $this->Core_model->read_setting_info(1);
    //       $emp_ids= !is_array($emp_ids) ? [$emp_ids] : $emp_ids;
    //       $query = $this->db
    //           ->select('employee_id,SUM(time_late) as time_late')
    //           ->where_in('employee_id', $emp_ids)
    //           ->where('attendance_date >=', $start_date)
    //           ->where('attendance_date <=', $end_date)
    //           ->where('company_id =', $company_id)
    //           ->where('time_late != 0')
    //           ->group_by('employee_id')
    //         ;
          
    // //    echo "<pre>";
    // //     print_r($this->db->last_query());
    // //     echo "</pre>";
    // //     die();
    //       $query1 = $query->get('xin_attendance_time')->result();
        //   echo "<pre>";
        //   print_r($this->db->last_query());
        //   echo "</pre>";
        //   die();
        //   var_dump($query1);return;
        $query = $this->db
            ->select('employee_id,SUM(time_late) as time_late')
            ->where_in('employee_id', $emp_ids)
            ->where('attendance_date >=', $start_date)
            ->where('attendance_date <=', $end_date)
            ->where('company_id =', $company_id)
            ->where('time_late != 0')
            ->group_by('employee_id');
        

        $query1 = $query->get('xin_attendance_time')->result();
              echo "<pre>";
          print_r($this->db->last_query());
          echo "</pre>";
          die();
          var_dump($query1);return;
          $data = array();
  
          $no = 1;
          $dataInsert = [];
          if (!empty($query1)) {
              foreach ($query1 as $r) {
                  
                  // user full name
                  $user_info      = $this->Employees_model->get_employees_by_user_id($r->employee_id);
                  // var_dump($user_info);return;
                  if (!empty($user_info)) {
                      $user_id        = $user_info->user_id;
                      $company_name        = $user_info->company_name;
                      $full_name      = $user_info->first_name . ' ' . $user_info->last_name;
                      $designation_name  = $user_info->designation_name;
                      $department_id  = $user_info->department_id;
                      $designation_id = $user_info->designation_id;
                      $workstation_id = $user_info->workstation_id;
                      $workstation_name = $user_info->workstation_name;
                      $start_join = $user_info->date_of_joining;
                  } else {
                      $user_id        = '';
                      $emp_nik        = '';
                      $designation_name  = '';
                      $company_name        = '';
                      $full_name      = '';
                      $department_id  = '';
                      $designation_id = '';
                      $workstation_id = '';
                      $workstation_name = '';
                  }
                  $start_date1 = new DateTime($start_date);
                  $end_date1   = new DateTime($end_date);
                  $end_date1   = $end_date1->modify('+1 day');
                  $interval_re = new DateInterval('P1D');
                  $date_range = new DatePeriod($start_date1, $interval_re, $end_date1);
                  $attendance_arr = array();
                  $dataLateByDate = [];
                  $total_late = 0;
                  $count_late = 0;
                  foreach ($date_range as $date) {
          
                      $attendance_date =  $date->format("Y-m-d");
                      $getLate = $this->db
                        ->select('employee_id,attendance_date,SUM(time_late) as time_late')
                        ->where('employee_id =', $r->employee_id)
                        ->where('attendance_date =', $attendance_date)
                        // ->where('attendance_date <=', $end_date)
                        ->where('company_id =', $company_id)
                        ->where('time_late != 0')
                        ->group_by('employee_id,attendance_date')
                        ;
                      $result = $getLate->get('xin_attendance_time')->row();
                      if(!empty($result)){

                        $dataLateByDate[] = $result->time_late;
                        $total_late += $result->time_late;
                        $count_late += 1;
                      }else{
                        $dataLateByDate[] = 0;
                      }
                    //   var_dump($result);return;
          
                  }
                  $d_date = $this->Core_model->set_date_format($attendance_date);

                  $data[] =  array_merge(
                        array(
                            $no,
                            strtoupper($full_name),
                            date("d-m-Y", strtotime($start_join)),
                            substr(strtoupper($designation_name), 0, 30),
                            $workstation_name,
                        ),
                        $dataLateByDate,
                        array(
                            $total_late,
                            $count_late,
                        )
                    );
                  $no++;
                //   var_dump($data);return;
                  // break;
                  // }
              }
              
              # code...
          }else{
  
          }
  
          $output = array(
              "draw" => $draw,
              "recordsTotal" => count($query1),
              "recordsFiltered" => count($query1),
              "data" => $data
          );
          echo json_encode($output);
          exit();
      }
      public function export_employees_timelate_rekap()
      {
        $data['title'] = $this->Core_model->site_title();
        $session       = $this->session->userdata('username');
        $user_info     = $this->Core_model->read_user_info($session['user_id']);
        //     var_dump($session);return;
        //   return;
        if (!empty($session)) {
            $this->load->view("admin/reports/employee_timelate", $data);
        } else {
            redirect('admin/');
        }
        // Datatables Variables
        $draw               = intval($this->input->get("draw"));
        $start              = intval($this->input->get("start"));
        $length             = intval($this->input->get("length"));
        $role_resources_ids = $this->Core_model->user_role_resource();
        
        $start_date    = $this->input->get("start_date");
        $end_date    = $this->input->get("end_date");
        $departement_id         = $this->input->get("department_id");
        $company_id         = $this->input->get("company_id");
        $company = $this->Core_model->read_company_info($company_id);
        $company_name = $company[0]->name;

        $employee = $this->Employees_model->get_employee_by_department($departement_id);

        $query = $this->db
            ->select('employee_id,SUM(time_late) as time_late')
            ->where('attendance_date >=', $start_date)
            ->where('attendance_date <=', $end_date)
            ->where('company_id =', $company_id)
            ->where('time_late != 0')
            ->group_by('employee_id');
        

        $query1 = $query->get('xin_attendance_time')->result();
        $emp_ids = array();
        if(!empty($employee)){

            foreach($employee as $key=>$value){
              $emp_ids[] = $value->user_id;
            }
        }
      //   var_dump($emp_ids);return;
        $system   = $this->Core_model->read_setting_info(1);
        $emp_ids= !is_array($emp_ids) ? [$emp_ids] : $emp_ids;
        $query = $this->db
            ->select('employee_id,attendance_date,SUM(time_late) as time_late')
            ->where_in('employee_id', $emp_ids)
            ->where('attendance_date >=', $start_date)
            ->where('attendance_date <=', $end_date)
            ->where('company_id =', $company_id)
            ->where('time_late != 0')
            ->group_by('employee_id,attendance_date')
          ;
        

        $query1 = $query->get('xin_attendance_time')->result();
        //      echo "<pre>";
        // print_r($this->db->last_query());
        // echo "</pre>";
        // die();
        $data = array();

        $no = 1;
        $dataInsert = [];
        if (!empty($query1)) {
           
  
              $objPHPExcel = new PHPExcel();
  
              $objPHPExcel->setActiveSheetIndex(0);
            //   $objPHPExcel->getActiveSheet()->mergeCells('A1:B2');
              // set Header
            //   $objPHPExcel->getActiveSheet()->SetCellValue('A1', 'First Name');
              $objPHPExcel->getActiveSheet()->SetCellValue('B1', 'NO');
              $objPHPExcel->getActiveSheet()->SetCellValue('C1', 'Nama karyawan');
              $objPHPExcel->getActiveSheet()->SetCellValue('D1', 'Tanggal Join');
              $objPHPExcel->getActiveSheet()->SetCellValue('E1', 'Posisi');       
              $objPHPExcel->getActiveSheet()->SetCellValue('F1', 'Workstation');                
              $objPHPExcel->getActiveSheet()->SetCellValue('G1', 'Total terlambat (Menit)');       
              $objPHPExcel->getActiveSheet()->SetCellValue('L1', 'Keterangan');       
              // set Row
              $rowCount = 2;
              
              $no = 1;
              $dep = 1;
              $baris = $dep + 1;
            foreach ($query1 as $r) {
                
                // user full name
                $user_info      = $this->Employees_model->get_employees_by_user_id($r->employee_id);
                // var_dump($user_info);return;
                if (!empty($user_info)) {
                    $user_id        = $user_info->user_id;
                    $company_name        = $user_info->company_name;
                    $full_name      = $user_info->first_name . ' ' . $user_info->last_name;
                    $designation_name  = $user_info->designation_name;
                    $department_id  = $user_info->department_id;
                    $department_name  = $user_info->department_name;
                    $designation_id = $user_info->designation_id;
                    $workstation_id = $user_info->workstation_id;
                    $workstation_name = $user_info->workstation_name;
                    $start_join = $user_info->date_of_joining;
                } else {
                    $user_id        = '';
                    $emp_nik        = '';
                    $designation_name  = '';
                    $company_name        = '';
                    $full_name      = '';
                    $department_id  = '';
                    $department_name  = '';
                    $designation_id = '';
                    $designation_id = '';
                    $workstation_id = '';
                    $workstation_name = '';
                }
        
                $attendance_status = $r->attendance_status;
                $attendance_keterangan = $r->attendance_keterangan;
                $time_late = $r->time_late;
                $early_leaving = $r->early_leaving;
                $overtime = $r->overtime;
                $total_work = $r->total_work;
                $attendance_jadwal = $r->attendance_jadwal;
                $jam_masuk = $r->clock_in;
                $jam_pulang = $r->clock_out;
    
                $d_date = $this->Core_model->set_date_format($attendance_date);
                $objset->setCellValue("B" . $baris, $no);                         // 2.No
                $objset->setCellValue("C" . $baris, $full_name);                 // 3.Nama Karyawan
                $objset->setCellValue("D" . $baris, $start_join);                     // 4.Tgl Join
                $objset->setCellValue("E" . $baris, $department_name);             // 5.Departement
                $objset->setCellValue("F" . $baris, $workstation_name);                 // 6.workstation
                $objset->setCellValue("G" . $baris, $designation_name);                         // 7.posisi
                $objset->setCellValue("H" . $baris, $attendance_jadwal);                     // 8.jadwal jam kerja

                $objset->setCellValue("I" . $baris, $jam_masuk);             // 9.Gaji Pokok
                $objset->setCellValue("J" . $baris, $jam_pulang);             // 10.Jumlah Hadir
                $objset->setCellValue("K" . $baris, $time_late);             // 11.Total Gaji
                $objset->setCellValue("L" . $baris, $attendance_keterangan);         // 12.Jumlah Jam Lembur


                $no++;
                $baris++;
                $dep++;
    
            }
  
              // Rename worksheet
              $objPHPExcel->getActiveSheet()->setTitle('Karyawan Terlambat');
  
              $objPHPExcel->getActiveSheet()->getSheetView()->setZoomScale(75);
  
              // Set active sheet index to the first sheet, so Excel opens this as the first sheet
              $objPHPExcel->setActiveSheetIndex(0);
  
              // $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel5');
              $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');
              $filename = 'Karyawan Terlambat ' . $company_name . ' - ' . $attendance_date;
  
              //sesuaikan headernya
              ob_end_clean();
  
              header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
              header("Content-Disposition: attachment; filename=" . $filename . ".xlsx");
  
              header("Cache-Control: no-store, no-cache, must-revalidate");
              header("Cache-Control: post-check=0, pre-check=0", false);
  
              // Date in the past
              header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');
  
              // HTTP/1.1
              header("Pragma: no-cache");
  
              $objWriter->save('php://output');
            //   $status = 1;
            //   echo $status;
              exit;
          } else {
              
            //   $status = 0;
            //   echo $status;
            echo 'Tidak ada data';
              exit;
          }
      }
      public function get_department()
      {
  
          $data['title'] = $this->Core_model->site_title();
              $id = $this->uri->segment(4);
  
          $data = array(
              'company_id' => $id
          );
          $session = $this->session->userdata('username');
          if (!empty($session)) {
              $this->load->view("admin/reports/get_department", $data);
          } else {
              redirect('admin/');
          }
          // Datatables Variables
          $draw = intval($this->input->get("draw"));
          $start = intval($this->input->get("start"));
          $length = intval($this->input->get("length"));
      }
}
